// Generated by CoffeeScript 1.4.0
(function() {
  var LoadStrategy;

  LoadStrategy = (function() {

    function LoadStrategy(Epic) {
      this.Epic = Epic;
      this.path = 'Package/Base/view/';
      this.cache = {};
      this.cache_local_flag = true;
    }

    LoadStrategy.prototype.missing = function(type, nm) {
      return function() {
        return React.DOM.span({
          style: {
            color: 'red'
          }
        }, "No such " + type + " called " + nm + ".");
      };
    };

    LoadStrategy.prototype.clearCache = function() {
      return this.cache = {};
    };

    LoadStrategy.prototype.preLoaded = function(pkg, type, nm) {
      var _ref, _ref1;
      return (_ref = window.EpicMvc['view$' + pkg]) != null ? (_ref1 = _ref[type]) != null ? _ref1[nm] : void 0 : void 0;
    };

    LoadStrategy.prototype.get = function(type, nm) {
      var full_nm, i, p, pkg, results, _i, _len, _ref, _ref1;
      full_nm = (type !== 'tmpl' ? type + '/' : '') + nm + '.' + type + '.html';
      if (this.cache[full_nm] != null) {
        return this.cache[full_nm];
      }
      if ((_ref = this.reverse_packages) == null) {
        this.reverse_packages = (function() {
          var _i, _ref1, _results;
          _results = [];
          for (i = _i = _ref1 = this.Epic.appconfs.length - 1; _ref1 <= 0 ? _i <= 0 : _i >= 0; i = _ref1 <= 0 ? ++_i : --_i) {
            _results.push(this.Epic.appconfs[i]);
          }
          return _results;
        }).call(this);
      }
      _ref1 = this.reverse_packages;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        pkg = _ref1[_i];
        if (p = this.preLoaded(pkg, type, nm)) {
          results = p;
        } else {
          results = this.getFile(pkg, full_nm);
          if (results === false) {
            continue;
          }
          if (results !== false) {
            results = window.EpicMvc.Extras.ParseFile$react(full_nm, results);
          }
          results = new Function('v2', 'return [' + (results.join()) + '];');
        }
        if (this.cache_local_flag && results !== false) {
          this.cache[full_nm] = results;
        }
        if (results !== false) {
          break;
        }
      }
      if (results === false) {
        console.log('NO FILE FOUND! ' + nm);
        results = this.missing(type, nm + ' USING XHR');
      }
      return results;
    };

    LoadStrategy.prototype.getFile = function(pkg, nm) {
      var path, results;
      results = false;
      path = "Package/" + pkg + "/view/";
      if (pkg === 'Base' || pkg === 'BaseDevl' || pkg === 'bootstrap' || pkg === 'react') {
        path = "EpicPkg/" + pkg + "/view/";
      }
      window.$.ajax({
        url: path + nm,
        async: false,
        cache: this.cache_local_flag ? false : true,
        dataType: 'text',
        success: function(data) {
          return results = data;
        },
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log('AJAX ERROR ');
        }
      });
      return results;
    };

    LoadStrategy.prototype.getCombinedAppConfs = function() {
      var pkg, result, _i, _len, _ref;
      result = {};
      _ref = this.Epic.appconfs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        window.$.extend(true, result, window.EpicMvc['app$' + pkg]);
      }
      return result;
    };

    LoadStrategy.prototype.template = function(nm) {
      return this.get('tmpl', nm);
    };

    LoadStrategy.prototype.page = function(nm) {
      return this.get('page', nm);
    };

    LoadStrategy.prototype.part = function(nm) {
      return this.get('part', nm);
    };

    LoadStrategy.prototype.fist = function(grp_nm) {
      return window.EpicMvc['fist$' + grp_nm];
    };

    return LoadStrategy;

  })();

  window.EpicMvc.Extras.LoadStrategy$react = LoadStrategy;

}).call(this);
