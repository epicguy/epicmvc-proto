// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var App$Base,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App$Base = (function(_super) {

    __extends(App$Base, _super);

    function App$Base(view_nm, options) {
      var ss;
      ss = {
        f: null,
        t: null,
        s: null,
        sp: []
      };
      App$Base.__super__.constructor.call(this, view_nm, options, ss);
    }

    App$Base.prototype.goTo = function(f, t, s) {
      var was, _ref;
      was = "" + this.f + "/" + this.t + "/" + this.s;
      if (!f || !(E.appGetF(f) != null)) {
        _ref = (E.appGetOpt('go')).split('/'), f = _ref[0], t = _ref[1], s = _ref[2];
      } else if (!(t != null) || !(E.appGetT(f, t) != null)) {
        t = E.appStartT(f);
        s = E.appStartS(f, t);
      } else if (!(s != null) || !(E.appGetS(f, t, s) != null)) {
        s = E.appStartS(f, t);
      }
      this.f = f;
      this.t = t;
      this.s = s;
      if (was !== ("" + this.f + "/" + this.t + "/" + this.s)) {
        return this.invalidateTables(['V']);
      }
    };

    App$Base.prototype.go = function(path) {
      var ix, q, v, _i, _len, _ref, _ref1;
      q = path.split('/');
      _ref = [this.f, this.t, this.s];
      for (ix = _i = 0, _len = _ref.length; _i < _len; ix = ++_i) {
        v = _ref[ix];
        if (!((_ref1 = q[ix]) != null ? _ref1.length : void 0)) {
          q[ix] = v;
        } else {
          break;
        }
      }
      return this.goTo(q[0], q[1], q[2]);
    };

    App$Base.prototype.appGet = function(attr) {
      return E.appGetAttr(this.f, this.t, this.s, attr);
    };

    App$Base.prototype.getStepPath = function() {
      return [this.f, this.t, this.s];
    };

    App$Base.prototype.action = function(ctx, act, p) {
      var i, m, q, r;
      r = ctx.r, i = ctx.i, m = ctx.m;
      switch (act) {
        case 'path':
          return this.go(p.path);
        case 'push':
          return this.sp.push([this.f, this.t, this.s]);
        case 'pop':
          if (this.sp.length) {
            q = this.sp.pop();
            return this.goTo(q[0], q[1], q[2]);
          }
          break;
        case 'add_message':
          return m.add(p.type, p.msgs);
        case 'add_issue':
          return i.add(p.type, p.msgs);
        case 'clear':
          this.issues = new E.Issue(this.view_nm);
          this.messages = new E.Issue(this.view_nm);
          return this.invalidateTables(['Issue', 'Message']);
        default:
          return App$Base.__super__.action.call(this, ctx, act, p);
      }
    };

    App$Base.prototype.setIssues = function(issue_obj) {
      if ((issue_obj != null ? issue_obj.count() : void 0) !== 0) {
        this.issues.addObj(issue_obj);
      }
      return this.invalidateTables(['Issue']);
    };

    App$Base.prototype.setMessages = function(issue_obj) {
      if ((issue_obj != null ? issue_obj.count() : void 0) !== 0) {
        this.messages.addObj(issue_obj);
      }
      return this.invalidateTables(['Message']);
    };

    App$Base.prototype.getTable = function(tbl_nm) {
      var map;
      map = E['issues$' + this.appGet('group')];
      this.Table[tbl_nm] = (function() {
        switch (tbl_nm) {
          case 'Message':
            return this.messages.asTable(map);
          case 'Issue':
            return this.issues.asTable(map);
          case 'V':
            return [E.appGetVars(this.f, this.t, this.s)];
          default:
            return App$Base.__super__.getTable.call(this, tbl_nm);
        }
      }).call(this);
    };

    return App$Base;

  })(E.ModelJS);

  E.Model.App$Base = App$Base;

}).call(this);
