// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var Epic,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Epic = (function() {

    function Epic() {
      this.refresh = __bind(this.refresh, this);
      this.appNm = 'Epic::appNm=NOT-SET';
      this.oView = null;
      this.getView = function() {
        return this.oView;
      };
      this.oAppConf = null;
      this.appConf = function() {
        return this.oAppConf;
      };
      this.oRequest = null;
      this.request = function() {
        return this.oRequest;
      };
      this.oFistGroupCache = null;
      this.getFistGroupCache = function() {
        return this.oFistGroupCache;
      };
      this.v = {
        appConf: null
      };
      this.oModel = {};
      this.oFist = {};
      this.counter = 0;
      this.guard_run = false;
      this.inClick = false;
      this.wasModal = false;
      this.modelState = {};
      this.content_watch = [];
    }

    Epic.prototype.log1 = function() {
      return null;
    };

    Epic.prototype.log2 = function() {
      return null;
    };

    Epic.prototype.nextCounter = function() {
      return ++this.counter;
    };

    Epic.prototype.getInstanceNm = function(view_nm) {
      var inst_nm;
      return inst_nm = this.oAppConf.getObj(view_nm, 'inst');
    };

    Epic.prototype.getInstance = function(view_nm) {
      var cls, inst_nm;
      inst_nm = this.oAppConf.getObj(view_nm, 'inst');
      if (!(inst_nm in this.oModel)) {
        cls = this.oAppConf.getObj(view_nm, 'class');
        if (!(window.EpicMvc.Model[cls] != null)) {
          alert(":Epic.getInstance: (app.js) MODELS: " + view_nm + ": class: " + cls + " [(" + cls + ") not in window.EpicMvc.Model]");
        }
        this.oModel[inst_nm] = new window.EpicMvc.Model[cls](this, view_nm);
        if (inst_nm in this.modelState) {
          this.oModel[inst_nm].restoreState(this.modelState[inst_nm]);
        }
      }
      return this.oModel[inst_nm];
    };

    Epic.prototype.getViewTable = function(view_tbl_nm) {
      var a;
      a = view_tbl_nm.split('/');
      return this.getInstance(a[0]).getTable(a[1]);
    };

    Epic.prototype.getLookaheadClick = function(planned_action) {
      var sp;
      sp = this.getInstance('Pageflow').getStepPath();
      return this.oAppConf.findClick(planned_action, sp);
    };

    Epic.prototype.getDomCache = function() {
      var attr, sp;
      sp = this.getInstance('Pageflow').getStepPath();
      attr = this.oAppConf.getS(sp[0], sp[1], sp[2]).dom_cache;
      if (typeof attr === 'string') {
        return attr;
      }
      return false;
    };

    Epic.prototype.getExternalUrl = function() {
      var a, attr, sp;
      sp = this.getInstance('Pageflow').getStepPath();
      attr = this.oAppConf.getS(sp[0], sp[1], sp[2]).url;
      if (typeof attr !== 'string') {
        return false;
      }
      a = attr.split('/');
      return this.getInstance(a[0]).action(a[1], {})[0].url;
    };

    Epic.prototype.getGroupNm = function() {
      var oPf, t, ts, _ref;
      oPf = this.getInstance('Pageflow');
      _ref = oPf.getTrackPath(), ts = _ref[0], t = _ref[1];
      return this.oAppConf.getGroupNm(ts, t);
    };

    Epic.prototype.getFistInstance = function(flist_nm, grp_nm) {
      var fist_nm, g, inst_nm, view_nm;
      g = grp_nm != null ? grp_nm : this.getGroupNm();
      fist_nm = this.getFistGroupCache().getCanonicalFist(g, flist_nm);
      inst_nm = "" + g + "_" + fist_nm;
      if (!(inst_nm in this.oFist)) {
        view_nm = this.oAppConf.getFistView(g, fist_nm);
        this.oFist[inst_nm] = new window.EpicMvc.Fist(this, g, fist_nm, view_nm);
      }
      return this.oFist[inst_nm];
    };

    Epic.prototype.Execute = function(va, params) {
      var action, oM, view_nm, _ref;
      this.log2(':Execute', va, params);
      _ref = va.split('/'), view_nm = _ref[0], action = _ref[1];
      oM = this.getInstance(view_nm);
      return oM.action(action, params);
    };

    Epic.prototype.run = function(appconfs, artifact_load_strategy_class, render_class, content_watch) {
      var loader, renderer;
      if (this.guard_run) {
        return true;
      }
      this.guard_run = true;
      loader = new window.EpicMvc.Extras[artifact_load_strategy_class](this);
      renderer = new window.EpicMvc.Extras[render_class](this, content_watch);
      return this.init(appconfs, loader, renderer, content_watch);
    };

    Epic.prototype.init = function(appconfs, loader, renderer, content_watch) {
      var f;
      this.appconfs = appconfs;
      this.loader = loader;
      this.renderer = renderer;
      this.content_watch = content_watch;
      this.oRequest = new window.EpicMvc.Request(this);
      this.oFistGroupCache = new window.EpicMvc.FistGroupCache(this, this.loader);
      this.oAppConf = new window.EpicMvc.AppConf(this, this.loader);
      this.oView = new window.EpicMvc.ViewExe(this, this.loader, this.content_watch);
      f = this.oAppConf.loginF();
      (this.getInstance('Pageflow')).goTo(f);
      return true;
    };

    Epic.prototype.isSecurityError = function(e) {
      var special, _ref;
      special = 'Security';
      if (((e != null ? (_ref = e.message) != null ? _ref.substring : void 0 : void 0) != null) && (e.message.substring(0, special.length)) === special) {
        return true;
      }
      return false;
    };

    Epic.prototype.getFormData = function() {
      return this.renderer.getFormData();
    };

    Epic.prototype.renderStrategy = function(content, history, click_index, modal) {
      this.renderer.render(content, history, click_index, modal);
      return null;
    };

    Epic.prototype.render = function(template, sp, avoid_form_reset) {
      var history, inClick, k, modal, o, page, stuff, _ref;
      page = this.oAppConf.getPage(sp);
      modal = this.oAppConf.findAttr(sp[0], sp[1], sp[2], 'modal');
      if (modal) {
        template = this.oAppConf.mapModalTemplate(modal);
        modal = true;
      }
      history = (function() {
        switch ("" + (Number(this.wasModal)) + ":" + (Number(modal))) {
          case '0:0':
            return true;
          case '1:0':
            return 'replace';
          case '0:1':
            return false;
          case '1:1':
            return false;
          default:
            return alert('my code is hosed');
        }
      }).call(this);
      this.oView.init(template, page);
      try {
        stuff = this.oView.run();
      } catch (e) {
        if (this.isSecurityError(e)) {
          return e;
        } else {
          inClick = false;
          throw e;
        }
      }
      this.renderStrategy(stuff, history, this.inClick, modal);
      if (avoid_form_reset !== true) {
        _ref = this.oFist;
        for (k in _ref) {
          o = _ref[k];
          if (typeof o.eventInitializePage === "function") {
            o.eventInitializePage();
          }
        }
      }
      this.wasModal = modal;
      return true;
    };

    Epic.prototype.refresh = function(forTables) {
      var _this = this;
      if (this.inClick === true) {
        return setTimeout((function() {
          return _this.refresh(forTables);
        }), 500);
      } else {
        if (this.oView.checkRefresh(forTables)) {
          return this.renderSecure(true);
        }
      }
    };

    Epic.prototype.makeClick = function(form_flag, action, params, render_flag) {
      var click_index, f, p_action;
      f = ':makeClick:' + action;
      this.log2(f, 'form?' + (form_flag ? 'Y' : 'N'), 'render' + (render_flag ? 'Y' : 'N'), params);
      p_action = {};
      p_action[form_flag ? '_b' : '_a'] = action;
      click_index = this.oRequest.addLink($.extend(p_action, params));
      this.click(click_index, !render_flag);
      return click_index;
    };

    Epic.prototype.click = function(click_index, no_render) {
      var click_result, f, k, o, oC, oPf, ss, _ref, _ref1, _ref2, _ref3;
      f = ':click';
      this.log2(f, click_index);
      if (this.inClick !== false) {
        alert('WARNING: You are already in click');
      }
      if (!no_render) {
        this.inClick = click_index;
      }
      if ((_ref = window.event) != null) {
        _ref.returnValue = false;
      }
      _ref1 = this.oFist;
      for (k in _ref1) {
        o = _ref1[k];
        if (typeof o.eventNewRequest === "function") {
          o.eventNewRequest();
        }
      }
      _ref2 = this.oModel;
      for (k in _ref2) {
        o = _ref2[k];
        if (typeof o.eventNewRequest === "function") {
          o.eventNewRequest();
        }
      }
      if (click_index) {
        this.oRequest.start(click_index);
      }
      oC = new window.EpicMvc.ClickAction(this);
      click_result = oC.click();
      oPf = this.getInstance('Pageflow');
      oPf.setIssues(click_result[0]);
      oPf.setMessages(click_result[1]);
      this.modelState = {};
      _ref3 = this.oModel;
      for (k in _ref3) {
        o = _ref3[k];
        if ((o.saveState != null) && (ss = o.saveState())) {
          this.modelState[k] = ss;
        }
      }
      if (no_render !== true) {
        this.renderSecure();
      }
      return this.inClick = false;
    };

    Epic.prototype.renderSecure = function(avoid_form_reset) {
      var oC, oPf, render_attempts, render_result, sp, template;
      oC = new window.EpicMvc.ClickAction(this);
      oPf = this.getInstance('Pageflow');
      render_result = false;
      render_attempts = 3;
      while (render_result !== true && --render_attempts > 0) {
        sp = oPf.getStepPath();
        if (render_result !== false) {
          oC.click(render_result.message, sp);
        }
        sp = oPf.getStepPath();
        template = this.oAppConf.findTemplate(sp);
        render_result = this.render(template, sp, avoid_form_reset);
      }
      return this.oView.doDefer();
    };

    Epic.prototype.getModelState = function() {
      return this.modelState;
    };

    Epic.prototype.setModelState = function(s) {
      var inst_nm, _base, _results;
      if (s != null) {
        this.modelState = s;
      }
      _results = [];
      for (inst_nm in this.oModel) {
        _results.push(typeof (_base = this.oModel[inst_nm]).restoreState === "function" ? _base.restoreState(this.modelState[inst_nm]) : void 0);
      }
      return _results;
    };

    return Epic;

  })();

  window.EpicMvc = {
    Extras: {},
    Model: {},
    Epic: new Epic()
  };

}).call(this);
