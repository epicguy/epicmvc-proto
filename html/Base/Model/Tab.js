// Generated by CoffeeScript 1.4.0
(function() {
  var Tab,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tab = (function(_super) {

    __extends(Tab, _super);

    function Tab(view_nm, options) {
      Tab.__super__.constructor.call(this, view_nm, options);
      this.tabs = E.merge({
        Modal: {
          backdrop: false
        }
      }, options);
    }

    Tab.prototype.event = function(name, type, groupNm, itemNm, data) {
      var changed, f, group, _ref;
      f = 'event';
      _log2(f, {
        name: name,
        type: type,
        groupNm: groupNm,
        itemNm: itemNm,
        data: data
      });
      group = this._getTab(groupNm, itemNm);
      type = (_ref = group.TYPE) != null ? _ref : groupNm;
      switch (type.toUpperCase()) {
        case 'MODAL':
          changed = this._toggleModal(group, itemNm);
          break;
        case 'DROP':
        case 'COLLAPSE':
          changed = this._toggleDrop(group, itemNm);
          break;
        default:
          changed = this._setTab(group, itemNm);
      }
      if (changed) {
        return this.invalidateTables([groupNm]);
      }
    };

    Tab.prototype.action = function(ctx, act, p) {
      var change, group, groupNm, nm;
      switch (act) {
        case 'toggle':
          this.event('Tab', 'click', p.group, p.item, p);
          break;
        case 'clear_modal':
          groupNm = 'Modal';
          group = this._getTab(groupNm);
          change = false;
          for (nm in group) {
            if (nm !== 'backdrop' && group[nm] === true) {
              group.backdrop = group[nm] = false;
              change = true;
            }
          }
          if (change) {
            this.invalidateTables([groupNm]);
          }
          break;
        case 'clear_drop':
          groupNm = 'Drop';
          group = this._getTab(groupNm);
          change = false;
          for (nm in group) {
            if (group[nm] === true) {
              group[nm] = false;
              change = true;
            }
          }
          if (change) {
            this.invalidateTables([groupNm]);
          }
          break;
        case 'clear':
          this.event('Tab', 'click', p.group, '_CLEARED', p);
          break;
        default:
          return Tab.__super__.action.call(this, ctx, act, p);
      }
    };

    Tab.prototype.loadTable = function(tbl_nm) {
      var group;
      group = this._getTab(tbl_nm);
      return this.Table[tbl_nm] = [group];
    };

    Tab.prototype._getTab = function(groupNm, itemNm) {
      var _base, _base1, _ref, _ref1;
      if ((_ref = (_base = this.tabs)[groupNm]) == null) {
        _base[groupNm] = {};
      }
      if (itemNm != null) {
        if ((_ref1 = (_base1 = this.tabs[groupNm])[itemNm]) == null) {
          _base1[itemNm] = false;
        }
      }
      return this.tabs[groupNm];
    };

    Tab.prototype._toggleModal = function(group, itemNm) {
      var change, nm, now;
      if (itemNm === '_CLEARED') {
        change = false;
        for (nm in group) {
          if ((nm !== 'backdrop' && nm !== itemNm) && group[nm] === true) {
            change = true;
            group.backdrop = group[nm] = false;
          }
        }
      } else if (group[itemNm] !== true) {
        change = true;
        now = group.backdrop = group[itemNm] = true;
        for (nm in group) {
          if ((nm !== 'backdrop' && nm !== itemNm) && group[nm] === true) {
            group[nm] = false;
          }
        }
      }
      return change;
    };

    Tab.prototype._toggleDrop = function(group, itemNm) {
      var change, nm, now;
      if (itemNm === '_CLEARED') {
        change = false;
        for (nm in group) {
          if (nm !== itemNm && group[nm] === true) {
            change = true;
            group[nm] = false;
          }
        }
      } else {
        change = true;
        now = group[itemNm] = !group[itemNm];
        if (now === true) {
          for (nm in group) {
            if (nm !== itemNm && group[nm] === true) {
              group[nm] = false;
            }
          }
        }
      }
      return change;
    };

    Tab.prototype._setTab = function(group, itemNm) {
      var nm;
      if (group[itemNm] === true) {
        return false;
      }
      for (nm in group) {
        group[nm] = false;
      }
      group[itemNm] = true;
      return true;
    };

    return Tab;

  })(E.ModelJS);

  E.Model.Tab$Base = Tab;

}).call(this);
