// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  var View$Base,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  View$Base = (function(superClass) {
    extend(View$Base, superClass);

    function View$Base(view_nm, options) {
      this.ex = bind(this.ex, this);
      this.T_if = bind(this.T_if, this);
      this.T_page = bind(this.T_page, this);
      this.handleIt = bind(this.handleIt, this);
      var frames, ix, nm;
      View$Base.__super__.constructor.call(this, view_nm, options);
      frames = E.appGetSetting('frames');
      this.frames = (function() {
        var i, len, ref, results;
        ref = ((function() {
          var results1;
          results1 = [];
          for (nm in frames) {
            results1.push(nm);
          }
          return results1;
        })()).sort();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          ix = ref[i];
          results.push(frames[ix]);
        }
        return results;
      })();
      this.frames.push('X');
      this.did_run = false;
      this.in_run = false;
      window.oE = this;
      this.defer_it_cnt = 0;
      this.start = false;
    }

    View$Base.prototype.nest_up = function(who) {
      var f;
      f = 'nest_up:' + who;
      if (this.defer_it_cnt === 0) {
        if (this.in_run) {
          BLOWUP();
        }
        this.in_run = true;
        this.start = new Date().getTime();
        this.defer_it = new m.Deferred();
      }
      return this.defer_it_cnt++;
    };

    View$Base.prototype.nest_dn = function(who) {
      var f;
      f = 'nest_dn:' + who;
      if (this.defer_it_cnt > 0) {
        this.defer_it_cnt--;
      }
      if (this.defer_it_cnt === 0) {
        _log2(f, 'END RUN', this.defer_content, new Date().getTime() - this.start);
        this.in_run = false;
        return this.defer_it.resolve([this.modal, this.defer_content]);
      }
    };

    View$Base.prototype.run = function() {
      var f, flow, layout, modal, ref, ref1, ref2, step, track, who;
      f = 'run';
      who = 'R';
      ref = E.App().getStepPath(), flow = ref[0], track = ref[1], step = ref[2];
      if (modal = E.appFindAttr(flow, track, step, 'modal')) {
        modal = (ref1 = (E.appGetSetting('modals'))[modal]) != null ? ref1 : modal;
      }
      layout = modal != null ? modal : E.appGetSetting('layout', flow, track, step);
      this.N = {};
      this.modal = modal ? true : false;
      this.page_name = (ref2 = (E.appGetS(flow, track, step)).page) != null ? ref2 : step;
      this.did_run = true;
      this.frames[this.frames.length - 1] = layout;
      this.frame_inx = 0;
      this.resetInfo();
      this.nest_up(who);
      this.defer_content = this.kids([['page', {}]]);
      this.nest_dn(who);
      return this.defer_it.promise;
    };

    View$Base.prototype.resetInfo = function() {
      this.R = {};
      this.I = {};
      this.P = [{}];
    };

    View$Base.prototype.saveInfo = function() {
      var f, saved_info;
      f = 'saveInfo';
      saved_info = E.merge({}, {
        I: this.I,
        P: this.P
      });
      return saved_info;
    };

    View$Base.prototype.restoreInfo = function(saved_info) {
      var f, nm, results;
      f = 'restoreInfo';
      this.resetInfo();
      this.P = saved_info.P;
      this.I = saved_info.I;
      results = [];
      for (nm in this.I) {
        if (!(nm in this.R)) {
          results.push(this.R[nm] = this._getMyRow(this.I[nm]));
        }
      }
      return results;
    };

    View$Base.prototype._getMyRow = function(I) {
      var f;
      f = '_getMyRow';
      if (I.m != null) {
        return (E[I.m](I.o))[I.c];
      }
      if (!(I.p in this.R)) {
        this.R[I.p] = this._getMyRow(this.I[I.p]);
      }
      if (I.p && I.p in this.R) {
        return this.R[I.p][I.o][I.c];
      }
    };

    View$Base.prototype.getTable = function(nm) {
      var f, i, len, p, rVal, ref;
      f = 'Base:M/View.getTable:' + nm;
      switch (nm) {
        case 'If':
          return [this.N];
        case 'Part':
          rVal = {};
          ref = this.P;
          for (i = 0, len = ref.length; i < len; i++) {
            p = ref[i];
            E.merge(rVal, p);
          }
          return [rVal];
        default:
          return [];
      }
    };

    View$Base.prototype.invalidateTables = function(view_nm, tbl_nms, deleted_tbl_nms) {
      var f;
      if (!(this.did_run && deleted_tbl_nms.length)) {
        return;
      }
      f = 'Base:M/View.invalidateTables';
      m.startComputation();
      m.endComputation();
    };


    /* JCS: TODO FIGURE OUT IF DYNAMIC OR DEFER IS REALLY EVER NEEDED AGAIN - MITHRIL MAKES EVERYTHING DYNAMIC, NO? AND DATA-EX-* ATTRS DO DEFER, YES?
    	#JCS:DEFER:DYNAMIC
    	 * Wraper for page/part content which needs special treatment (dyanmic='div', epic:defer's, etc.)
    	wrap: (view, attrs, content, defer, has_root)->
    		f= 'wrap'
    		if defer.length
    			inside= E.merge [], defer
    			attrs.config= (element, isInit, context) =>
    				f= 'Base:M/View..config:'+ view
    				for defer in inside
    					_log2 f, defer
    					@doDefer defer, element, isInit, context
    		if 'dynamic' of attrs # Always render the container, even if content is null
    			tag: attrs.dynamic, attrs: attrs, children: content
    		else
    			return '' unless content
    			if has_root
    				 * TODO WHAT IS GOING ON WITH attrs TO wrap IF CONTENT HAS ATTRS? (part=)
    				_log2 f, 'has-root-content', {view,attrs,content,defer,has_root}
    				BLOWUP() if 'A' isnt E.type_oau content
    				 * TODO E2 FIGURE OUT WHY I COMMENTED THIS OUT; ALSO, PLAN IS TO USE DATA-EX-* ATTRS PER ELEMENT, NOT <E-DEFER
    				#content[0].attrs.config= attrs.config # Pass the defer logic to the part's div
    				content
    			else
    				tag: 'div', attrs: attrs, children: content
    	doDefer: (defer_obj, element, isInit, context) =>
    		if 'A' is E.type_oau defer_obj.defer
    			_log2 'WARNING', 'Got an array for defer', defer_obj.defer
    			return 'WAS-ARRAY'
    		defer_obj.func element, isInit, context, defer_obj.attrs if defer_obj.func
    	T_defer: ( attrs, content) -> # TODO IMPLEMENT DEFER LOGIC ATTRS?
    		f= 'Base:M/View.T_defer:'
    		f_content= @handleIt content
    		#_log f, content, f_content
    		 * When epic tags are inside defer, you get nested arrays that need to be joined (w/o commas)
    		if 'A' is E.type_oau f_content
    			sep= ''
    			ans= ''
    			joiner= (a) ->
    				for e in a
    					if 'A' is E.type_oau e then joiner e else ans+= sep+ e
    			joiner f_content
    			#_log f, 'join', ans
    			f_content= ans
    		@D[ @D.length- 1].push {attrs, func: new Function 'element', 'isInit', 'context', 'attrs', f_content}
    		'' # No content to display for these
     */

    View$Base.prototype.handleIt = function(content) {
      var f;
      f = 'handleIt';
      if (typeof content === 'function') {
        content = content();
      }
      return content;
    };

    View$Base.prototype.formatFromSpec = function(val, spec, custom_spec) {
      var f, left, ref, right, str;
      f = 'formatFromSpec';
      switch (spec) {
        case '':
          if (custom_spec) {
            E.option.v2(val, custom_spec);
            return E.custom_filter(val, custom_spec);
          } else {
            return val;
          }
          break;
        case 'count':
          return val != null ? val.length : void 0;
        case 'bool':
          if (val) {
            return true;
          } else {
            return false;
          }
        case 'bytes':
          return window.bytesToSize(Number(val));
        case 'uriencode':
          return encodeURIComponent(val);
        case 'quo':
          return ((val.replace(/\\/g, '\\\\')).replace(/'/g, '\\\'')).replace(/"/g, '\\"');
        case '1':
          return (String(val))[0];
        case 'lc':
          return (String(val)).toLowerCase();
        case 'ucFirst':
          str = (String(str)).toLowerCase();
          return str.slice(0, 1).toUpperCase() + str.slice(1);
        default:
          if (spec[0] === '?') {
            ref = spec.slice(1).split('?'), left = ref[0], right = ref[1];
            return (val ? left : right != null ? right : '').replace(new RegExp('[%]', 'g'), val);
          } else {
            return E.option.v1(val, spec);
          }
      }
    };

    View$Base.prototype.v3 = function(view_nm, tbl_nm, key, format_spec, custom_spec) {
      var row, val;
      row = (E[view_nm](tbl_nm))[0];
      val = row[key];
      if (format_spec != null) {
        return this.formatFromSpec(val, format_spec, custom_spec);
      } else {
        return val;
      }
    };

    View$Base.prototype.v2 = function(table_ref, col_nm, format_spec, custom_spec) {
      var ans;
      if (col_nm[0] === '_') {
        ans = this.R[table_ref]._[(col_nm.slice(1)).toLowerCase()];
      } else {
        ans = this.R[table_ref][col_nm];
      }
      if (format_spec != null) {
        return this.formatFromSpec(ans, format_spec, custom_spec);
      } else {
        return ans;
      }
    };

    View$Base.prototype.weed = function(attrs) {
      var clean_attrs, f, nm, val;
      f = 'weed';
      clean_attrs = {};
      for (nm in attrs) {
        val = attrs[nm];
        if (nm[0] !== '?') {
          clean_attrs[nm] = val;
        } else {
          if (val) {
            clean_attrs[nm.slice(1)] = val;
          }
        }
      }
      return clean_attrs;
    };

    View$Base.prototype.kids = function(kids) {
      var ans, f, i, ix, kid, len, out, who;
      f = 'kids';
      who = 'K';
      out = [];
      for (ix = i = 0, len = kids.length; i < len; ix = ++i) {
        kid = kids[ix];
        if ('A' === E.type_oau(kid)) {
          out.push(ix);
          ans = this['T_' + kid[0]](kid[1], kid[2]);
          if (ans != null ? ans.then : void 0) {
            this.nest_up(who);
            (function(_this) {
              return (function(ix) {
                return ans.then(function(result) {
                  out[ix] = result;
                  return _this.nest_dn(who);
                }, function(err) {
                  console.error('kids', err);
                  out[ix] = err.message;
                  return _this.nest_dn(who);
                });
              });
            })(this)(ix);
          } else {
            out[ix] = ans;
          }
        } else {
          out.push(kid);
        }
      }
      return out;
    };

    View$Base.prototype.loadPartAttrs = function(attrs, full) {
      var attr, f, result, val;
      f = 'Base:M/View.loadPartAttrs';
      result = {};
      for (attr in attrs) {
        val = attrs[attr];
        if ('data-e-' !== attr.slice(0, 7)) {
          continue;
        }
        result[full ? attr : attr.slice(7)] = val;
      }
      return result;
    };

    View$Base.prototype.T_page = function(attrs) {
      var d_load, f, name, view;
      f = 'T_page';
      if (this.frame_inx < this.frames.length) {
        d_load = E.oLoader.d_layout(name = this.frames[this.frame_inx++]);
        view = (this.frame_inx < this.frames.length ? 'Frame' : 'Layout') + '/' + name;
      } else {
        d_load = E.oLoader.d_page(name = this.page_name);
        view = 'Page/' + name;
      }
      return this.piece_handle(view, attrs != null ? attrs : {}, d_load);
    };

    View$Base.prototype.T_part = function(attrs) {
      var d_load, f, view;
      view = attrs.part;
      f = 'T_part:' + view;
      d_load = E.oLoader.d_part(view);
      return this.piece_handle('Part/' + view, attrs, d_load, true);
    };

    View$Base.prototype.piece_handle = function(view, attrs, obj, is_part) {
      var can_componentize, content, f, saved_info;
      f = 'piece_handle';
      if (obj != null ? obj.then : void 0) {
        return this.D_piece(view, attrs, obj, is_part);
      }
      content = obj.content, can_componentize = obj.can_componentize;
      saved_info = this.saveInfo();
      this.P.push(this.loadPartAttrs(attrs));
      content = this.handleIt(content);
      this.restoreInfo(saved_info);
      return content;

      /* JCS:DEFER:DYNAMIC 
      		defer= @D.pop()
      		#_log2 f, 'defer', view, defer
      		if can_componentize or not is_part or attrs.dynamic or defer.length
      			#_log2 f, 'defer YES', view, defer
      			if defer.length and not can_componentize and not attrs.dynamic
      				_log2 "WARNING: DEFER logic in (#{view}); wrapping DIV tag."
      			result= @wrap view, attrs, content, defer, can_componentize
      		else
      			#_log2 f, 'defer NO!', view, defer
      			result= content
      		result
       */
    };

    View$Base.prototype.D_piece = function(view, attrs, d_load, is_part) {
      var d_result, f, saved_info, who;
      f = 'D_piece';
      who = 'P';
      this.nest_up(who + view);
      saved_info = this.saveInfo();
      d_result = d_load.then((function(_this) {
        return function(obj) {
          var result;
          try {
            if (obj != null ? obj.then : void 0) {
              BLOWUP();
            }
            _this.restoreInfo(saved_info);
            result = _this.piece_handle(view, attrs, obj, is_part);
            return result;
          } finally {
            _this.nest_dn(who + view);
          }
        };
      })(this), (function(_this) {
        return function(err) {
          console.error('D_piece', err);
          _this.nest_dn(who + view + ' IN-ERROR');
          return typeof _this._Err === "function" ? _this._Err('tag', 'page/part', attrs, err) : void 0;
          throw err;
        };
      })(this));
      return d_result;
    };

    View$Base.prototype.T_if_true = function(attrs, content) {
      if (this.N[attrs.name]) {
        return this.handleIt(content());
      } else {
        return '';
      }
    };

    View$Base.prototype.T_if_false = function(attrs, content) {
      if (this.N[attrs.name]) {
        return '';
      } else {
        return this.handleIt(content);
      }
    };

    View$Base.prototype.T_if = function(attrs, content) {
      var is_true, issue, ref, ref1, tbl;
      issue = false;
      is_true = false;
      if ('val' in attrs) {
        if ('eq' in attrs) {
          if (attrs.val === attrs.eq) {
            is_true = true;
          }
        } else if ('ne' in attrs) {
          if (attrs.val !== attrs.ne) {
            is_true = true;
          }
        } else if ('gt' in attrs) {
          if (attrs.val > attrs.gt) {
            is_true = true;
          }
        } else if ('in_list' in attrs) {
          if (ref = attrs.val, indexOf.call(attrs.in_list.split(','), ref) >= 0) {
            is_true = true;
          }
        } else if ('not_in_list' in attrs) {
          if (ref1 = attrs.val, indexOf.call(attrs.not_in_list.split(','), ref1) < 0) {
            is_true = true;
          }
        } else {
          issue = true;
        }
      } else if ('set' in attrs) {
        is_true = attrs.set ? true : false;
      } else if ('not_set' in attrs) {
        is_true = attrs.not_set ? false : true;
      } else if ('table_is_empty' in attrs) {
        tbl = this._accessModelTable(attrs.table_is_empty, false);
        if (!tbl.length) {
          is_true = true;
        }
      } else if ('table_is_not_empty' in attrs) {
        tbl = this._accessModelTable(attrs.table_is_not_empty, false);
        if (tbl.length) {
          is_true = true;
        }
      } else {
        issue = true;
      }
      if (issue) {
        console.log('ISSUE T_if', attrs);
      }
      if ('name' in attrs) {
        this.N[attrs.name] = is_true;
      }
      if (is_true && content) {
        return this.handleIt(content);
      } else {
        return '';
      }
    };

    View$Base.prototype._accessModelTable = function(at_table, alias) {
      var lh, ref, rh, rh_alias, root, tbl;
      ref = at_table.split('/'), lh = ref[0], rh = ref[1];
      if (lh in this.R) {
        tbl = this.R[lh][rh];
        root = {
          p: lh
        };
      } else {
        tbl = E[lh](rh);
        root = {
          m: lh
        };
      }
      if (alias === false) {
        return tbl;
      }
      rh_alias = alias != null ? alias : rh;
      if (tbl.length === 0) {
        return [tbl, rh_alias];
      }
      root.o = rh;
      this.I[rh_alias] = root;
      return [tbl, rh_alias];
    };

    View$Base.prototype.T_foreach = function(attrs, content_f) {
      var count, f, i, len, limit, ref, result, rh_alias, row, tbl;
      f = 'T_foreach';
      ref = this._accessModelTable(attrs.table, attrs.alias), tbl = ref[0], rh_alias = ref[1];
      if (tbl.length === 0) {
        return '';
      }
      result = [];
      limit = 'limit' in attrs ? Number(attrs.limit) - 1 : tbl.length;
      for (count = i = 0, len = tbl.length; i < len; count = ++i) {
        row = tbl[count];
        row = tbl[count];
        row._ = {
          count: count,
          first: count === 0,
          last: count === limit - 1,
          "break": false
        };
        this.R[rh_alias] = row;
        this.I[rh_alias].c = count;
        result.push(this.handleIt(content_f));
      }
      delete this.I[rh_alias];
      delete this.R[rh_alias];
      return result;
    };

    View$Base.prototype.T_fist = function(attrs, content_f) {
      var ans, content, f, fist, foreach_attrs, masterAlias, model, part, ref, ref1, ref2, ref3, ref4, ref5, ref6, rh_1, rh_alias, subTable, table, tbl;
      f = 'T_fist';
      _log2(f, attrs, content_f);
      fist = E.fistDef[attrs.fist];
      model = (ref = fist.event) != null ? ref : 'Fist';
      table = attrs.fist + (attrs.row != null ? ':' + attrs.row : '');
      subTable = (ref1 = (ref2 = attrs.via) != null ? ref2 : fist.via) != null ? ref1 : 'Control';
      masterAlias = 'Fist';
      ref3 = this._accessModelTable(model + '/' + table, masterAlias), tbl = ref3[0], rh_alias = ref3[1];
      _log2(f, 'tbl,rh_alias (master)', tbl, rh_alias);
      this.R[rh_alias] = tbl[0];
      this.I[rh_alias].c = 0;
      rh_1 = rh_alias;
      content = content_f ? content_f : (part = (ref4 = (ref5 = attrs.part) != null ? ref5 : fist.part) != null ? ref4 : 'fist_default', attrs.part != null ? attrs.part : attrs.part = (ref6 = fist.part) != null ? ref6 : 'fist_default', (function(_this) {
        return function() {
          return _this.kids([
            [
              'part', E.merge({
                part: part
              }, _this.loadPartAttrs(attrs, true))
            ]
          ]);
        };
      })(this));
      foreach_attrs = {
        table: masterAlias + '/' + subTable
      };
      if (attrs.alias != null) {
        foreach_attrs.alias = attrs.alias;
      }
      ans = this.T_foreach(foreach_attrs, content);
      delete this.R[rh_1];
      delete this.I[rh_1];
      return ans;
    };

    View$Base.prototype.ex = function(el, isInit, ctx) {
      var attrs, d, e, f, i, ix, nm, p1, p2, ref, ref1, results, val;
      f = 'ex';
      attrs = el.attributes;
      results = [];
      for (ix = i = 0, ref = attrs.length; 0 <= ref ? i < ref : i > ref; ix = 0 <= ref ? ++i : --i) {
        if (!('data-ex-' === attrs[ix].name.slice(0, 8))) {
          continue;
        }
        ref1 = attrs[ix].name.split('-'), d = ref1[0], e = ref1[1], nm = ref1[2], p1 = ref1[3], p2 = ref1[4];
        val = attrs[ix].value;
        _log2(f, attrs[ix].name, val, p1, p2);
        E.option.ex1(nm, attrs[ix].name);
        results.push(E['ex$' + nm](el, isInit, ctx, val, p1, p2));
      }
      return results;
    };

    return View$Base;

  })(E.ModelJS);

  E.Model.View$Base = View$Base;

}).call(this);
