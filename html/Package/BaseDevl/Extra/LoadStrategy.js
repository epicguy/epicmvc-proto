// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var LoadStrategy;

  LoadStrategy = (function() {

    function LoadStrategy(appconfs) {
      var dir, dir_map, i, pkg, pkgs, _i, _j, _len, _len1, _ref, _ref1;
      this.appconfs = appconfs;
      this.cache = {};
      this.cache_local_flag = true;
      this.reverse_packages = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = _ref = this.appconfs.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          _results.push(this.appconfs[i]);
        }
        return _results;
      }).call(this);
      dir_map = {};
      _ref = E.option.load_dirs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], dir = _ref1.dir, pkgs = _ref1.pkgs;
        for (_j = 0, _len1 = pkgs.length; _j < _len1; _j++) {
          pkg = pkgs[_j];
          dir_map[pkg] = dir;
        }
      }
      this.dir_map = dir_map;
    }

    LoadStrategy.prototype.loadAsync = function() {
      var f, file, file_list, head, nm, pkg, script, script_attrs, total, type, val, _i, _j, _len, _len1, _ref, _ref1;
      f = 'Base:E/LoadStragegy.loadAsync';
      head = document.getElementsByTagName('head')[0];
      script_attrs = {
        type: 'text/javascript'
      };
      total = 0;
      _ref = this.appconfs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        _ref1 = E['app$' + pkg].MANIFEST;
        for (type in _ref1) {
          file_list = _ref1[type];
          for (_j = 0, _len1 = file_list.length; _j < _len1; _j++) {
            file = file_list[_j];
            script = document.createElement('script');
            script_attrs.src = this.dir_map[pkg] + pkg + '/' + type + '/' + file + '.js';
            for (nm in script_attrs) {
              val = script_attrs[nm];
              script.setAttribute(nm, val);
            }
            head.appendChild(script);
            total++;
          }
        }
      }
      return total;
    };

    LoadStrategy.prototype.clearCache = function() {
      return this.cache = {};
    };

    LoadStrategy.prototype.preLoaded = function(pkg, type, nm) {
      var _ref, _ref1;
      return (_ref = E['view$' + pkg]) != null ? (_ref1 = _ref[type]) != null ? _ref1[nm] : void 0 : void 0;
    };

    LoadStrategy.prototype.get = function(type, nm) {
      var result;
      result = m.deferred();
      result.resolve(this._d_get(type, nm));
      return result.promise;
    };

    LoadStrategy.prototype._d_get = function(type, nm) {
      var full_nm, _Do_while, _getFile_cb,
        _this = this;
      full_nm = type + '/' + nm + '.html';
      if (this.cache[full_nm] != null) {
        return this.cache[full_nm];
      }
      _Do_while = function(count, cb) {
        var offset, _until_not_false;
        offset = 0;
        _until_not_false = function(result) {
          if (result !== false || offset >= count) {
            return result;
          }
          return (cb(offset++)).then(_until_not_false);
        };
        return _until_not_false(false);
      };
      _getFile_cb = function(offset) {
        var f, p, pkg;
        f = 'BaseDevl:E/LoadStrategy._getFile_cb';
        pkg = _this.reverse_packages[offset];
        if (p = _this.preLoaded(pkg, type, nm)) {
          return p;
        } else {
          return _this.getFile(pkg, full_nm);
        }
      };
      return (_Do_while(this.reverse_packages.length, _getFile_cb)).then(function(results) {
        var ix, parsed, _i, _ref;
        if (results !== false) {
          parsed = E.Extra.ParseFile(full_nm, results);
          for (ix = _i = 0, _ref = parsed.content.length; 0 <= _ref ? _i < _ref : _i > _ref; ix = 0 <= _ref ? ++_i : --_i) {
            parsed.content[ix] = new Function('return ' + parsed.content[ix]);
          }
          if (_this.cache_local_flag) {
            _this.cache[full_nm] = parsed;
          }
        } else {
          _log2('ERROR', 'NO FILE FOUND! ' + nm);
          parsed = false;
        }
        return parsed;
      });
    };

    LoadStrategy.prototype.getFile = function(pkg, nm) {
      var path;
      path = this.dir_map[pkg] + pkg + '/';
      return (m.request({
        background: true,
        method: 'GET',
        url: path + nm,
        data: {
          _: (new Date).valueOf()
        },
        config: function(xhr, options) {
          xhr.setRequestHeader("Content-Type", "text/plain; charset=utf-8");
          return xhr;
        },
        deserialize: function(x) {
          return x;
        }
      })).then(null, function(error) {
        return false;
      });
    };

    LoadStrategy.prototype.layout = function(nm) {
      return this.get('Layout', nm);
    };

    LoadStrategy.prototype.page = function(nm) {
      return this.get('Page', nm);
    };

    LoadStrategy.prototype.part = function(nm) {
      return this.get('Part', nm);
    };

    LoadStrategy.prototype.fist = function(grp_nm) {
      return E['fist$' + grp_nm];
    };

    return LoadStrategy;

  })();

  E.Extra.LoadStrategy$BaseDevl = LoadStrategy;

}).call(this);
