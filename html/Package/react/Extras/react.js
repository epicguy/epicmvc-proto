// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var react, tagexe,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  react = (function() {

    function react(Epic, content_watch) {
      var _this = this;
      this.Epic = Epic;
      this.content_watch = content_watch;
      this.onPopState = __bind(this.onPopState, this);

      this.very_first = true;
      this.was_popped = false;
      this.was_modal = false;
      this.unloadMsgs = {};
      this.baseUrl = window.document.location.pathname;
      this.baseId = "epic-new-page";
      this.modalId = "epic-new-modal";
      this.basePage = '<div id="' + this.baseId + '"></div><div id="' + this.modalId + '"></div>';
      $('body').html(this.basePage);
      setTimeout((function() {
        return _this.onPopState(true);
      }), 0);
      window.onpopstate = this.onPopState;
      $(document).on('hidden.bs.modal', function() {
        return _this.Epic.makeClick(false, 'close_modal', {}, true);
      });
      true;
    }

    react.prototype.UnloadMessage = function(ix, msg) {
      var new_msg, nm, rec;
      if (msg) {
        this.unloadMsgs[ix] = msg;
      } else {
        delete this.unloadMsgs[ix];
      }
      new_msg = (function() {
        var _ref, _results;
        _ref = this.unloadMsgs;
        _results = [];
        for (nm in _ref) {
          rec = _ref[nm];
          _results.push(rec);
        }
        return _results;
      }).call(this);
      new_msg = new_msg.length ? new_msg.join("\n") : null;
      return window.onbeforeunload = function() {
        return new_msg;
      };
    };

    react.prototype.getFormData = function() {
      return $('form').serializeArray();
    };

    react.prototype.onPopState = function(event) {
      var f, req_inx;
      f = 'E:bootstrap.onPopState: ';
      _log2(f, {
        was_popped: this.was_popped,
        very_first: this.very_first,
        special: event === true,
        state: event === true ? 'XX' : event.state
      });
      if (event === true || !event.state) {
        if (this.was_popped || !this.very_first) {
          return;
        }
      }
      this.was_popped = true;
      if (this.very_first) {
        req_inx = this.Epic.request().addLink({
          _a: 'browser_hash',
          hash: location.hash.substr(1)
        });
        this.Epic.click(req_inx);
      } else {
        if (event.state) {
          this.Epic.setModelState(event.state);
        }
        this.Epic.renderSecure();
      }
    };

    react.prototype.render = function(content, history, click_index, modal) {
      var container, start, watch, _i, _len, _ref;
      if (this.was_modal) {
        window.$('.modal-backdrop').remove();
        window.$('body').removeClass('modal-open');
        React.renderComponent(React.DOM.span({}), document.getElementById(this.modalId));
      }
      if (modal) {
        React.renderComponent(this.ModalComponent({
          content: React.DOM.div({}, content)
        }), container = document.getElementById(this.modalId));
      } else {
        _log2('START RENDER', start = new Date().getTime());
        React.renderComponent(React.DOM.div({}, content), container = document.getElementById(this.baseId));
        _log2('END RENDER', new Date().getTime() - start);
      }
      console.log('render......', this.content_watch, container);
      _ref = this.content_watch;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        watch = _ref[_i];
        watch(container);
      }
      this.handleRenderState(history, click_index);
      this.was_modal = modal;
      this.was_popped = false;
      this.very_first = false;
    };

    react.prototype.ModalComponent = new React.createClass({
      componentDidMount: function() {
        return $('.modal', this.getDOMNode()).modal();
      },
      componentWillUnMount: function() {
        return $('.modal', this.getDOMNode()).off('hidden');
      },
      render: function() {
        return this.props.content;
      }
    });

    react.prototype.handleRenderState = function(history, click_index) {
      var displayHash, f, model_state, new_hash, _base, _base1;
      f = 'E:bootstrap.handleRenderState:' + history + ':' + click_index;
      _log2(f, {
        vf: this.very_first,
        wp: this.was_popped
      });
      if (!history) {
        return;
      }
      displayHash = this.very_first ? '' : 'click-' + click_index;
      new_hash = this.Epic.getDomCache();
      if (new_hash === false) {
        new_hash = this.Epic.getExternalUrl();
      }
      if (new_hash !== false) {
        displayHash = new_hash;
      }
      model_state = this.Epic.getModelState();
      if (this.very_first || history === 'replace') {
        if (typeof (_base = window.history).replaceState === "function") {
          _base.replaceState(model_state, displayHash, '#' + displayHash);
        }
      } else if (!this.was_popped && history === true) {
        if (typeof (_base1 = window.history).pushState === "function") {
          _base1.pushState(model_state, displayHash, '#' + displayHash);
        }
        window.document.title = displayHash;
      }
    };

    return react;

  })();

  tagexe = (function() {

    function tagexe(Epic, view_nm) {
      this.Epic = Epic;
      this.view_nm = view_nm;
    }

    tagexe.prototype.getTable = function(nm) {
      return this.Epic.getView().getTable(nm);
    };

    return tagexe;

  })();

  window.EpicMvc.Model.TagExe$react = tagexe;

  window.EpicMvc.Extras.react$react = react;

}).call(this);
