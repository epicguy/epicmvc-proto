// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var ConfExe,
    __hasProp = {}.hasOwnProperty;

  ConfExe = (function() {

    function ConfExe(appConfNode) {
      this.node = $.extend(true, {}, appConfNode);
    }

    ConfExe.prototype.matchResult = function(results) {
      var count, debug_results, found_node, k, node, r_attrs, result_node, v, _i, _len, _ref;
      found_node = false;
      count = ((function() {
        var _results;
        _results = [];
        for (v in results) {
          k = results[v];
          _results.push(k);
        }
        return _results;
      })()).length;
      if ('RESULTS' in this.node) {
        _ref = this.node.RESULTS;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          result_node = new window.EpicMvc.ConfExe(node);
          r_attrs = result_node.getRAttrs();
          if (r_attrs != null) {
            if (result_node.match(results)) {
              found_node = result_node;
              break;
            }
          } else if (count === 0) {
            found_node = result_node;
            break;
          }
        }
      }
      debug_results = ((function() {
        var _results;
        _results = [];
        for (k in results) {
          v = results[k];
          _results.push("" + k + "=" + v);
        }
        return _results;
      })()).join(', ');
      if (found_node === false) {
        if (debug_results.length) {
          EpicMvc.Epic.log2(':matchResult ', found_node, debug_results);
        }
      } else {
        EpicMvc.Epic.log2(':matchResult ', found_node.node, 'p:', typeof found_node.getPAttrs === "function" ? found_node.getPAttrs() : void 0, "{" + debug_results + "}");
      }
      return found_node;
    };

    ConfExe.prototype.match = function(results) {
      var k, r_attrs, v;
      r_attrs = this.getRAttrs();
      for (k in r_attrs) {
        if (!__hasProp.call(r_attrs, k)) continue;
        v = r_attrs[k];
        if (!(k in results) || v !== results[k]) {
          return false;
        }
      }
      return true;
    };

    ConfExe.prototype.getTarget = function() {
      return this.node.call || this.node.macro;
    };

    ConfExe.prototype.hasMacro = function() {
      if (this.node.call != null) {
        return false;
      } else {
        return true;
      }
    };

    ConfExe.prototype.hasResult = function() {
      if (this.node.RESULTS != null) {
        return true;
      } else {
        return false;
      }
    };

    ConfExe.prototype.getPAttrs = function() {
      return this.node.p || null;
    };

    ConfExe.prototype.getRAttrs = function() {
      return this.node.r || null;
    };

    ConfExe.prototype.hasAttr = function(nm) {
      return this.node[nm] || false;
    };

    return ConfExe;

  })();

  window.EpicMvc.ConfExe = ConfExe;

}).call(this);
