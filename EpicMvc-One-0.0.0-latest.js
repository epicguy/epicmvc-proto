/* Copyright 2007-2014 by James Shelby, shelby (at:) dtsol.com; All rights reserved. */
/*Epic*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var Epic;

  Epic = (function() {

    function Epic() {
      this.appNm = 'Epic::appNm=NOT-SET';
      this.oView = null;
      this.getView = function() {
        return this.oView;
      };
      this.oAppConf = null;
      this.appConf = function() {
        return this.oAppConf;
      };
      this.oRequest = null;
      this.request = function() {
        return this.oRequest;
      };
      this.oFistGroupCache = null;
      this.getFistGroupCache = function() {
        return this.oFistGroupCache;
      };
      this.v = {
        appConf: null
      };
      this.oModel = {};
      this.oFist = {};
      this.counter = 0;
      this.guard_run = false;
      this.inClick = false;
      this.wasModal = false;
      this.modelState = {};
      this.content_watch = [];
      this.click_path_changed = {};
      this.options = {
        click_warning_text: 'WARNING: Still processing previous click event (check for javascript errors.)'
      };
    }

    Epic.prototype.log1 = window.Function.prototype.bind.call(window.console.log, window.console);

    Epic.prototype.log2 = window.Function.prototype.bind.call(window.console.log, window.console);

    Epic.prototype.nextCounter = function() {
      return ++this.counter;
    };

    Epic.prototype.getPageflowPath = function() {
      return this.getInstance('Pageflow').getStepPath().join('/');
    };

    Epic.prototype.getInstanceNm = function(view_nm) {
      var inst_nm;
      return inst_nm = this.oAppConf.getObj(view_nm, 'inst');
    };

    Epic.prototype.getInstance = function(view_nm) {
      var cls, inst_nm;
      inst_nm = this.oAppConf.getObj(view_nm, 'inst');
      if (!(inst_nm in this.oModel)) {
        cls = this.oAppConf.getObj(view_nm, 'class');
        if (!(window.EpicMvc.Model[cls] != null)) {
          alert(":Epic.getInstance: (app.js) MODELS: " + view_nm + ": class: " + cls + " [(" + cls + ") not in window.EpicMvc.Model]");
        }
        this.oModel[inst_nm] = new window.EpicMvc.Model[cls](this, view_nm);
        if (inst_nm in this.modelState) {
          this.oModel[inst_nm].restoreState(this.modelState[inst_nm]);
        }
      }
      return this.oModel[inst_nm];
    };

    Epic.prototype.getViewTable = function(view_tbl_nm) {
      var a;
      a = view_tbl_nm.split('/');
      return this.getInstance(a[0]).getTable(a[1]);
    };

    Epic.prototype.getLookaheadClick = function(planned_action) {
      var sp;
      sp = this.getInstance('Pageflow').getStepPath();
      return this.oAppConf.findClick(sp, planned_action);
    };

    Epic.prototype.getDomCache = function() {
      var attr, sp;
      sp = this.getInstance('Pageflow').getStepPath();
      attr = this.oAppConf.getS(sp[0], sp[1], sp[2]).dom_cache;
      if (typeof attr === 'string') {
        return attr;
      }
      return false;
    };

    Epic.prototype.getExternalUrl = function() {
      var a, attr, sp;
      sp = this.getInstance('Pageflow').getStepPath();
      attr = this.oAppConf.getS(sp[0], sp[1], sp[2]).url;
      if (typeof attr !== 'string') {
        return false;
      }
      a = attr.split('/');
      return this.getInstance(a[0]).action(a[1], {})[0].url;
    };

    Epic.prototype.getGroupNm = function() {
      var oPf, t, ts, _ref;
      oPf = this.getInstance('Pageflow');
      _ref = oPf.getTrackPath(), ts = _ref[0], t = _ref[1];
      return this.oAppConf.getGroupNm(ts, t);
    };

    Epic.prototype.getFistInstance = function(flist_nm, grp_nm) {
      var fist_nm, g, inst_nm, view_nm;
      g = grp_nm != null ? grp_nm : this.getGroupNm();
      fist_nm = this.getFistGroupCache().getCanonicalFist(g, flist_nm);
      inst_nm = "" + g + "_" + fist_nm;
      if (!(inst_nm in this.oFist)) {
        view_nm = this.oAppConf.getFistView(g, fist_nm);
        this.oFist[inst_nm] = new window.EpicMvc.Fist(this, g, fist_nm, view_nm, flist_nm);
      }
      return this.oFist[inst_nm];
    };

    Epic.prototype.Execute = function(va, params) {
      var action, oM, view_nm, _ref;
      this.log2(':Execute', va, params);
      _ref = va.split('/'), view_nm = _ref[0], action = _ref[1];
      oM = this.getInstance(view_nm);
      return oM.action(action, params);
    };

    Epic.prototype.run = function(appconfs, artifact_load_strategy_class, render_class, content_watch, options) {
      var loader, renderer;
      if (this.guard_run) {
        return true;
      }
      this.guard_run = true;
      $.extend(this.options, options);
      loader = new window.EpicMvc.Extras[artifact_load_strategy_class](this);
      renderer = new window.EpicMvc.Extras[render_class](this, content_watch);
      return this.init(appconfs, loader, renderer, content_watch);
    };

    Epic.prototype.init = function(appconfs, loader, renderer, content_watch) {
      var flow;
      this.appconfs = appconfs;
      this.loader = loader;
      this.renderer = renderer;
      this.content_watch = content_watch;
      this.oRequest = new window.EpicMvc.Request(this);
      this.oFistGroupCache = new window.EpicMvc.FistGroupCache(this, this.loader);
      this.oAppConf = new window.EpicMvc.AppConf(this, this.loader);
      this.oView = new window.EpicMvc.ViewExe(this, this.loader, this.content_watch);
      flow = this.oAppConf.loginF();
      (this.getInstance('Pageflow')).goTo(flow);
      return true;
    };

    Epic.prototype.isSecurityError = function(e) {
      var special, _ref;
      special = 'Security';
      if (((e != null ? (_ref = e.message) != null ? _ref.substring : void 0 : void 0) != null) && (e.message.substring(0, special.length)) === special) {
        return true;
      }
      return false;
    };

    Epic.prototype.getFormData = function() {
      return this.renderer.getFormData();
    };

    Epic.prototype.renderStrategy = function(content, history, click_index, modal) {
      if (content !== false) {
        this.renderer.render(content, history, click_index, modal);
      } else {
        this.renderer.handleRenderState(history, click_index);
      }
      return null;
    };

    Epic.prototype.render = function(template, sp, avoid_form_reset) {
      var history, k, modal, o, page, stuff, _ref;
      page = this.oAppConf.getPage(sp);
      modal = this.oAppConf.findAttr(sp[0], sp[1], sp[2], 'modal');
      if (modal) {
        template = this.oAppConf.mapModalTemplate(modal);
      }
      history = (function() {
        switch ("" + (this.wasModal ? 1 : 0) + ":" + (modal ? 1 : 0)) {
          case '0:0':
            return true;
          case '1:0':
            return 'replace';
          case '0:1':
            return false;
          case '1:1':
            return false;
          default:
            return alert('my code is hosed');
        }
      }).call(this);
      this.oView.init(template, page);
      try {
        stuff = this.oView.run();
      } catch (e) {
        this.log2(':render error', e, e.stack);
        if (this.isSecurityError(e)) {
          return e;
        } else {
          this.inClick = false;
          throw e;
        }
      }
      this.renderStrategy(stuff, history, this.inClick, modal);
      if (avoid_form_reset !== true) {
        _ref = this.oFist;
        for (k in _ref) {
          o = _ref[k];
          if (typeof o.eventInitializePage === "function") {
            o.eventInitializePage();
          }
        }
      }
      this.wasModal = modal;
      return true;
    };

    Epic.prototype.login = function() {
      var f, k, o, _ref, _results;
      f = ':login';
      this.log2(f, this.oModel);
      _ref = this.oModel;
      _results = [];
      for (k in _ref) {
        o = _ref[k];
        if (typeof o.eventLogin === "function" ? o.eventLogin() : void 0) {
          continue;
        }
      }
      return _results;
    };

    Epic.prototype.logout = function(click_event, click_data) {
      var k, o, _ref,
        _this = this;
      if (this.inClick !== false) {
        setTimeout((function() {
          return _this.logout(click_event, click_data);
        }), 100);
        return;
      }
      if (click_event) {
        this.makeClick(false, click_event, click_data, true);
      }
      _ref = this.oModel;
      for (k in _ref) {
        o = _ref[k];
        if (!(typeof o.eventLogout === "function" ? o.eventLogout() : void 0)) {
          continue;
        }
        delete this.modelState[k];
        delete this.oModel[k];
      }
      return this.oFist = {};
    };

    Epic.prototype.makeClick = function(form_flag, action, params, render_flag) {
      var click_index, f, p_action;
      f = ':makeClick:' + action;
      this.log2(f, 'form?' + (form_flag ? 'Y' : 'N'), 'render' + (render_flag ? 'Y' : 'N'), params);
      p_action = {};
      p_action[form_flag ? '_b' : '_a'] = action;
      click_index = this.oRequest.addLink($.extend(p_action, params));
      this.click(click_index, !render_flag);
      return click_index;
    };

    Epic.prototype.click = function(click_index, no_render) {
      var action_attrs, after_sp, before_sp, click_result, f, first_node, k, o, oC, oPf, planned_action, ss, _ref, _ref1, _ref2, _ref3;
      f = ':click';
      this.log2(f, click_index);
      if ((_ref = window.event) != null) {
        _ref.returnValue = false;
      }
      if (this.inClick !== false && this.options.click_warning_text !== false) {
        alert(this.options.click_warning_text);
      }
      oPf = this.getInstance('Pageflow');
      before_sp = oPf.getStepPath();
      if (click_index) {
        this.oRequest.start(click_index);
      }
      if (click_index && no_render !== true) {
        planned_action = this.oRequest.haveAction();
        if (planned_action) {
          first_node = this.oAppConf.findClick(before_sp, planned_action);
        }
        if (first_node && (first_node.hasAttr('dynamic')) === true) {
          no_render = true;
        }
        this.log2(f, 'render?', {
          no_render: no_render,
          sp: before_sp,
          action: planned_action,
          node: first_node
        });
      }
      if (!no_render) {
        this.inClick = click_index;
      }
      _ref1 = this.oFist;
      for (k in _ref1) {
        o = _ref1[k];
        if (typeof o.eventNewRequest === "function") {
          o.eventNewRequest(this.click_path_changed);
        }
      }
      _ref2 = this.oModel;
      for (k in _ref2) {
        o = _ref2[k];
        if (typeof o.eventNewRequest === "function") {
          o.eventNewRequest(this.click_path_changed);
        }
      }
      oC = new window.EpicMvc.ClickAction(this);
      click_result = oC.click();
      after_sp = oPf.getStepPath();
      oPf.setIssues(click_result[0]);
      oPf.setMessages(click_result[1]);
      action_attrs = click_result[2];
      this.click_path_changed.flow = before_sp[0] !== after_sp[0];
      this.click_path_changed.track = this.click_path_changed.flow || before_sp[1] !== after_sp[1];
      this.click_path_changed.step = this.click_path_changed.track || before_sp[2] !== after_sp[2];
      this.modelState = {};
      _ref3 = this.oModel;
      for (k in _ref3) {
        o = _ref3[k];
        if ((o.saveState != null) && (ss = o.saveState())) {
          this.modelState[k] = ss;
        }
      }
      if (no_render !== true || this.click_path_changed.step) {
        this.renderSecure();
      } else {
        this.renderStrategy(false, 'replace', click_index);
      }
      return this.inClick = false;
    };

    Epic.prototype.renderSecure = function(avoid_form_reset) {
      var f, oC, oPf, render_attempts, render_result, sp, template;
      f = ':renderSecure';
      this.log2(f, 'start, avoid_form_reset', avoid_form_reset);
      oC = new window.EpicMvc.ClickAction(this);
      oPf = this.getInstance('Pageflow');
      render_result = false;
      render_attempts = 3;
      while (render_result !== true && --render_attempts > 0) {
        this.log2(f, (render_result === true ? 'T' : render_result === false ? 'F' : render_result), render_attempts);
        sp = oPf.getStepPath();
        if (render_result !== false) {
          oC.click(render_result.message, sp);
        }
        sp = oPf.getStepPath();
        template = this.oAppConf.findTemplate(sp);
        render_result = this.render(template, sp, avoid_form_reset);
      }
      return this.oView.doDefer();
    };

    Epic.prototype.getModelState = function() {
      return this.modelState;
    };

    Epic.prototype.setModelState = function(s) {
      var inst_nm, _base, _results;
      if (s != null) {
        this.modelState = s;
      }
      _results = [];
      for (inst_nm in this.oModel) {
        _results.push(typeof (_base = this.oModel[inst_nm]).restoreState === "function" ? _base.restoreState(this.modelState[inst_nm]) : void 0);
      }
      return _results;
    };

    return Epic;

  })();

  window.EpicMvc = {
    Extras: {},
    Model: {},
    Epic: new Epic()
  };

}).call(this);

/*util*/// Generated by CoffeeScript 1.4.0
(function() {
  var escape_html;

  escape_html = function(str) {
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
  };

  if (typeof window !== "undefined" && window !== null) {
    window.EpicMvc.escape_html = escape_html;
  } else {
    module.exports = function(w) {
      return w.EpicMvc.escape_html = escape_html;
    };
  }

}).call(this);

/*ModelJS*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var ModelJS,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ModelJS = (function() {

    function ModelJS(Epic, view_nm, ss) {
      this.Epic = Epic;
      this.view_nm = view_nm;
      this._ModelJS = {
        ss: ss || false
      };
      this.restoreState(false);
    }

    ModelJS.prototype.getTable = function(tbl_nm) {
      this.loadTableIf(tbl_nm);
      return this.Table[tbl_nm];
    };

    ModelJS.prototype.loadTableIf = function(tbl_nm) {
      if (!(tbl_nm in this.Table)) {
        return this.loadTable(tbl_nm);
      }
    };

    ModelJS.prototype.restoreState = function(copy_of_state) {
      var key;
      if (this._ModelJS.ss != null) {
        for (key in this._ModelJS.ss) {
          delete this[key];
        }
      }
      if (this._ModelJS.ss != null) {
        $.extend(true, this, this._ModelJS.ss);
      }
      if (copy_of_state) {
        $.extend(true, this, copy_of_state);
      }
      return this.Table = {};
    };

    ModelJS.prototype.saveState = function() {
      var nm, ss, st;
      ss = this._ModelJS.ss;
      if (!ss) {
        return false;
      }
      st = {};
      for (nm in ss) {
        if (this[nm] !== ss[nm]) {
          st[nm] = this[nm];
        }
      }
      if ($.isEmptyObject(st)) {
        return false;
      }
      return $.extend(true, {}, st);
    };

    ModelJS.prototype.invalidateTables = function(tbl_nms, not_tbl_names) {
      var f, nm, _i, _len;
      f = ':ModelJs.invalidateTables';
      if (not_tbl_names == null) {
        not_tbl_names = [];
      }
      if (tbl_nms === true) {
        tbl_nms = (function() {
          var _results;
          _results = [];
          for (nm in this.Table) {
            if (!(__indexOf.call(not_tbl_names, nm) >= 0)) {
              _results.push(nm);
            }
          }
          return _results;
        }).call(this);
      }
      for (_i = 0, _len = tbl_nms.length; _i < _len; _i++) {
        nm = tbl_nms[_i];
        delete this.Table[nm];
      }
      return this.Epic.oView.invalidateTables(this.view_nm, tbl_nms);
    };

    return ModelJS;

  })();

  window.EpicMvc.ModelJS = ModelJS;

}).call(this);

/*Issue*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var Issue;

  Issue = (function() {

    function Issue(Epic, t_view, t_action) {
      this.Epic = Epic;
      this.t_view = t_view;
      this.t_action = t_action;
      this.issue_list = [];
    }

    Issue.Make = function(epic, view, type, value_list) {
      var issue;
      issue = new window.EpicMvc.Issue(epic, view);
      issue.add(type, value_list);
      return issue;
    };

    Issue.prototype.add = function(type, msgs) {
      var f;
      f = ':Issue.add:' + this.t_view + ':' + this.t_action;
      this.Epic.log2(f, 'params:type/msgs', type, msgs);
      switch (typeof msgs) {
        case 'undefined':
          msgs = [];
          break;
        case 'string':
          msgs = [msgs];
      }
      switch (type) {
        case 'TEXT':
          return this.issue_list.push({
            token: 'text',
            more: msgs,
            t_view: this.t_view,
            t_action: this.t_action
          });
        default:
          if (/^[a-zA-Z0-9_]+$/.test(type)) {
            return this.issue_list.push({
              token: type,
              more: msgs,
              t_view: this.t_view,
              t_action: this.t_action
            });
          } else {
            alert(f + ' - Unknown "type" for Issue.add ' + type);
            return this.issue_list.push({
              token: 'unknown',
              more: [type],
              t_view: this.t_view,
              t_action: this.t_action
            });
          }
      }
    };

    Issue.prototype.call = function(function_call_returning_issue_or_null) {
      if (function_call_returning_issue_or_null) {
        this.addObj(function_call_returning_issue_or_null);
      }
    };

    Issue.prototype.addObj = function(issue_obj) {
      var f, issue, new_issue, _i, _len, _ref, _ref1, _ref2;
      f = ':Issue.addObj:' + this.t_view + '#' + this.t_action;
      if (typeof issue_obj !== 'object' || !('issue_list' in issue_obj)) {
        return;
      }
      _ref = issue_obj.issue_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        issue = _ref[_i];
        new_issue = $.extend(true, {}, issue);
        if ((_ref1 = new_issue.t_view) == null) {
          new_issue.t_view = this.t_view;
        }
        if ((_ref2 = new_issue.t_action) == null) {
          new_issue.t_action = this.t_action;
        }
        this.issue_list.push(new_issue);
      }
    };

    Issue.prototype.count = function() {
      return this.issue_list.length;
    };

    Issue.prototype.asTable = function(map) {
      var final, issue, _i, _len, _ref;
      final = [];
      _ref = this.issue_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        issue = _ref[_i];
        final.push({
          token: issue.token,
          title: "" + issue.t_view + "#" + issue.t_action + "#" + issue.token + "#" + (issue.more.join(',')),
          issue: this.map(map, issue.t_view, issue.t_action, issue.token, issue.more)
        });
      }
      return final;
    };

    Issue.prototype.map = function(map, t_view, t_action, token, more) {
      var map_list, spec, sub_map, _i, _j, _len, _len1, _ref;
      if (typeof map !== 'object') {
        return "" + t_view + "#" + t_action + "#" + token + "#" + (more.join(','));
      }
      map_list = [];
      if (t_view in map) {
        if (t_action in map[t_view]) {
          map_list.push(map[t_view][t_action]);
        }
        if ('default' in map[t_view]) {
          map_list.push(map[t_view]["default"]);
        }
      }
      if ('default' in map) {
        if (t_action in map["default"]) {
          map_list.push(map["default"][t_action]);
        }
        if ('default' in map["default"]) {
          map_list.push(map["default"]["default"]);
        }
      }
      for (_i = 0, _len = map_list.length; _i < _len; _i++) {
        sub_map = map_list[_i];
        _ref = sub_map || [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          spec = _ref[_j];
          if (token.match(spec[0])) {
            return this.doMap(token, spec[1], more, token);
          }
        }
      }
      return "" + t_view + "#" + t_action + "#" + token + "#" + (more.join(','));
    };

    Issue.prototype.doMap = function(token, pattern, vals) {
      var new_str;
      new_str = pattern.replace(/%([0-9])(?::([0-9]))?%/g, function(str, i1, i2, more) {
        if (i1 === '0') {
          return token;
        }
        if (i2) {
          return vals[i1 - 1] || vals[i2 - 1] || '';
        } else {
          return vals[i1 - 1] || '';
        }
      });
      return new_str;
    };

    return Issue;

  })();

  window.EpicMvc.Issue = Issue;

}).call(this);

/*Request*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var Request;

  Request = (function() {

    function Request(Epic) {
      this.Epic = Epic;
      this.click_link = ['zero'];
      this.link = [];
    }

    Request.prototype.start = function(link_index) {
      var f, form_data, ix, name, sp, v, _base, _i, _len, _ref, _ref1;
      f = ':Request.start:' + link_index;
      this.link = this.click_link[link_index];
      if (this.link._b != null) {
        form_data = this.Epic.getFormData();
        for (_i = 0, _len = form_data.length; _i < _len; _i++) {
          v = form_data[_i];
          _ref = v.name.split('__'), name = _ref[0], ix = _ref[1];
          if (ix) {
            if ((_ref1 = (_base = this.link)[name]) == null) {
              _base[name] = {};
            }
            this.link[name][ix] = v.value;
          } else {
            this.link[v.name] = v.value;
          }
        }
        this.link._a = this.link._b;
      }
      this.Epic.log2(f, '@link', this.link);
      if ((sp = this.link.temp_page_flow) != null) {
        return this.Epic.getInstance('Pageflow').goTo(sp[0], sp[1], sp[2]);
      }
    };

    Request.prototype.addLink = function(link) {
      var r;
      r = this.click_link.length;
      link.temp_page_flow = this.Epic.getInstance('Pageflow').getStepPath();
      this.click_link.push(link);
      return r;
    };

    Request.prototype.haveAction = function() {
      var _ref;
      return (_ref = this.link._a) != null ? _ref : false;
    };

    Request.prototype.getAction = function() {
      return this.link._a;
    };

    Request.prototype.getValues = function() {
      return this.link;
    };

    return Request;

  })();

  window.EpicMvc.Request = Request;

}).call(this);

/*AppConf*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var AppConf,
    __hasProp = {}.hasOwnProperty;

  AppConf = (function() {

    function AppConf(Epic, loadStrategy) {
      var _base, _base1, _base2, _ref, _ref1, _ref2;
      this.Epic = Epic;
      this.loadStrategy = loadStrategy;
      this.config = this.loadStrategy.getCombinedAppConfs();
      if ((_ref = (_base = this.config).CLICKS) == null) {
        _base.CLICKS = {};
      }
      if ((_ref1 = (_base1 = this.config).MACROS) == null) {
        _base1.MACROS = {};
      }
      if ((_ref2 = (_base2 = this.config.OPTIONS).frame) == null) {
        _base2.frame = {};
      }
      this.config.FORMS = false;
    }

    AppConf.prototype.getObj = function(view_name, attribute) {
      if (!(view_name in this.config.MODELS)) {
        throw new Error("No (" + view_name + ") in 'MODELS:' in app.js");
      }
      if (!(attribute in this.config.MODELS[view_name])) {
        throw new Error("No (" + atrribute + ") in 'MODELS:" + view_name + "' in app.js");
      }
      return this.config.MODELS[view_name][attribute];
    };

    AppConf.prototype.loadFormsIf = function() {
      var form_nm, group, node, view_nm, _base, _i, _len, _ref, _ref1, _ref2;
      if (this.config.FORMS === false) {
        this.config.FORMS = {};
        _ref = this.config.MODELS;
        for (view_nm in _ref) {
          if (!__hasProp.call(_ref, view_nm)) continue;
          node = _ref[view_nm];
          if (!('forms' in node)) {
            continue;
          }
          group = node.group;
          if (group == null) {
            group = this.config.OPTIONS.settings.group;
          }
          if ((_ref1 = (_base = this.config.FORMS)[group]) == null) {
            _base[group] = {};
          }
          _ref2 = node.forms.split(',');
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            form_nm = _ref2[_i];
            this.config.FORMS[group][form_nm] = view_nm;
          }
        }
      }
      return this.config.FORMS;
    };

    AppConf.prototype.getFistView = function(group_nm, fist_nm) {
      this.loadFormsIf();
      return this.config.FORMS[group_nm][fist_nm];
    };

    AppConf.prototype.findNode = function(f, t, s, cat, nm) {
      var ncat, nf, ns, nt, _ref, _ref1, _ref2, _ref3, _ref4;
      nf = this.config.FLOWS[f];
      if (nf) {
        if (t && ((nt = (_ref = nf.TRACKS) != null ? _ref[t] : void 0) != null)) {
          if (s && ((ns = (_ref1 = nt.STEPS) != null ? _ref1[s] : void 0) != null)) {
            if ((ncat = (_ref2 = ns[cat]) != null ? _ref2[nm] : void 0) != null) {
              return ncat;
            }
          }
          if ((ncat = (_ref3 = nt[cat]) != null ? _ref3[nm] : void 0) != null) {
            return ncat;
          }
        }
        if ((ncat = (_ref4 = nf[cat]) != null ? _ref4[nm] : void 0) != null) {
          return ncat;
        }
      }
      return false;
    };

    AppConf.prototype.findAttr = function(f, t, s, attr) {
      var nattr, nf, ns, nt, _ref, _ref1;
      nf = this.config.FLOWS[f];
      if (nf) {
        if (t && ((nt = (_ref = nf.TRACKS) != null ? _ref[t] : void 0) != null)) {
          if (s && ((ns = (_ref1 = nt.STEPS) != null ? _ref1[s] : void 0) != null)) {
            if ((nattr = ns[attr]) != null) {
              return nattr;
            }
          }
          if ((nattr = nt[attr]) != null) {
            return nattr;
          }
        }
        if ((nattr = nf[attr]) != null) {
          return nattr;
        }
      }
      return false;
    };

    AppConf.prototype.getF = function(f) {
      return this.config.FLOWS[f];
    };

    AppConf.prototype.getT = function(f, t) {
      return this.config.FLOWS[f].TRACKS[t];
    };

    AppConf.prototype.getS = function(f, t, s) {
      return this.config.FLOWS[f].TRACKS[t].STEPS[s];
    };

    AppConf.prototype.startT = function(f) {
      return this.getF(f).start;
    };

    AppConf.prototype.startS = function(f, t) {
      return this.getT(f, t).start;
    };

    AppConf.prototype.getPage = function(p) {
      return this.getS(p[0], p[1], p[2]).page;
    };

    AppConf.prototype.getMacro = function(nm) {
      return this.config.MACROS[nm];
    };

    AppConf.prototype.getMacroNode = function(nm) {
      var node;
      node = this.getMacro(nm);
      if (node) {
        return new window.EpicMvc.ConfExe(node);
      }
      return false;
    };

    AppConf.prototype.loginF = function() {
      return this.config.OPTIONS.login.flow;
    };

    AppConf.prototype.findClick = function(p, a) {
      var n, node;
      node = this.findNode(p[0], p[1], p[2], 'CLICKS', a);
      if (node === false && ((n = this.config.CLICKS[a]) != null)) {
        node = n;
      }
      if (node) {
        return new window.EpicMvc.ConfExe(node);
      }
      return null;
    };

    AppConf.prototype.mapModalTemplate = function(modal) {
      return this.config.OPTIONS.template[modal] || modal;
    };

    AppConf.prototype.findTemplate = function(f, t, s) {
      var template;
      if (typeof t === 'undefined') {
        s = f[2];
        t = f[1];
        f = f[0];
      }
      return template = (this.findAttr(f, t, s, 'template')) || this.config.OPTIONS.template["default"];
    };

    AppConf.prototype.getShowIssues = function(f, t) {
      var group;
      return group = (this.findAttr(f, t, false, 'show_issues')) || this.config.OPTIONS.settings.show_issues;
    };

    AppConf.prototype.getGroupNm = function(f, t) {
      var group;
      return group = (this.findAttr(f, t, false, 'group')) || this.config.OPTIONS.settings.group;
    };

    AppConf.prototype.getVars = function(f, t, s) {
      var f2, k, v, vars;
      f2 = ':AppConf.getVars';
      vars = $.extend({}, this.config.FLOWS[f].v, this.config.FLOWS[f].TRACKS[t].v, this.config.FLOWS[f].TRACKS[t].STEPS[s].v);
      this.Epic.log2(f2, ((function() {
        var _results;
        _results = [];
        for (k in vars) {
          if (!__hasProp.call(vars, k)) continue;
          v = vars[k];
          _results.push("" + k + ":" + v);
        }
        return _results;
      })()).join(', '));
      return vars;
    };

    AppConf.prototype.getFrames = function() {
      return this.config.OPTIONS.frame;
    };

    return AppConf;

  })();

  window.EpicMvc.AppConf = AppConf;

}).call(this);

/*ClickAction*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var ClickAction,
    __hasProp = {}.hasOwnProperty;

  ClickAction = (function() {

    function ClickAction(Epic) {
      this.Epic = Epic;
    }

    ClickAction.prototype.click = function(action_token, path) {
      var click_node, f, issue, limit, message, r, rIssues, rMessages, rNode, rResults;
      f = ":ClickAction.click(" + action_token + ")";
      issue = new window.EpicMvc.Issue(this.Epic, 'ClickAction');
      message = new window.EpicMvc.Issue(this.Epic, 'ClickAction');
      if (!(action_token != null)) {
        if (!(action_token = this.Epic.request().haveAction())) {
          return [issue, message];
        }
        path = this.Epic.getInstance('Pageflow').getStepPath();
      }
      click_node = this.Epic.appConf().findClick(path, action_token);
      if (!(click_node != null)) {
        this.Epic.log1(f, 'no match', {
          path: path,
          action_token: action_token
        });
        return [issue, message];
      }
      r = this.doAction(click_node, {});
      rNode = r[0], rResults = r[1], rIssues = r[2], rMessages = r[3];
      issue.addObj(rIssues);
      message.addObj(rMessages);
      limit = 5;
      while (rNode) {
        if (--limit < 0) {
          throw 'Max recurse limit ClickAction.click';
        }
        r = this.doAction(rNode, rResults);
        rNode = r[0], rResults = r[1], rIssues = r[2], rMessages = r[3];
        issue.addObj(rIssues);
        message.addObj(rMessages);
      }
      return [issue, message];
    };

    ClickAction.prototype.doAction = function(node, prev_action_result) {
      var a_params_list, alias_params, class_method, dummy, f, found_result_tag, k, look_for_macro_result_tags, macro_node, path, r, rIssues, rMessages, rResults, r_vals, v;
      f = ":ClickAction.doAction(" + (node.getTarget()) + ")";
      r_vals = this.Epic.request().getValues();
      a_params_list = this.pullValueUsingAttr(node, r_vals, prev_action_result);
      class_method = node.getTarget();
      look_for_macro_result_tags = false;
      if (node.hasMacro()) {
        macro_node = this.Epic.appConf().getMacroNode(class_method);
        alias_params = this.pullValueUsingAttr(macro_node, r_vals, prev_action_result);
        class_method = macro_node.getTarget();
        if (macro_node.hasResult()) {
          look_for_macro_result_tags = true;
        }
        for (k in alias_params) {
          if (!__hasProp.call(alias_params, k)) continue;
          v = alias_params[k];
          a_params_list[k] = v;
        }
        if (path = macro_node.hasAttr('go')) {
          dummy = this.Epic.Execute('Pageflow/path', {
            path: path
          });
        }
      }
      r = class_method ? this.Epic.Execute(class_method, a_params_list) : [{}, {}, {}];
      if (path = node.hasAttr('go')) {
        dummy = this.Epic.Execute('Pageflow/path', {
          path: path
        });
      }
      rResults = r[0], rIssues = r[1], rMessages = r[2];
      found_result_tag = (look_for_macro_result_tags ? macro_node : node).matchResult(rResults);
      return [found_result_tag, rResults, rIssues, rMessages];
    };

    ClickAction.prototype.pullValueUsingAttr = function(node, r_vals, prev_action_result) {
      var a_params_list, attr, f, fields_list, form_name, nm, oF;
      f = ':ClickAction.pullValueUsingAttr';
      a_params_list = $.extend({}, node.getPAttrs());
      if (form_name = node.hasAttr('use_form')) {
        oF = this.Epic.getFistInstance(form_name);
        fields_list = (function() {
          var _results;
          _results = [];
          for (nm in oF.getHtmlFieldValues()) {
            _results.push(nm);
          }
          return _results;
        })();
        $.extend(a_params_list, this.pullValues(r_vals, fields_list, 'use_form'));
      }
      if (attr = node.hasAttr('use_fields')) {
        $.extend(a_params_list, this.pullValues(r_vals, attr.split(','), 'use_fields'));
      }
      if (attr = node.hasAttr('use_result')) {
        $.extend(a_params_list, this.pullValues(prev_action_result, attr.split(','), 'use_result'));
      }
      return a_params_list;
    };

    ClickAction.prototype.pullValues = function(source, value_list, attr_nm) {
      var alias, f, nm, nm_alias, out_list, _i, _len, _ref;
      f = ':ClickAction.pullValues';
      out_list = {};
      for (_i = 0, _len = value_list.length; _i < _len; _i++) {
        nm_alias = value_list[_i];
        switch (attr_nm) {
          case 'use_fields':
          case 'use_result':
            _ref = nm_alias.split(':'), nm = _ref[0], alias = _ref[1];
            if (alias == null) {
              alias = nm;
            }
            break;
          default:
            nm = alias = nm_alias;
        }
        out_list[alias] = source[nm];
      }
      return out_list;
    };

    return ClickAction;

  })();

  window.EpicMvc.ClickAction = ClickAction;

}).call(this);

/*ConfExe*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var ConfExe,
    __hasProp = {}.hasOwnProperty;

  ConfExe = (function() {

    function ConfExe(appConfNode) {
      this.node = $.extend(true, {}, appConfNode);
    }

    ConfExe.prototype.matchResult = function(results) {
      var count, debug_results, found_node, k, node, r_attrs, result_node, v, _i, _len, _ref;
      found_node = false;
      count = ((function() {
        var _results;
        _results = [];
        for (v in results) {
          k = results[v];
          _results.push(k);
        }
        return _results;
      })()).length;
      if ('RESULTS' in this.node) {
        _ref = this.node.RESULTS;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          result_node = new window.EpicMvc.ConfExe(node);
          r_attrs = result_node.getRAttrs();
          if (r_attrs != null) {
            if (result_node.match(results)) {
              found_node = result_node;
              break;
            }
          } else if (count === 0) {
            found_node = result_node;
            break;
          }
        }
      }
      debug_results = ((function() {
        var _results;
        _results = [];
        for (k in results) {
          v = results[k];
          _results.push("" + k + "=" + v);
        }
        return _results;
      })()).join(', ');
      if (found_node === false) {
        if (debug_results.length) {
          EpicMvc.Epic.log2(':matchResult ', found_node, debug_results);
        }
      } else {
        EpicMvc.Epic.log2(':matchResult ', found_node.node, 'p:', typeof found_node.getPAttrs === "function" ? found_node.getPAttrs() : void 0, "{" + debug_results + "}");
      }
      return found_node;
    };

    ConfExe.prototype.match = function(results) {
      var k, r_attrs, v;
      r_attrs = this.getRAttrs();
      for (k in r_attrs) {
        if (!__hasProp.call(r_attrs, k)) continue;
        v = r_attrs[k];
        if (!(k in results) || v !== results[k]) {
          return false;
        }
      }
      return true;
    };

    ConfExe.prototype.getTarget = function() {
      return this.node.call || this.node.macro;
    };

    ConfExe.prototype.hasMacro = function() {
      if (this.node.macro != null) {
        return true;
      } else {
        return false;
      }
    };

    ConfExe.prototype.hasResult = function() {
      if (this.node.RESULTS != null) {
        return true;
      } else {
        return false;
      }
    };

    ConfExe.prototype.getPAttrs = function() {
      return this.node.p || null;
    };

    ConfExe.prototype.getRAttrs = function() {
      return this.node.r || null;
    };

    ConfExe.prototype.hasAttr = function(nm) {
      return this.node[nm] || false;
    };

    return ConfExe;

  })();

  window.EpicMvc.ConfExe = ConfExe;

}).call(this);

/*ViewExe*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var ViewExe;

  ViewExe = (function() {

    function ViewExe(Epic, loadStrategy, content_watch) {
      var frames, ix, nm;
      this.Epic = Epic;
      this.loadStrategy = loadStrategy;
      this.content_watch = content_watch;
      this.dynamicParts = [];
      frames = this.Epic.oAppConf.getFrames();
      this.frames = (function() {
        var _i, _len, _ref, _results;
        _ref = ((function() {
          var _results1;
          _results1 = [];
          for (nm in frames) {
            _results1.push(nm);
          }
          return _results1;
        })()).sort();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ix = _ref[_i];
          _results.push(frames[ix]);
        }
        return _results;
      })();
      this.Epic.log1(':ViewExec', this.frames);
      this.dynamicMap = {};
    }

    ViewExe.prototype.init = function(template, page) {
      var nm, v, _i, _len, _ref;
      this.template = template;
      this.page = page;
      this.Epic.log2(':ViewExe.init T:' + this.template, 'P:' + page, ((function() {
        var _i, _len, _ref, _results;
        _ref = (this.Epic.getInstance('Pageflow')).getStepPath();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push(v);
        }
        return _results;
      }).call(this)).join('/'));
      this.instance = this.Epic.nextCounter();
      this.oTemplate = this.loadStrategy.template(this.template);
      this.oPage = this.loadStrategy.page(this.page);
      this.pageStack = [];
      _ref = this.frames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nm = _ref[_i];
        this.pageStack.push(this.loadStrategy.template(nm));
      }
      this.pageStack.push(this.oTemplate, this.oPage);
      this.stack = [];
      this.TagExe = this.Epic.getInstance('Tag');
      this.TagExe.resetForNextRequest();
      this.current = null;
      this.dynamicParts = [
        {
          defer: [],
          parent: 0
        }
      ];
      this.dynamicMap = {};
      return this.activeDynamicPartIx = 0;
    };

    ViewExe.prototype.part = function(ix) {
      return this.dynamicParts[ix || this.activeDynamicPartIx];
    };

    ViewExe.prototype.doDynamicPart = function(ix, instance) {
      var f, old_dynamic_ix, part, watch, _i, _len, _ref;
      f = ':ViewExe.doDynamicPart:' + ix;
      if (instance !== this.instance) {
        return;
      }
      part = this.part(ix);
      if (part.pending === false) {
        return;
      }
      part.stamp = new Date().getTime();
      part.pending = false;
      part.defer = [];
      $('#' + part.id).html('Changing...');
      old_dynamic_ix = this.activeDynamicPartIx;
      this.activeDynamicPartIx = ix;
      this.TagExe.resetForNextRequest(part.state);
      $('#' + part.id).html(this.run(this.loadStrategy.part(part.name)));
      this.doDeferPart(part);
      _ref = this.content_watch;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        watch = _ref[_i];
        watch('#' + part.id);
      }
      return this.activeDynamicPartIx = old_dynamic_ix;
    };

    ViewExe.prototype.pushDefer = function(code) {
      return this.part().defer.push(code);
    };

    ViewExe.prototype.doDeferPart = function(part) {
      var v, _i, _len, _ref;
      _ref = part.defer;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        eval(v.code);
      }
      return true;
    };

    ViewExe.prototype.doDefer = function() {
      var part, _i, _len, _ref;
      _ref = this.dynamicParts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        this.doDeferPart(part);
      }
      return true;
    };

    ViewExe.prototype.haveTableRefrence = function(view_nm, tbl_nm) {
      var nm, _base, _ref;
      if (this.activeDynamicPartIx === 0) {
        return;
      }
      nm = (this.Epic.getInstanceNm(view_nm)) + ':' + tbl_nm;
      if ((_ref = (_base = this.dynamicMap)[nm]) == null) {
        _base[nm] = [];
      }
      return this.dynamicMap[nm].push(this.activeDynamicPartIx);
    };

    ViewExe.prototype.addDynamicPart = function(info) {
      var f;
      f = ':ViewExe.addDynamicPart';
      if (this.activeDynamicPartIx !== 0) {
        alert('Nested dynamic parts not really supported just now.');
      }
      this.dynamicParts.push({
        name: info.name,
        id: info.id,
        delay: info.delay,
        state: info.state,
        defer: [],
        parent: this.activeDynamicPartIx,
        pending: false,
        stamp: new Date().getTime()
      });
      return this.activeDynamicPartIx = this.dynamicParts.length - 1;
    };

    ViewExe.prototype.invalidateTables = function(view_nm, tbl_nms) {
      var delay, f, inst, instance, ix, ix_list, nm, now, part, sched, sofar, tbl_nm, _i, _j, _len, _len1, _ref,
        _this = this;
      f = ':ViewExe.invalidateTables';
      sched = [];
      if (this.dynamicParts.length === 1) {
        return 'no dynamic parts';
      }
      if (this.Epic.inClick) {
        return 'in click';
      }
      ix_list = {};
      inst = this.Epic.getInstanceNm(view_nm);
      for (_i = 0, _len = tbl_nms.length; _i < _len; _i++) {
        tbl_nm = tbl_nms[_i];
        nm = inst + ':' + tbl_nm;
        if (nm in this.dynamicMap) {
          _ref = this.dynamicMap[nm];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            ix = _ref[_j];
            ix_list[ix] = true;
          }
        }
      }
      now = new Date().getTime();
      for (ix in ix_list) {
        ix = Number(ix);
        part = this.part(ix);
        if (part.pending === false) {
          sofar = now - part.stamp;
          delay = sofar > part.delay ? 0 : part.delay - sofar;
          instance = this.instance;
          (function(ix, instance) {
            part.pending = window.setTimeout((function() {
              return _this.doDynamicPart(ix, instance);
            }), delay);
            return sched.push(ix);
          })(ix, instance);
        }
      }
      return sched;
    };

    ViewExe.prototype.run = function(current, dynoInfo) {
      var out, _ref;
      if (current == null) {
        current = this.pageStack.shift(0);
      }
      this.stack.push([this.current, this.activeDynamicPartIx]);
      this.current = current;
      if (dynoInfo) {
        this.addDynamicPart(dynoInfo);
      }
      try {
        out = this.doAllParts(0);
      } catch (e) {
        if (this.stack.length > 0) {
          throw e;
        }
        out = e.message + "<pre>\n" + e.stack + "</pre>";
      } finally {
        _ref = this.stack.pop(), this.current = _ref[0], this.activeDynamicPartIx = _ref[1];
      }
      return out;
    };

    ViewExe.prototype.includePage = function() {
      return this.run(this.pageStack.shift(0));
    };

    ViewExe.prototype.includePart = function(nm, dynoInfo) {
      if (dynoInfo !== false) {
        dynoInfo.name = nm;
      }
      return this.run(this.loadStrategy.part(nm), dynoInfo);
    };

    ViewExe.prototype.doAllParts = function(parts_inx) {
      var attr, first, out, tag, tag_self, _i, _len, _ref;
      parts_inx = Number(parts_inx);
      out = '';
      if (parts_inx === 0) {
        out += this.handleIt(this.current[0]);
        parts_inx = this.current.length - 1;
        first = false;
      } else {
        first = true;
        out += this.handleIt(this.current[parts_inx + 3]);
      }
      _ref = this.current[parts_inx];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag_self = _ref[_i];
        if (first) {
          first = false;
          continue;
        }
        tag = this.current[tag_self + 1];
        attr = this.current[tag_self + 2];
        out += this.TagExe['Tag_' + tag]({
          parts: tag_self,
          attrs: attr
        });
        out += this.handleIt(this.current[this.current[tag_self][0]]);
      }
      return out;
    };

    ViewExe.prototype.handleIt = function(text_n_vars) {
      var args, cmd, i, out, _i, _ref, _ref1;
      if (typeof text_n_vars === 'string') {
        return text_n_vars;
      }
      out = text_n_vars[0];
      for (i = _i = 1, _ref = text_n_vars.length; _i < _ref; i = _i += 2) {
        _ref1 = text_n_vars[i], cmd = _ref1[0], args = _ref1[1];
        out += this.TagExe[cmd].apply(this.TagExe, args);
        out += text_n_vars[i + 1];
      }
      return out;
    };

    return ViewExe;

  })();

  window.EpicMvc.ViewExe = ViewExe;

}).call(this);

/*FistGroupCache*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var FistGroupCache;

  FistGroupCache = (function() {

    function FistGroupCache(Epic, loadStrategy) {
      this.Epic = Epic;
      this.loadStrategy = loadStrategy;
      this.cacheByGrp = [];
    }

    FistGroupCache.prototype.getFistGroup = function(grp_nm) {
      var _base, _ref;
      if (!((_ref = (_base = this.cacheByGrp)[grp_nm]) != null ? _ref : _base[grp_nm] = this.loadStrategy.fist(grp_nm))) {
        throw 'Could not locate window.EpicMvc.fist$' + grp_nm;
      }
      return this.cacheByGrp[grp_nm];
    };

    FistGroupCache.prototype.getFistDef = function(grp_nm, flist_nm) {
      var g;
      g = this.getFistGroup(grp_nm);
      if (!g.FISTS[flist_nm]) {
        throw "Could not locate window.EpicMvc.fist$" + grp_nm + "." + flist_nm;
      }
      return g.FISTS[flist_nm];
    };

    FistGroupCache.prototype.getFieldDefsForGroup = function(grp_nm) {
      return this.getFistGroup(grp_nm).FIELDS;
    };

    FistGroupCache.prototype.getFistDefsForGroup = function(grp_nm) {
      return this.getFistGroup(grp_nm).FISTS;
    };

    FistGroupCache.prototype.getFieldDefsForFist = function(grp_nm, flist_nm) {
      var f, fieldDef, g, nm, _i, _len;
      g = this.getFistGroup(grp_nm);
      f = this.getFistDef(grp_nm, flist_nm);
      fieldDef = {};
      for (_i = 0, _len = f.length; _i < _len; _i++) {
        nm = f[_i];
        if (!(nm in g.FIELDS)) {
          throw "Fist " + grp_nm + ":" + flist_nm + " contains unknown field " + nm;
        }
        fieldDef[nm] = g.FIELDS[nm];
      }
      return fieldDef;
    };

    FistGroupCache.prototype.getCanonicalFist = function(grp_nm, flist_nm) {
      return (flist_nm.split('_'))[0];
    };

    return FistGroupCache;

  })();

  window.EpicMvc.FistGroupCache = FistGroupCache;

}).call(this);

/*Fist*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var Fist;

  Fist = (function() {

    function Fist(Epic, grp_nm, flist_nm, view_nm) {
      var oG;
      this.Epic = Epic;
      this.grp_nm = grp_nm;
      this.view_nm = view_nm;
      oG = this.Epic.getFistGroupCache();
      flist_nm = oG.getCanonicalFist(grp_nm, flist_nm);
      this.fist_nm = flist_nm;
      this.oM = this.Epic.getInstance(this.view_nm);
      this.form_state = 'empty';
      this.fistDef = oG.getFistDef(grp_nm, this.fist_nm);
      this.cache_field_choice = [];
      this.filt = window.EpicMvc.FistFilt;
      this.Fb_ClearValues();
      this.upload_todo = [];
      this.upload_fl = {};
      this.eventLastPath = this.Epic.getPageflowPath();
    }

    Fist.prototype.getGroupNm = function() {
      return this.grp_nm;
    };

    Fist.prototype.getFistNm = function() {
      return this.fist_nm;
    };

    Fist.prototype.loadFieldDefs = function() {
      var _ref;
      return (_ref = this.fieldDef) != null ? _ref : this.fieldDef = this.Epic.getFistGroupCache().getFieldDefsForFist(this.grp_nm, this.fist_nm);
    };

    Fist.prototype.getFieldsDefs = function() {
      return this.loadFieldDefs();
    };

    Fist.prototype.loadFieldChoices = function(fl) {
      var ct, f, final_obj, json, k, rec, row, v, w_opt, w_val, wist, wist_grp, wist_nm, _i, _j, _len, _len1, _ref, _ref1;
      f = ':Fist.loadFieldChoices:' + fl;
      final_obj = {
        options: [],
        values: []
      };
      if (true) {
        this.loadFieldDefs();
        ct = this.fieldDef[fl].type.split(':');
        switch (ct[1]) {
          case 'custom':
            final_obj = this.oM.fistGetFieldChoices(this, fl);
            break;
          case 'array':
            _ref = this.fieldDef[fl].cdata;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              rec = _ref[_i];
              if (typeof rec === 'object') {
                final_obj.options.push(String(rec[1]));
                final_obj.values.push(String(rec[0]));
              } else {
                final_obj.options.push(String(rec));
                final_obj.values.push(String(rec));
              }
            }
            break;
          case 'json_like':
            json = this.fieldDef[fl].cdata.replace(/'/g, '"').replace(/"""/g, "'");
            json = $.parseJSON(json);
            for (k in json) {
              v = json[k];
              final_obj.options.push(k);
              final_obj.values.push(v);
            }
            break;
          case 'wist':
            _ref1 = this.fieldDef[fl].cdata.split(':'), wist_grp = _ref1[0], wist_nm = _ref1[1], w_val = _ref1[2], w_opt = _ref1[3];
            wist = this.Epic.getViewTable("Wist/" + wist_grp + ":" + wist_nm);
            for (_j = 0, _len1 = wist.length; _j < _len1; _j++) {
              row = wist[_j];
              final_obj.options.push(row[w_opt]);
              final_obj.values.push(row[w_val]);
            }
            this.Epic.log2(f, final_obj);
        }
        this.cache_field_choice[fl] = final_obj;
      }
    };

    Fist.prototype.getHtmlPostedFieldsList = function(flist_nm) {
      var fistDef;
      fistDef = this.fistDef;
      if ((flist_nm != null) && flist_nm !== this.fist_nm) {
        fistDef = this.Epic.getFistGroupCache().getFistDef(this.grp_nm, flist_nm);
      }
      return fistDef;
    };

    Fist.prototype.getFieldAttributes = function(fl_nm) {
      return (this.Epic.getFistGroupCache().getFieldDefsForGroup(this.grp_nm))[fl_nm];
    };

    Fist.prototype.getHtmlFieldValue = function(fl_nm) {
      this.loadData();
      return this.fb_HTML[fl_nm];
    };

    Fist.prototype.getHtmlFieldValues = function() {
      this.loadData();
      this.Epic.log2('getHtmlFieldValues', this.fist_nm, this.fb_HTML);
      return this.fb_HTML;
    };

    Fist.prototype.getDbFieldValue = function(fl_nm) {
      this.loadData();
      return this.fb_DB[fl_nm];
    };

    Fist.prototype.getDbFieldValues = function() {
      this.loadData();
      return this.fb_DB;
    };

    Fist.prototype.getFieldIssues = function() {
      return this.fb_issues;
    };

    Fist.prototype.getChoices = function(fl_nm) {
      this.loadFieldChoices(fl_nm);
      return this.cache_field_choice[fl_nm];
    };

    Fist.prototype.fieldLevelValidate = function(data, flist_nm, clear_issues) {
      this.form_state = 'posted';
      return this.Fb_FistValidate(data, flist_nm != null ? flist_nm : this.fist_nm, clear_issues != null ? clear_issues : true);
    };

    Fist.prototype.loadData = function(data) {
      if (this.form_state === 'empty') {
        this.oM.fistLoadData(this);
        return this.form_state = 'loaded';
      }
    };

    Fist.prototype.setFromDbValues = function(data) {
      this.Fb_SetHtmlValuesFromDb(data);
      this.form_state = 'loaded';
    };

    Fist.prototype.setFromHTMLValues = function(data) {
      this.Fb_SetHtmlValuesFromHtml(data);
      this.form_state = 'loaded';
    };

    Fist.prototype.eventNewRequest = function() {
      var path;
      path = this.Epic.getPageflowPath();
      if (this.eventLastPath !== path) {
        this.clearValues();
        this.upload_todo = [];
        this.uploaded_fl = {};
      }
      this.eventLastPath = path;
    };

    Fist.prototype.clearValues = function() {
      if (this.form_state !== 'empty') {
        this.Fb_ClearValues();
        this.form_state = 'empty';
      }
    };

    Fist.prototype.getUploadedMsg = function(fl, val) {
      return this.oM.fistGetUploadedMsg(this, fl, val);
    };

    Fist.prototype.haveUpload = function(fl, from_id, to_id, btn_id, msg_id, now) {
      var details, uploader,
        _this = this;
      details = {
        fl: fl,
        from_id: from_id,
        to_id: to_id,
        btn_id: btn_id,
        msg_id: msg_id
      };
      if (now !== true) {
        this.upload_todo.push(details);
        return;
      }
      uploader = new qq.FileUploaderBasic($.extend({
        element: document.getElementById(from_id),
        button: document.getElementById(btn_id),
        debug: true,
        multiple: false,
        allowedExtensions: ['jpg', 'jpeg'],
        onComplete: function(id, fileName, responseJSON) {
          return _this.uploadComplete(fl, id, fileName, responseJSON);
        }
      }, this.oM.fistGetUploadOptions(this, fl, from_id, to_id)));
      this.upload_fl[fl] = details;
    };

    Fist.prototype.uploadComplete = function(fl, the_id, fileName, responseJSON) {
      var form_value;
      form_value = this.oM.fistHandleUploadResponse(this, fl, responseJSON);
      if (form_value === false) {
        $('#' + this.upload_fl[fl].msg_id).text(' File failed to load, try again?');
      } else {
        $('#' + this.upload_fl[fl].msg_id).text(' ' + this.oM.fistGetUploadedMsg(this, fl, form_value) + '  uploaded.');
        $('#' + this.upload_fl[fl].to_id).val(form_value);
      }
    };

    Fist.prototype.eventInitializePage = function() {
      var v, _i, _len, _ref;
      _ref = this.upload_todo;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        this.haveUpload(v.fl, v.from_id, v.to_id, v.btn_id, v.msg_id, true);
      }
    };

    Fist.prototype.Fb_SetHtmlValuesFromDb = function(data) {
      var dbnms, k, _i, _len;
      dbnms = this.Fb_DbNames();
      for (_i = 0, _len = dbnms.length; _i < _len; _i++) {
        k = dbnms[_i];
        if (k in data) {
          this.fb_DB[k] = data[k];
        }
      }
      return this.Fb_Db2Html();
    };

    Fist.prototype.Fb_SetHtmlValuesFromHtml = function(data) {
      this.Fb_Html2Html(data, this.fist_nm);
      return null;
    };

    Fist.prototype.Fb_ClearValues = function() {
      this.fb_DB = {};
      this.fb_HTML = {};
      this.fb_issues = {};
      return this.Fb_Db2Html();
    };

    Fist.prototype.Fb_FistValidate = function(data, flist_nm, clear_issues) {
      var issues;
      if (clear_issues === true) {
        this.fb_issues = {};
      }
      this.Fb_Html2Html(data, flist_nm);
      issues = new window.EpicMvc.Issue(this.Epic);
      issues.call(this.Fb_Check(flist_nm));
      if (issues.count() === 0) {
        this.Fb_Html2Db(flist_nm);
        issues.call(this.Fb_Check(flist_nm, true));
      }
      return issues;
    };

    Fist.prototype.Fb_DbNames = function(flist_nm) {
      var db_nm, nm, rec, _ref, _ref1;
      if ((flist_nm != null) && flist_nm !== this.fist_nm) {
        return (function() {
          var _i, _len, _ref, _results;
          _ref = this.getHtmlPostedFieldsList(flist_nm);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            nm = _ref[_i];
            _results.push(this.fieldDef[nm].db_nm);
          }
          return _results;
        }).call(this);
      }
      if (!(this.fb_DB_names != null)) {
        this.loadFieldDefs();
        this.dbNm2HtmlNm = {};
        _ref = this.fieldDef;
        for (nm in _ref) {
          rec = _ref[nm];
          this.dbNm2HtmlNm[rec.db_nm] = nm;
        }
        if ((_ref1 = this.fb_DB_names) == null) {
          this.fb_DB_names = (function() {
            var _results;
            _results = [];
            for (db_nm in this.dbNm2HtmlNm) {
              _results.push(db_nm);
            }
            return _results;
          }).call(this);
        }
      }
      return this.fb_DB_names;
    };

    Fist.prototype.Fb_Make = function(main_issue, field, token_data) {
      var f, _ref;
      f = 'Fist.Fb_Make:' + field;
      if (token_data === true) {
        return false;
      }
      if ((_ref = this.issue_inline) == null) {
        this.issue_inline = this.Epic.appConf().getShowIssues() === 'inline';
      }
      this.Epic.log2(f, field, token_data, {
        inline: this.issue_inline
      });
      if (this.issue_inline) {
        this.fb_issues[field] = window.EpicMvc.Issue.Make(this.Epic, this.view_nm, token_data[0], token_data[1]);
        if (main_issue.count() === 0) {
          main_issue.add('FORM_ERRORS', [this.fistName]);
        }
      } else {
        main_issue.add(token_data[0], token_data[1]);
      }
      return true;
    };

    Fist.prototype.Fb_Html2Html = function(p, flist_nm) {
      var f, nm, value, _i, _len, _ref;
      f = 'Fist.Fb_Html2Html';
      this.loadFieldDefs();
      _ref = this.getHtmlPostedFieldsList(flist_nm);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nm = _ref[_i];
        value = p[nm];
        if ('H2H_prefilter' in this.filt) {
          value = this.filt.H2H_prefilter(nm, this.fieldDef[nm].h2h, value);
        }
        this.fb_HTML[nm] = this.filt.H2H_generic(nm, this.fieldDef[nm].h2h, value);
      }
    };

    Fist.prototype.Fb_Check = function(flist_nm, psuedo_only) {
      var db_nm, f, field, issue, issue_count, nm, p_nm, _i, _j, _len, _len1, _ref, _ref1;
      f = 'Fist.Fb_Check:' + flist_nm;
      issue = new window.EpicMvc.Issue(this.Epic);
      _ref = this.Fb_DbNames(flist_nm);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        db_nm = _ref[_i];
        nm = this.dbNm2HtmlNm[db_nm];
        field = this.fieldDef[nm];
        if (psuedo_only) {
          if (field.type !== 'psuedo') {
            continue;
          }
        }
        if (field.type !== 'psuedo' || psuedo_only) {
          this.Fb_Make(issue, nm, this.Fb_Validate(nm, this.fb_HTML[nm]));
        } else {
          issue_count = 0;
          _ref1 = field.cdata;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p_nm = _ref1[_j];
            if (this.Fb_Make(issue, nm, this.Fb_Validate(nm + '_' + p_nm, this.fb_HTML[nm + '_' + p_nm]))) {
              issue_cnt += 1;
            }
          }
        }
      }
      return issue;
    };

    Fist.prototype.Fb_Validate = function(fieldName, value) {
      var f, field, _ref;
      f = 'Fist.Fb_Validate:' + fieldName;
      this.loadFieldDefs();
      field = (_ref = this.fieldDef[fieldName]) != null ? _ref : this.getFieldAttributes(fieldName);
      if ((!(value != null)) || value.length === 0) {
        if (field.req === true) {
          if (field.req_text) {
            return ['FIELD_EMPTY_TEXT', [fieldName, field.label, field.req_text]];
          } else {
            return ['FIELD_EMPTY', [fieldName, field.label]];
          }
        }
        return true;
      }
      if (field.max_len > 0 && value.length > field.max_len) {
        return ['FIELD_OVER_MAX', [fieldName, field.label, field.max_len]];
      }
      if (!this.filt['CHECK_' + field.validate](fieldName, field.validate_expr, value, this)) {
        if (field.issue_text) {
          return ['FIELD_ISSUE_TEXT', [fieldName, field.label, field.issue_text]];
        } else {
          return ['FIELD_ISSUE', [fieldName, field.label]];
        }
      }
      return true;
    };

    Fist.prototype.Fb_Html2Db = function(flist_nm) {
      var f, field, nm, p_nm, psuedo_prefix, value, _i, _len, _ref;
      f = 'Fist.Fb_Html2Db';
      this.loadFieldDefs();
      _ref = this.getHtmlPostedFieldsList(flist_nm);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nm = _ref[_i];
        field = this.fieldDef[nm];
        psuedo_prefix = "";
        if (field.type !== 'psuedo') {
          value = this.fb_HTML[nm];
        } else {
          psuedo_prefix = '_psuedo';
          value = (function() {
            var _j, _len1, _ref1, _results;
            _ref1 = field.cdata;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              p_nm = _ref1[_j];
              _results.push(this.fb_HTML[nm + '_' + p_nm]);
            }
            return _results;
          }).call(this);
        }
        this.fb_DB[field.db_nm] = this.filt['H2D_' + field.h2d + psuedo_prefix](nm, field.h2d_expr, value);
      }
    };

    Fist.prototype.Fb_Db2Html = function() {
      var db_nm, field, i, list, nm, p_nm, psuedo_fl, psuedo_prefix, subfield, value, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.Fb_DbNames();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        db_nm = _ref[_i];
        nm = this.dbNm2HtmlNm[db_nm];
        field = this.fieldDef[nm];
        psuedo_fl = (field != null ? field.type : void 0) === 'psuedo' ? true : false;
        if (!(db_nm in this.fb_DB)) {
          if (!psuedo_fl) {
            this.fb_HTML[nm] = null;
          } else {
            _ref1 = field.cdata;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              subfield = _ref1[_j];
              this.fb_HTML[nm + '_' + subfield] = null;
            }
          }
          continue;
        }
        value = this.fb_DB[db_nm];
        psuedo_prefix = "";
        if (!psuedo_fl) {
          _results.push(this.fb_HTML[nm] = this.filt['D2H_' + field.d2h](db_nm + '%' + nm, field.d2h_expr, value));
        } else {
          switch (field.cdata.length) {
            case 0:
              throw 'Requires cdata with psuedo: ' + db_nm + '%' + nm;
              break;
            case 1:
              _results.push(BROKEN());
              break;
            default:
              list = this.filt['D2H_' + field.d2h + '_psuedo'](db_nm + '%' + nm, field.d2h_expr, value);
              _results.push((function() {
                var _k, _len2, _ref2, _results1;
                _ref2 = field.cdata;
                _results1 = [];
                for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
                  p_nm = _ref2[i];
                  _results1.push(this.fb_HTML[nm + '_' + p_nm] = list[i]);
                }
                return _results1;
              }).call(this));
          }
        }
      }
      return _results;
    };

    return Fist;

  })();

  window.EpicMvc.Fist = Fist;

}).call(this);

/*FistFilt*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var FistFilt,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  FistFilt = (function() {

    function FistFilt() {}

    FistFilt.H2H_generic = function(fieldName, spec, value) {
      var k, new_value, one_spec, spec_ary, _base;
      new_value = value != null ? value : '';
      spec_ary = typeof (_base = spec != null ? spec : '').split === "function" ? _base.split(':') : void 0;
      for (k in spec_ary) {
        one_spec = spec_ary[k];
        new_value = (function() {
          switch (one_spec) {
            case '':
              return new_value;
            case 'trim_spaces':
              return $.trim(new_value);
            case 'digits_only':
              return new_value.replace(/[^0-9]/g, '');
            case 'lower_case':
              return new_value.toLowerCase();
            case 'upper_case':
              return new_value.toUpperCase();
            default:
              throw "Unknown H2H filter " + one_spec + " in field " + fieldName;
          }
        })();
      }
      return new_value;
    };

    FistFilt.CHECK_ = function(fieldName, validateExpr, value, oF) {
      return true;
    };

    FistFilt.CHECK_null = function(fieldName, validateExpr, value, oF) {
      return true;
    };

    FistFilt.CHECK_undefined = function(fieldName, validateExpr, value, oF) {
      return true;
    };

    FistFilt.CHECK_any = function(fieldName, validateExpr, value, oF) {
      return true;
    };

    FistFilt.CHECK_phone = function(fieldName, validateExpr, value, oF) {
      var check_pat, re;
      switch (validateExpr) {
        case void 0:
          value = value.replace(/[^0-9]/g, '');
          check_pat = '[0-9]{10}';
          break;
        default:
          BROKE();
      }
      re = new RegExp('^' + check_pat + '$');
      if (value.match(re)) {
        return true;
      } else {
        return false;
      }
    };

    FistFilt.CHECK_zip = function(fieldName, validateExpr, value, oF) {
      switch (validateExpr) {
        case '5or9':
          if (!value.match(/^[0-9]{5}(|[0-9]{4})$/)) {
            return false;
          }
          break;
        default:
          BROKE();
      }
      return true;
    };

    FistFilt.CHECK_choice = function(fieldName, validateExpr, value, oF) {
      oF.Epic.log2('CHECK_choice:value/values', value, oF.getChoices(fieldName).values);
      if (__indexOf.call(oF.getChoices(fieldName).values, value) < 0) {
        return false;
      }
      if (validateExpr) {
        if (oF.getChoices(fieldName).values[0] === value) {
          return false;
        }
      }
      return true;
    };

    FistFilt.CHECK_email = function(fieldName, validateExpr, value, oF) {
      var few, most, re, some;
      most = '[A-Z0-9._+%-]';
      some = '[A-Z0-9.-]';
      few = '[A-Z]';
      re = new RegExp("^" + most + "+@" + some + "+[.]" + few + "{2,4}$", 'i');
      if (value.match(re)) {
        return true;
      } else {
        return false;
      }
    };

    FistFilt.CHECK_regexp = function(fieldName, validateExpr, value, oF) {
      var re;
      re = new RegExp("^" + validateExpr + "$");
      if (value.match(re)) {
        return true;
      } else {
        return false;
      }
    };

    FistFilt.CHECK_confirm = function(fieldName, validateExpr, value, oF) {
      var other_value;
      other_value = oF.getHtmlFieldValue(validateExpr);
      if (other_value !== value) {
        return false;
      }
      return true;
    };

    FistFilt.H2D_ = function(fieldName, filtExpr, value) {
      return value;
    };

    FistFilt.H2D_undefined = function() {
      return this.H2D_.apply(this, arguments);
    };

    FistFilt.H2D__psuedo = function(fieldName, filtExpr, value) {
      return value;
    };

    FistFilt.H2D_date_psuedo = function(fieldName, filtExpr, value) {
      var Y, d, f, m;
      f = 'FF:H2D_date_psuedo';
      oF.Epic.log2(f, fieldName, filtExpr, value);
      m = value[0], d = value[1], Y = value[2];
      if (!((m != null) || (d != null) || (Y != null))) {
        return '';
      }
      if (m == null) {
        m = '';
      }
      if (d == null) {
        d = '';
      }
      if (Y == null) {
        Y = '';
      }
      if (m.length === 1) {
        m = '0' + m;
      }
      if (d.length === 1) {
        d = '0' + d;
      }
      return "" + Y + "-" + m + "-" + d;
    };

    FistFilt.H2D_join_psuedo = function(fieldName, filtExpr, value) {
      return value.join(filtExpr);
    };

    FistFilt.H2D_phone = function(fieldName, filtExpr, value) {
      return value.replace(/[^0-9]/g, '');
    };

    FistFilt.H2D_zero_is_blank = function(fieldName, filtExpr, value) {
      if (value === 0 || value === '0') {
        return '';
      } else {
        return value;
      }
    };

    FistFilt.D2H_ = function(fieldName, filtExpr, value) {
      return value;
    };

    FistFilt.D2H_undefined = function() {
      return this.D2H_.apply(this, arguments);
    };

    FistFilt.D2H_null = function() {
      return this.D2H_.apply(this, arguments);
    };

    FistFilt.D2H_phone = function(fieldName, filtExpr, value) {
      value = value.replace(/[^0-9]/g, '');
      return value.replace(/(...)(...)(...)/, '($1) $2-$3');
    };

    FistFilt.D2H_date = function(fieldName, filtExpr, value) {
      return this.D2H_date_psuedo(fieldName, filtExpr, value).join('/');
    };

    FistFilt.D2H_date_psuedo = function(fieldName, filtExpr, value) {
      var Y, d, f, m, _ref;
      f = 'FF:D2H_date_psuedo';
      oF.Epic.log2(f, fieldName, filtExpr, value);
      _ref = ((value != null ? value : '--').split(/[^0-9-]/))[0].split('-'), Y = _ref[0], m = _ref[1], d = _ref[2];
      return [(m != null ? m : '').replace(/^0/, ''), (d != null ? d : '').replace(/^0/, ''), Y];
    };

    FistFilt.D2H_blank_is_zero = function(fieldName, filtExpr, value) {
      if (value.length) {
        return value;
      } else {
        return '0';
      }
    };

    return FistFilt;

  })();

  window.EpicMvc.FistFilt = FistFilt;

}).call(this);

/*parse*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var FindVars, ParseFile;

  FindVars = function(text) {
    var args, custom_hash_part, hash_part, i, last, parts, _ref;
    parts = text.split(/&([a-zA-Z0-9_]+\/[^;]{1,60});?/gm);
    i = 0;
    if (parts.length === 1) {
      return text;
    }
    while (i < parts.length - 1) {
      args = parts[i + 1].split('/');
      last = args.length - 1;
      _ref = args[last].split('#'), args[last] = _ref[0], hash_part = _ref[1], custom_hash_part = _ref[2];
      parts[i + 1] = (function() {
        switch (args.length) {
          case 2:
            return ['varGet2', [args[0], args[1], hash_part, custom_hash_part]];
          case 3:
            return ['varGet3', [args[0], args[1], args[2], hash_part, custom_hash_part]];
          default:
            throw "VarGet reference did not have just 2 or 3 slashes (" + parts[i + 1] + ")";
        }
      })();
      i += 2;
    }
    return parts;
  };

  ParseFile = function(file_stats, file_contents) {
    var a, attr, attr_split, clean, empty, finish, i, oi, parts, t, tag_wait, _i, _ref;
    clean = file_contents.replace(/-->/gm, '\x02').replace(/<!--[^\x02]*\x02/gm, '');
    parts = clean.split(/<(\/?)epic:([a-z_0-9]+)([^>]*)>/);
    i = 0;
    tag_wait = [];
    finish = [];
    while (i < parts.length - 1) {
      parts[i] = FindVars(parts[i]);
      if (parts[i + 1] === '/') {
        if (!tag_wait.length) {
          throw "[" + file_stats + "] Close tag found when none expected close=" + parts[i + 2];
        }
        oi = tag_wait.pop();
        if (parts[i + 2] !== parts[oi + 2]) {
          throw "[" + file_stats + "] Mismatched tags open=" + parts[oi + 2] + ", close=" + parts[i + 2];
        }
        finish[0] = i + 4;
        parts[oi + 1] = finish;
        finish = tag_wait.pop();
        parts[i + 1] = parts[i + 2] = '';
      } else {
        finish.push(i + 1);
        attr = {};
        empty = false;
        if (parts[i + 3].length > 0) {
          attr_split = parts[i + 3].trim().split(/\s*=\s*"([^"]*)"\s*/);
          empty = attr_split.pop() === '/';
          parts[i + 3] = attr_split;
          for (a = _i = 0, _ref = attr_split.length; _i < _ref; a = _i += 2) {
            attr[attr_split[a].toLowerCase()] = FindVars(attr_split[a + 1]);
          }
        }
        parts[i + 3] = attr;
        if (empty === true) {
          parts[i + 1] = [i + 4];
        } else {
          tag_wait.push(finish);
          finish = [-1];
          tag_wait.push(i);
        }
      }
      i += 4;
    }
    if (tag_wait.length) {
      throw "[" + file_stats + "] Missing closing epic tags" + (((function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = tag_wait.length; _j < _len; _j++) {
          t = tag_wait[_j];
          _results.push(parts[t + 2]);
        }
        return _results;
      })()).join(', '));
    }
    parts[i] = FindVars(parts[i]);
    parts.push(finish);
    return parts;
  };

  if (typeof window !== "undefined" && window !== null) {
    window.EpicMvc.ParseFile = ParseFile;
  } else {
    module.exports = function(w) {
      return w.EpicMvc.ParseFile = ParseFile;
    };
  }

}).call(this);

/*Package/Base/js/jquery-dnd-events.js*/(function ($) {
	"use strict";

	//hooks for drag and drop events, like $.event.keyHooks and $.event.mouseHooks, but for drag and drop
	var dndHooks = {
		//importing to the event object all the properties like in a regular mouse event,
		//also importing the dataTransfer property
		props: $.event.mouseHooks.props.concat('dataTransfer'),

		//since no new filtering to the imported props is needed, we only need the same filtering as in normal
		//mouse events
		filter: $.event.mouseHooks.filter
	};

	//make the drag and drop events like every other event, this is almost the same as the end of /src/event.js
	$.each(['dragstart', 'dragenter', 'dragover', 'dragleave', 'drag', 'drop', 'dragend'], function (i, name) {
		$.fn[name] = function (data, fn) {
			if (!fn) {
				fn = data;
				data = null;
			}
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};

		if ($.attrFn) {
			$.attrFn[name] = true;
		}

		$.event.fixHooks[name] = dndHooks;
	});

}(jQuery));


/*Package/Base/app.coffee*/// Generated by CoffeeScript 1.4.0
(function() {

  window.EpicMvc.app$Base = {
    OPTIONS: {
      login: {
        flow: "starter_flow$Base"
      },
      template: {
        "default": "starter"
      }
    },
    MODELS: {
      Pageflow: {
        "class": "Pageflow$Base",
        inst: "bP"
      },
      Security: {
        "class": "NoSecurity$Base",
        inst: "bS"
      },
      Property: {
        "class": "Property$Base",
        inst: "bPr"
      },
      Tag: {
        "class": "TagExe$Base",
        inst: "bT"
      }
    },
    FLOWS: {
      starter_flow$Base: {
        start: "starter_track",
        TRACKS: {
          starter_track: {
            start: "starter_step",
            STEPS: {
              starter_step: {
                page: "page"
              }
            }
          }
        }
      }
    }
  };

}).call(this);

/*Package/Base/Model/NoSecurity.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var NoSecurity,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  NoSecurity = (function(_super) {

    __extends(NoSecurity, _super);

    function NoSecurity(epic, view_nm) {
      NoSecurity.__super__.constructor.call(this, epic, view_nm);
    }

    NoSecurity.prototype.loginValid = function() {
      return false;
    };

    NoSecurity.prototype.checkSession = function() {
      return 'LoginNone';
    };

    return NoSecurity;

  })(window.EpicMvc.ModelJS);

  window.EpicMvc.Model.NoSecurity$Base = NoSecurity;

}).call(this);

/*Package/Base/Model/TagExe.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var TagExe,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty;

  TagExe = (function() {

    function TagExe(Epic, view_nm) {
      this.Epic = Epic;
      this.view_nm = view_nm;
      this.viewExe = this.Epic.getView();
      this.resetForNextRequest();
    }

    TagExe.prototype.resetForNextRequest = function(state) {
      var dyn_list, dyn_list_orig, dyn_m, dyn_t, f, info_parts, nm, oM, prev_row, rec, rh, rh_alias, row, row_num, t_set, tbl, _i, _len, _ref;
      f = 'Base::TagExe.resetForNextRequest:state?' + (state ? 'T' : 'F');
      this.forms_included = {};
      this.fist_objects = {};
      this.info_foreach = {};
      this.info_if_nms = {};
      this.info_varGet3 = {};
      this.info_parts = [];
      if (state) {
        _ref = state.info_foreach.dyn;
        for (nm in _ref) {
          rec = _ref[nm];
          dyn_m = rec[0], dyn_t = rec[1], dyn_list_orig = rec[2];
          dyn_list = [];
          oM = this.Epic.getInstance(dyn_m);
          for (_i = 0, _len = dyn_list_orig.length; _i < _len; _i++) {
            t_set = dyn_list_orig[_i];
            this.Epic.log2(f, nm, 't_set', t_set);
            rh = t_set[0], rh_alias = t_set[1];
            dyn_list.push(t_set);
            if (!(rh_alias in this.info_foreach)) {
              this.Epic.log2(f, nm, 'rh_alias', rh_alias);
              if (dyn_list.length === 1) {
                tbl = oM.getTable(rh);
              } else {
                tbl = prev_row[rh];
              }
              row_num = state.info_foreach.row_num[rh_alias];
              row = $.extend(true, {}, tbl[row_num]);
              this.info_foreach[rh_alias] = {
                dyn: [dyn_m, dyn_t, dyn_list],
                row: row
              };
              prev_row = row;
            } else {
              prev_row = this.info_foreach[rh_alias].row;
            }
          }
        }
        info_parts = $.extend(true, {}, state.info_parts);
        return this.info_parts = info_parts.stuff;
      }
    };

    TagExe.prototype.formatFromSpec = function(val, spec, custom_spec) {
      var left, right, str, _base, _ref;
      switch (spec) {
        case '':
          return typeof (_base = window.EpicMvc).custom_filter === "function" ? _base.custom_filter(val, custom_spec) : void 0;
        case 'count':
          return val != null ? val.length : void 0;
        case 'bytes':
          return window.bytesToSize(Number(val));
        case 'uriencode':
          return encodeURIComponent(val);
        case 'esc':
          return window.EpicMvc.escape_html(val);
        case 'quo':
          return ((val.replace(/\\/g, '\\\\')).replace(/'/g, '\\\'')).replace(/"/g, '\\"');
        case '1':
          return (String(val))[0];
        case 'lc':
          return (String(val)).toLowerCase();
        case 'ucFirst':
          str = (String(str)).toLowerCase();
          return str.slice(0, 1).toUpperCase() + str.slice(1);
        default:
          if ((spec != null ? spec.length : void 0) > 4 && spec[0] === '?') {
            _ref = spec.substr(2).split('?'), left = _ref[0], right = _ref[1];
            return ((val === true || (typeof val === 'number' && val)) || (val != null ? val.length : void 0) ? left : right).replace(new RegExp('[' + spec[1] + ']', 'g'), ' ').replace(new RegExp('[%]', 'g'), val);
          } else if (spec != null ? spec.length : void 0) {
            if ((val === true || (typeof val === 'number' && val)) || (val != null ? val.length : void 0)) {
              return spec.substr(1).replace(new RegExp('[' + spec.substr(0, 1) + ']', 'g'), ' ').replace(new RegExp('[%]', 'g'), val);
            } else {
              return '';
            }
          } else {
            return val;
          }
      }
    };

    TagExe.prototype.varGet3 = function(view_nm, tbl_nm, key, format_spec, custom_spec) {
      var row, _base, _ref;
      this.viewExe.haveTableRefrence(view_nm, tbl_nm);
      if ((_ref = (_base = this.info_varGet3)[view_nm]) == null) {
        _base[view_nm] = this.Epic.getInstance(view_nm);
      }
      row = (this.info_varGet3[view_nm].getTable(tbl_nm))[0];
      return this.formatFromSpec(row[key], format_spec, custom_spec);
    };

    TagExe.prototype.varGet2 = function(table_ref, col_nm, format_spec, custom_spec, sub_nm) {
      var ans, dyn_m, dyn_t, _ref;
      _ref = this.info_foreach[table_ref].dyn, dyn_m = _ref[0], dyn_t = _ref[1];
      this.viewExe.haveTableRefrence(dyn_m, dyn_t);
      ans = this.info_foreach[table_ref].row[col_nm];
      if (sub_nm != null) {
        ans = ans[sub_nm];
      }
      return this.formatFromSpec(ans, format_spec, custom_spec);
    };

    TagExe.prototype.loadFistDef = function(flist_nm) {
      var _base, _ref;
      return (_ref = (_base = this.fist_objects)[flist_nm]) != null ? _ref : _base[flist_nm] = this.Epic.getFistInstance(flist_nm);
    };

    TagExe.prototype.checkForDynamic = function(oPt) {
      var attr, delay, dyn, id, nm, plain_attrs, rec, row_num, state, tag, val, _ref, _ref1;
      tag = 'dynamic' in oPt.attrs ? this.viewExe.handleIt(oPt.attrs.dynamic) : '';
      if (tag.length === 0) {
        return ['', '', false];
      }
      delay = 1;
      id = 'epic-dynopart-' + this.Epic.nextCounter();
      plain_attrs = [];
      _ref = oPt.attrs;
      for (attr in _ref) {
        val = _ref[attr];
        switch (attr) {
          case 'part':
          case 'dynamic':
            continue;
          case 'delay':
            delay = this.viewExe.handleIt(val);
            break;
          case 'id':
            id = this.viewExe.handleIt(val);
            break;
          default:
            plain_attrs.push("" + attr + "=\"" + (this.viewExe.handleIt(val)) + "\"");
        }
      }
      dyn = {};
      row_num = {};
      _ref1 = this.info_foreach;
      for (nm in _ref1) {
        rec = _ref1[nm];
        dyn[nm] = rec.dyn;
        row_num[nm] = rec.row._COUNT;
      }
      state = $.extend(true, {}, {
        info_foreach: {
          dyn: dyn,
          row_num: row_num
        },
        info_parts: {
          stuff: this.info_parts
        }
      });
      return [
        "<" + tag + " id=\"" + id + "\" " + (plain_attrs.join(' ')) + ">", "</" + tag + ">", {
          id: id,
          delay: delay * 1000,
          state: state
        }
      ];
    };

    TagExe.prototype.loadPartAttrs = function(oPt) {
      var a, attr, f, p, result, val, _ref, _ref1;
      f = ':tag.loadPartAttrs';
      result = {};
      _ref = oPt.attrs;
      for (attr in _ref) {
        val = _ref[attr];
        _ref1 = attr.split(':'), p = _ref1[0], a = _ref1[1];
        if (p !== 'p') {
          continue;
        }
        result[a] = this.viewExe.handleIt(val);
      }
      return result;
    };

    TagExe.prototype.Tag_page_part = function(oPt) {
      var after, before, dynamicInfo, f, out, _ref;
      f = ':tag.page-part:' + oPt.attrs.part;
      this.info_parts.push(this.loadPartAttrs(oPt));
      _ref = this.checkForDynamic(oPt), before = _ref[0], after = _ref[1], dynamicInfo = _ref[2];
      out = before + (this.viewExe.includePart(this.viewExe.handleIt(oPt.attrs.part), dynamicInfo)) + after;
      this.info_parts.pop();
      return out;
    };

    TagExe.prototype.Tag_page = function(oPt) {
      return this.viewExe.includePage();
    };

    TagExe.prototype.getTable = function(nm) {
      var f, field, row, _i, _len, _ref;
      f = ':TagExe.getTable:' + nm;
      switch (nm) {
        case 'Control':
        case 'Form':
          return this.fist_table[nm];
        case 'If':
          return [this.info_if_nms];
        case 'Part':
          return this.info_parts.slice(-1);
        case 'Field':
          row = {};
          _ref = this.fist_table.Control;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            row[field.name] = [field];
          }
          return [row];
        default:
          return [];
      }
    };

    TagExe.prototype.Tag_form_part = function(oPt) {
      var any_req, choices, fl, fl_nm, fm_nm, help, hpfl, is_first, issues, ix, map, nm, oFi, one_field_nm, orig, out, part, row, rows, s, show_req, value_fl_nm, _i, _j, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      part = this.viewExe.handleIt((_ref = oPt.attrs.part) != null ? _ref : 'fist_default');
      row = this.viewExe.handleIt((_ref1 = oPt.attrs.row) != null ? _ref1 : false);
      fm_nm = this.viewExe.handleIt(oPt.attrs.form);
      oFi = this.loadFistDef(fm_nm);
      one_field_nm = oPt.attrs.field != null ? this.viewExe.handleIt(oPt.attrs.field) : false;
      help = this.viewExe.handleIt((_ref2 = oPt.attrs.help) != null ? _ref2 : '');
      show_req = 'show_req' in oPt.attrs ? this.viewExe.handleIt(oPt.attrs.show_req) : 'yes';
      any_req = false;
      is_first = true;
      out = [];
      hpfl = (function() {
        var _results;
        _results = [];
        for (nm in oFi.getHtmlFieldValues()) {
          _results.push(nm);
        }
        return _results;
      })();
      issues = oFi.getFieldIssues();
      map = window.EpicMvc['issues$' + this.Epic.appConf().getGroupNm()];
      for (_i = 0, _len = hpfl.length; _i < _len; _i++) {
        fl_nm = hpfl[_i];
        if (one_field_nm !== false && one_field_nm !== fl_nm) {
          continue;
        }
        orig = oFi.getFieldAttributes(fl_nm);
        fl = $.extend({
          tip: ''
        }, orig);
        fl.is_first = is_first === true ? 'yes' : '';
        is_first = false;
        fl.yes_val = fl.type === 'yesno' ? String((_ref3 = fl.cdata) != null ? _ref3 : '1') : 'not_used';
        fl.req = fl.req === true ? 'yes' : '';
        if (fl.req === true) {
          any_req = true;
        }
        fl.name = fl_nm;
        if ((_ref4 = fl["default"]) == null) {
          fl["default"] = '';
        }
        fl["default"] = String(fl["default"]);
        value_fl_nm = row ? fl_nm + '__' + row : fl_nm;
        fl.value = (_ref5 = oFi.getHtmlFieldValue(value_fl_nm)) != null ? _ref5 : fl["default"];
        fl.selected = fl.type === 'yesno' && fl.value === fl.yes_val ? 'yes' : '';
        fl.id = 'U' + this.Epic.nextCounter();
        fl.type = (fl.type.split(':'))[0];
        if ((_ref6 = fl.width) == null) {
          fl.width = '';
        }
        if (fl.type === 'radio' || fl.type === 'pulldown') {
          choices = oFi.getChoices(fl_nm);
          rows = [];
          for (ix = _j = 0, _ref7 = choices.options.length; 0 <= _ref7 ? _j < _ref7 : _j > _ref7; ix = 0 <= _ref7 ? ++_j : --_j) {
            s = choices.values[ix] === (String(fl.value)) ? 'yes' : '';
            rows.push({
              option: choices.options[ix],
              value: choices.values[ix],
              selected: s
            });
          }
          fl.Choice = rows;
        }
        fl.issue = issues[value_fl_nm] ? issues[value_fl_nm].asTable(map)[0].issue : '';
        out.push(fl);
      }
      this.fist_table = {
        Form: [
          {
            show_req: show_req,
            any_req: any_req,
            help: help
          }
        ],
        Control: out
      };
      return this.viewExe.includePart(part, false);
    };

    TagExe.prototype.Tag_defer = function(oPt) {
      var code, name;
      name = 'anonymous';
      if ('name' in oPt.attrs) {
        name = this.viewExe.handleIt(oPt.attrs.name);
      }
      code = this.viewExe.doAllParts(oPt.parts);
      this.viewExe.pushDefer({
        name: name,
        code: code
      });
      return '';
    };

    TagExe.prototype.Tag_if_any = function(oPt) {
      return this.ifAnyAll(oPt, true);
    };

    TagExe.prototype.Tag_if_all = function(oPt) {
      return this.ifAnyAll(oPt, false);
    };

    TagExe.prototype.Tag_if = function(oPt) {
      return this.ifAnyAll(oPt, true);
    };

    TagExe.prototype.Tag_if_true = function(oPt) {
      return this.ifTrueFalse(oPt, true);
    };

    TagExe.prototype.Tag_if_false = function(oPt) {
      return this.ifTrueFalse(oPt, false);
    };

    TagExe.prototype.ifTrueFalse = function(oPt, is_if_true) {
      var f, found_true, nm, out;
      f = ':TagExe.ifTrueFalse';
      nm = this.viewExe.handleIt(oPt.attrs.name);
      found_true = this.info_if_nms[nm] === is_if_true;
      return out = found_true ? this.viewExe.doAllParts(oPt.parts) : '';
    };

    TagExe.prototype.ifAnyAll = function(oPt, is_if_any) {
      var f, flip, found_nm, found_true, left, lh, nm, op, out, rh, right, tbl, use_op, val, _ref, _ref1;
      f = ':TagExe.ifAnyAll';
      out = '';
      found_nm = false;
      _ref = oPt.attrs;
      for (nm in _ref) {
        val = _ref[nm];
        val = this.viewExe.handleIt(val);
        flip = false;
        switch (nm) {
          case 'right':
            right = val;
            continue;
          case 'left':
          case 'val':
          case 'value':
            left = val;
            continue;
          case 'name':
            found_nm = val;
            continue;
          case 'eq':
          case 'ne':
          case 'lt':
          case 'gt':
          case 'ge':
          case 'le':
          case 'op':
            if (nm !== 'op') {
              right = val;
              op = nm;
            } else {
              op = val;
            }
            use_op = op;
            if (op.substr(0, 1) === '!') {
              flip = true;
              use_op = op.substr(1);
            }
            switch (use_op) {
              case 'eq':
                found_true = left === right;
                break;
              case 'ne':
                found_true = left !== right;
                break;
              case 'gt':
                found_true = (Number(left)) > (Number(right));
                break;
              case 'ge':
                found_true = (Number(left)) >= (Number(right));
                break;
              case 'lt':
                found_true = (Number(left)) < (Number(right));
                break;
              case 'le':
                found_true = (Number(left)) <= (Number(right));
            }
            op = null;
            break;
          case 'not_empty':
          case 'empty':
            if (nm === 'not_empty') {
              flip = true;
            }
            found_true = val.length === 0;
            break;
          case 'in_list':
          case 'not_in_list':
            if (nm === 'not_in_list') {
              flip = true;
            }
            found_true = __indexOf.call(val.split(','), left) >= 0;
            break;
          case 'table_has_no_values':
          case 'table_is_empty':
          case 'table_is_not_empty':
          case 'table_has_values':
            if (nm === 'table_has_no_values' || nm === 'table_is_empty') {
              flip = true;
            }
            _ref1 = val.split('/'), lh = _ref1[0], rh = _ref1[1];
            tbl = this._accessModelTable(val, false)[0];
            found_true = tbl.length !== 0;
            break;
          case 'if_true':
          case 'if_false':
            if (nm === 'if_true') {
              flip = true;
            }
            found_true = this.info_if_nms[val] === false;
            break;
          case 'true':
          case 'false':
            if (nm === 'true') {
              flip = true;
            }
            found_true = val === false || val === 'false';
            break;
          case 'not_set':
          case 'set':
            if (nm === 'not_set') {
              flip = true;
            }
            found_true = val === true || (typeof val === 'number' && val) || (typeof val === 'string' && val.length > 0 && !val.match(/^(no|false|n|0)$/i)) ? true : false;
            break;
        }
        if (flip) {
          found_true = !found_true;
        }
        if (is_if_any && found_true) {
          break;
        }
        if (!is_if_any && !found_true) {
          break;
        }
      }
      if (found_nm !== false) {
        this.info_if_nms[found_nm] = found_true;
      }
      if (found_true) {
        out = this.viewExe.doAllParts(oPt.parts);
      }
      return out;
    };

    TagExe.prototype._accessModelTable = function(spec, alias, spec_was_handled) {
      var at_table, dyn_list, dyn_m, dyn_t, lh, oM, rh, rh_alias, tbl, _ref, _ref1, _ref2;
      at_table = spec_was_handled ? spec : this.viewExe.handleIt(spec);
      _ref = at_table.split('/'), lh = _ref[0], rh = _ref[1];
      if (lh in this.info_foreach) {
        tbl = this.info_foreach[lh].row[rh];
        _ref1 = this.info_foreach[lh].dyn, dyn_m = _ref1[0], dyn_t = _ref1[1], dyn_list = _ref1[2];
      } else {
        oM = this.Epic.getInstance(lh);
        tbl = oM.getTable(rh);
        _ref2 = [lh, rh, []], dyn_m = _ref2[0], dyn_t = _ref2[1], dyn_list = _ref2[2];
      }
      this.viewExe.haveTableRefrence(dyn_m, dyn_t);
      if (tbl.length === 0) {
        return [tbl, rh, lh, rh, oM];
      }
      rh_alias = rh;
      if (alias) {
        rh_alias = this.viewExe.handleIt(alias);
      }
      dyn_list.push([rh, rh_alias]);
      this.info_foreach[rh_alias] = {
        dyn: [dyn_m, dyn_t, dyn_list]
      };
      return [tbl, rh_alias, lh, rh, oM];
    };

    TagExe.prototype.Tag_comment = function(oPt) {
      return "\n<!--\n" + (this.viewExe.doAllParts(oPt.parts)) + "\n-->\n";
    };

    TagExe.prototype.Tag_foreach = function(oPt) {
      var break_rows_list, count, f, limit, out, rh_alias, row, tbl, _i, _len, _ref, _ref1;
      f = ':TagExe.Tag_foreach';
      _ref = this._accessModelTable(oPt.attrs.table, oPt.attrs.alias), tbl = _ref[0], rh_alias = _ref[1];
      if (tbl.length === 0) {
        return '';
      }
      break_rows_list = this.calcBreak(tbl.length, oPt);
      out = '';
      limit = tbl.length;
      if ('limit' in oPt.attrs) {
        limit = Number(this.viewExe.handleIt(oPt.attrs.limit)) - 1;
      }
      for (count = _i = 0, _len = tbl.length; _i < _len; count = ++_i) {
        row = tbl[count];
        if (count > limit) {
          break;
        }
        this.info_foreach[rh_alias].row = $.extend(true, {}, row, {
          _FIRST: (count === 0 ? 'F' : ''),
          _LAST: (count === tbl.length - 1 ? 'L' : ''),
          _SIZE: tbl.length,
          _COUNT: count,
          _BREAK: ((_ref1 = count + 1, __indexOf.call(break_rows_list, _ref1) >= 0) ? 'B' : '')
        });
        out += this.viewExe.doAllParts(oPt.parts);
      }
      delete this.info_foreach[rh_alias];
      return out;
    };

    TagExe.prototype.calcBreak = function(sZ, oPt) {
      var break_fixed, break_rows_list, check_for_breaks, check_row, column_count, extra_rows, last_check_row, nm, p, repeat_value, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      p = oPt.attrs;
      break_rows_list = [];
      _ref = ['break_min', 'break_fixed', 'break_at', 'break_even'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nm = _ref[_i];
        p[nm] = p[nm] != null ? Number(this.viewExe.handleIt(p[nm])) : 0;
      }
      check_for_breaks = p.break_min && sZ < p.break_min ? 0 : 1;
      if (check_for_breaks && p.break_fixed) {
        check_row = p.break_fixed;
        while (sZ > check_row) {
          break_rows_list.push(check_row + 1);
          check_row += p.break_fixed;
        }
        check_for_breaks = 0;
      }
      if (check_for_breaks && p.break_at) {
        repeat_value = 0;
        last_check_row = 0;
        _ref1 = p.break_at.split(',');
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          check_row = _ref1[_j];
          if (!check_row.length) {
            if (last_check_row <= 0 || repeat_value <= 0) {
              break;
            }
            check_row = last_check_row + repeat_value;
            while (sZ > check_row) {
              break_rows_list.push(check_row + 1);
              check_row += repeat_value;
            }
            break;
          } else {
            if (check_row <= 0) {
              break;
            }
            if (sZ > check_row) {
              break_rows_list.push(check_row + 1);
            } else {
              break;
            }
          }
          repeat_value = check_row - last_check_row;
          last_check_row = check_row;
        }
        check_for_breaks = 0;
      }
      if (check_for_breaks && p.break_even) {
        column_count = 1;
        repeat_value = 0;
        last_check_row = 0;
        _ref2 = p.break_even.split(',');
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          check_row = _ref2[_k];
          if (!check_row.length) {
            if (last_check_row <= 0 || repeat_value <= 0) {
              break;
            }
            check_row = last_check_row + repeat_value;
            while (sZ >= check_row) {
              column_count++;
              check_row += repeat_value;
            }
            break;
          } else {
            if (check_row <= 0) {
              break;
            }
            if (sZ >= check_row) {
              column_count++;
            } else {
              break;
            }
          }
          repeat_value = check_row - last_check_row;
          last_check_row = check_row;
        }
        if (column_count > 1) {
          break_fixed = Math.floor(sZ / column_count);
          extra_rows = sZ - break_fixed * column_count;
          check_row = break_fixed;
          while (sZ > check_row) {
            if (extra_rows) {
              check_row++;
              extra_rows--;
            }
            break_rows_list.push(check_row + 1);
            check_row += break_fixed;
          }
        }
        check_for_breaks = 0;
      }
      return break_rows_list;
    };

    TagExe.prototype.Tag_dyno_form = function(oPt) {
      return this.Tag_form_part(oPt);
    };

    TagExe.prototype.Tag_form = function(oPt) {
      var add, attr, fist_nm, o, out_attrs, saw_method, val, _i, _len, _ref, _ref1;
      saw_method = false;
      out_attrs = [];
      _ref = oPt.attrs;
      for (attr in _ref) {
        val = _ref[attr];
        val = this.viewExe.handleIt(val);
        add = false;
        switch (attr) {
          case 'forms_used':
            this.forms_included = val.split(',');
            break;
          case 'method':
            saw_method = true;
            break;
          case 'show_required':
          case 'help':
            break;
          default:
            add = true;
        }
        if (add) {
          out_attrs.push("" + attr + "=\"" + val + "\"");
        }
      }
      if (!saw_method) {
        out_attrs.push('METHOD="POST"');
      }
      _ref1 = this.forms_included;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        fist_nm = _ref1[_i];
        this.loadFistDef(fist_nm);
      }
      if (!this.forms_included.length) {
        this.forms_included = ['A FORM TAG WITH NO NAME?'];
      }
      o = "<form " + (out_attrs.join(' ')) + ">\n";
      try {
        o += this.viewExe.doAllParts(oPt.parts);
      } finally {
        this.forms_included = this.fist_objects = [];
      }
      return o += '</form>';
    };

    TagExe.prototype.Tag_control = function(oPt) {
      var control_html, fl_def, fl_nm, fm_nm, oFi, one, value;
      fl_nm = oPt.attrs.field;
      fm_nm = this.viewExe.handleIt(oPt.attrs.form);
      oFi = this.loadFistDef(fm_nm);
      fl_def = oFi.getFieldAttributes(fl_nm);
      value = oFi.getHtmlFieldValue(fl_nm);
      one = fl_def.type.substr(0, 5 === 'radio') ? oPt.attrs.value : null;
      control_html = this.Epic.renderer.doControl(oFi, fl_nm, value, fl_def.type, fl_def.cdata, fl_def.width, fl_def.max_length, one);
      return control_html;
    };

    TagExe.prototype.Tag_form_action = function(oPt) {
      var action, attr, click_index, link, o, out_attrs, val, value, _base, _base1, _ref, _ref1, _ref2;
      link = {};
      if (oPt.attrs.src != null) {
        if ((_ref = (_base = oPt.attrs).type) == null) {
          _base.type = 'image';
        }
        if ((_ref1 = (_base1 = oPt.attrs).border) == null) {
          _base1.border = '0';
        }
      }
      out_attrs = [];
      action = '';
      value = '';
      _ref2 = oPt.attrs;
      for (attr in _ref2) {
        if (!__hasProp.call(_ref2, attr)) continue;
        val = _ref2[attr];
        switch (attr) {
          case 'action':
            action = $.trim(this.viewExe.handleIt(val));
            break;
          case 'value':
            value = $.trim(this.viewExe.handleIt(val));
            break;
          default:
            if (attr.match(/^p_/)) {
              link[attr.substr(2)] = this.viewExe.handleIt(val);
            } else {
              out_attrs.push("" + attr + "=\"" + (window.EpicMvc.escape_html(this.viewExe.handleIt(val))) + "\"");
            }
        }
      }
      link._b = action;
      click_index = this.Epic.request().addLink(link);
      return o = this.Epic.renderer.form_action(out_attrs, click_index, action, value);
    };

    TagExe.prototype.Tag_link_action = function(oPt) {
      var action, attr, attr_text, click_index, id, k, link, o, plain_attr, text, v, val, _ref;
      link = {};
      plain_attr = {};
      action = this.viewExe.handleIt(oPt.attrs.action);
      link._a = action;
      _ref = oPt.attrs;
      for (attr in _ref) {
        if (!__hasProp.call(_ref, attr)) continue;
        val = _ref[attr];
        if ((attr.substr(0, 2)) === 'p:') {
          link[attr.substr(2)] = this.viewExe.handleIt(val);
        } else {
          switch (attr) {
            case 'href':
            case 'onclick':
            case 'action':
              break;
            default:
              plain_attr[attr] = this.viewExe.handleIt(val);
          }
        }
      }
      text = '';
      text += this.viewExe.doAllParts(oPt.parts);
      id = '';
      attr_text = '';
      for (k in plain_attr) {
        if (!__hasProp.call(plain_attr, k)) continue;
        v = plain_attr[k];
        attr_text += " " + k + "=\"" + (window.EpicMvc.escape_html(v)) + "\"";
      }
      click_index = this.Epic.request().addLink(link);
      return o = this.Epic.renderer.link_action(click_index, id, attr_text, text);
    };

    return TagExe;

  })();

  window.EpicMvc.Model.TagExe$Base = TagExe;

}).call(this);

/*Package/Base/Model/Pageflow.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var Pageflow,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Pageflow = (function(_super) {

    __extends(Pageflow, _super);

    function Pageflow(epic, view_nm) {
      var ss;
      ss = {
        f: null,
        t: null,
        s: null,
        sp: []
      };
      Pageflow.__super__.constructor.call(this, epic, view_nm, ss);
      this.eventNewRequest();
    }

    Pageflow.prototype.eventNewRequest = function() {
      this.issues = new window.EpicMvc.Issue(this.Epic, this.view_nm);
      this.messages = new window.EpicMvc.Issue(this.Epic, this.view_nm);
      return this.Table = {};
    };

    Pageflow.prototype.goTo = function(f, t, s) {
      var oC;
      oC = this.Epic.appConf();
      if (!(f != null) || !(oC.getF(f) != null)) {
        f = oC.loginF();
        t = oC.startT(f);
        s = oC.startS(f, t);
      } else if (!(t != null) || !(oC.getT(f, t) != null)) {
        t = oC.startT(f);
        s = oC.startS(f, t);
      } else if (!(s != null) || !(oC.getS(f, t, s) != null)) {
        s = oC.startS(f, t);
      }
      this.f = f;
      this.t = t;
      this.s = s;
      return this.invalidateTables(['V']);
    };

    Pageflow.prototype.go = function(path) {
      var ix, q, v, _i, _len, _ref, _ref1;
      q = path.split('/');
      _ref = [this.f, this.t, this.s];
      for (ix = _i = 0, _len = _ref.length; _i < _len; ix = ++_i) {
        v = _ref[ix];
        if (!((_ref1 = q[ix]) != null ? _ref1.length : void 0)) {
          q[ix] = v;
        } else {
          break;
        }
      }
      return this.goTo(q[0], q[1], q[2]);
    };

    Pageflow.prototype.getF = function() {
      return this.f;
    };

    Pageflow.prototype.getTrackPath = function() {
      return [this.f, this.t];
    };

    Pageflow.prototype.getStepPath = function() {
      return [this.f, this.t, this.s];
    };

    Pageflow.prototype.action = function(a, p) {
      var i, m, q, r;
      r = {};
      i = new window.EpicMvc.Issue(this.Epic, this.view_nm, a);
      m = new window.EpicMvc.Issue(this.Epic, this.view_nm, a);
      switch (a) {
        case 'flow':
          this.goTo(p.flow);
          break;
        case 'track':
          this.goTo(this.f, p.track);
          break;
        case 'step':
          this.goTo(this.f, this.t, p.step);
          break;
        case 'refresh':
          null;
          break;
        case 'save_path':
          this.sp.push([this.f, this.t, this.s]);
          break;
        case 'path':
          this.go(p.path);
          break;
        case 'restore_path':
          if (this.sp.length) {
            q = this.sp.pop();
            this.goTo(q[0], q[1], q[2]);
          }
          break;
        case 'add_message':
          m.add(p.type, p.msgs);
          break;
        case 'add_issue':
          i.add(p.type, p.msgs);
          break;
        default:
          Pageflow.__super__.action.call(this, a, p);
      }
      return [r, i, m];
    };

    Pageflow.prototype.setIssues = function(issue_obj) {
      if ((issue_obj != null ? issue_obj.count() : void 0) !== 0) {
        this.issues.addObj(issue_obj);
      }
      return this.invalidateTables(['Issue']);
    };

    Pageflow.prototype.setMessages = function(issue_obj) {
      if ((issue_obj != null ? issue_obj.count() : void 0) !== 0) {
        this.messages.addObj(issue_obj);
      }
      return this.invalidateTables(['Message']);
    };

    Pageflow.prototype.loadTable = function(tbl_nm) {
      var map;
      map = window.EpicMvc['issues$' + this.Epic.appConf().getGroupNm()];
      this.Table[tbl_nm] = (function() {
        switch (tbl_nm) {
          case 'Message':
            return this.messages.asTable(map);
          case 'Issue':
            return this.issues.asTable(map);
          case 'V':
            return [this.Epic.appConf().getVars(this.f, this.t, this.s)];
          default:
            return Pageflow.__super__.loadTable.call(this, tbl_nm);
        }
      }).call(this);
    };

    return Pageflow;

  })(window.EpicMvc.ModelJS);

  window.EpicMvc.Model.Pageflow$Base = Pageflow;

}).call(this);

/*Package/Base/Extras/Push.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  var Push,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Push = (function() {

    function Push(io, host, port, push_url) {
      this._onUpdate = __bind(this._onUpdate, this);

      var f, opts, uri,
        _this = this;
      f = 'Push:';
      this.handlers = {};
      uri = 'http://' + host + ':' + port + '/' + push_url;
      opts = {
        reconnectionDelay: 1000,
        reconnectionDelayMax: 10000,
        reconnectionAttempts: 10
      };
      this.socket = io.connect(uri, opts);
      this.manager = this.socket.io;
      _log2(f, 'manager:', this.manager);
      this.socket.on('connected', this._onConnected);
      this.socket.on('update', this._onUpdate);
      this.socket.on('connect', function() {
        f = 'Push:socket:connect:';
        return _log2(f, 'got connected');
      });
      this.socket.on('disconnect', function(reason) {
        f = 'Push:socket:disconnect:';
        return _log2(f, reason);
      });
      this.socket.on('reconnect_attempt', function(nextAttemptNum) {
        f = 'Push:socket:reconnect_attempt:';
        return _log2(f, 'about to try for the:', nextAttemptNum, 'time');
      });
      this.socket.on('reconnecting', function(attemptNum) {
        f = 'Push:socket:reconnecting:';
        return _log2(f, 'attempting reconnect for the:', attemptNum, 'time');
      });
      this.socket.on('reconnect_error', function(error) {
        f = 'Push:socket:reconnect_error:';
        return _log2(f, error.type, ":", error.message);
      });
      this.socket.on('reconnect', function(attemptNum) {
        f = 'Push:socket:reconnect:';
        return _log2(f, 'success after attempt:', attemptNum);
      });
      this.socket.on('reconnect_failed', function() {
        f = 'Push:socket:reconnect_failed:';
        return _log2(f, 'giving up trying to reconnect');
      });
      this.socket.on('error', function(error) {
        f = 'Push:socket:error:';
        return _log2(f, {
          error: error
        });
      });
    }

    Push.prototype.sync = function(push_handle, syncFunc) {
      var f;
      f = 'Push:sync:';
      _log2(f, push_handle);
      this.handlers[push_handle] = syncFunc;
      return this.socket.emit('listen', push_handle);
    };

    Push.prototype._onConnected = function() {
      var f;
      f = 'Push:_onConnected:';
      return _log2(f, 'connected to server');
    };

    Push.prototype._onUpdate = function(data) {
      var f;
      f = 'Push:_onUpdate:';
      return this.handlers[data.push_handle](data.sync);
    };

    return Push;

  })();

  window.EpicMvc.Extras.Push = Push;

}).call(this);

/*Package/Base/Extras/LoadStrategy.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  var LoadStrategy;

  LoadStrategy = (function() {

    function LoadStrategy(Epic) {
      this.Epic = Epic;
    }

    LoadStrategy.prototype.getArtifact = function(nm, type) {
      var i, pkg, results, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
      results = false;
      if ((_ref = this.reverse_packages) == null) {
        this.reverse_packages = (function() {
          var _i, _ref1, _results;
          _results = [];
          for (i = _i = _ref1 = this.Epic.appconfs.length - 1; _ref1 <= 0 ? _i <= 0 : _i >= 0; i = _ref1 <= 0 ? ++_i : --_i) {
            _results.push(this.Epic.appconfs[i]);
          }
          return _results;
        }).call(this);
      }
      _ref1 = this.reverse_packages;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        pkg = _ref1[_i];
        results = (_ref2 = (_ref3 = window.EpicMvc['view$' + pkg]) != null ? (_ref4 = _ref3[type]) != null ? _ref4[nm] : void 0 : void 0) != null ? _ref2 : false;
        if (results !== false) {
          break;
        }
      }
      if (results === false) {
        console.log('NO FILE FOUND! ' + nm);
      }
      return results;
    };

    LoadStrategy.prototype.getCombinedAppConfs = function() {
      var pkg, result, _i, _len, _ref;
      result = {};
      _ref = this.Epic.appconfs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        window.$.extend(true, result, window.EpicMvc['app$' + pkg]);
      }
      return result;
    };

    LoadStrategy.prototype.fist = function(grp_nm) {
      return window.EpicMvc['fist$' + grp_nm];
    };

    LoadStrategy.prototype.template = function(nm) {
      return this.getArtifact(nm, 'tmpl');
    };

    LoadStrategy.prototype.page = function(nm) {
      return this.getArtifact(nm, 'page');
    };

    LoadStrategy.prototype.part = function(nm) {
      return this.getArtifact(nm, 'part');
    };

    return LoadStrategy;

  })();

  window.EpicMvc.Extras.LoadStrategy$Base = LoadStrategy;

}).call(this);

/*Package/Base/Extras/GlobalDrag.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  var GlobalDrag,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  GlobalDrag = (function() {

    function GlobalDrag(pre_flight) {
      var _this = this;
      this.pre_flight = pre_flight;
      this.data = __bind(this.data, this);

      this.check = __bind(this.check, this);

      this.target_drop = __bind(this.target_drop, this);

      this.target_dragleave = __bind(this.target_dragleave, this);

      this.target_dragenter = __bind(this.target_dragenter, this);

      this.target_dragover = __bind(this.target_dragover, this);

      this.source_dragend = __bind(this.source_dragend, this);

      this.source_dragstart = __bind(this.source_dragstart, this);

      this.update = __bind(this.update, this);

      this.handleDragLeave = __bind(this.handleDragLeave, this);

      this.handleDragEnter = __bind(this.handleDragEnter, this);

      this.handleDragOver = __bind(this.handleDragOver, this);

      this.log3 = function() {};
      this.count_enter = 0;
      this.count_leave = 0;
      this.count_target = 0;
      this.src_elem = false;
      this.src_data = false;
      this.drag_type = false;
      $(function() {
        return $(document).dragenter(_this.handleDragEnter).dragleave(_this.handleDragLeave).dragover(_this.handleDragOver);
      });
    }

    GlobalDrag.prototype.get_type = function(t) {
      this.log3('get_type', typeof t, t);
      if (t === null || t === void 0) {
        return 'BROKEN';
      }
      if (t && typeof t === 'object' && __indexOf.call(t, 'Files') >= 0) {
        t = 'Files';
      }
      if (typeof t !== 'string' || t === 'Text' || -1 !== t.indexOf('/')) {
        return false;
      }
      return t;
    };

    GlobalDrag.prototype.handleDragOver = function(evt) {
      if (this.drag_type === false) {
        return true;
      }
      evt.preventDefault();
      evt.dataTransfer.dropEffect = 'none';
      return false;
    };

    GlobalDrag.prototype.handleDragEnter = function(evt) {
      return this.light(evt, 'global');
    };

    GlobalDrag.prototype.handleDragLeave = function(evt) {
      return this.unlight(evt, 'global');
    };

    GlobalDrag.prototype.update = function(selector) {
      var container,
        _this = this;
      container = $(selector);
      $('.data-drag', container).each(function(ix, el) {
        return $(el).attr('draggable', 'true').dragstart(_this.source_dragstart).dragend(_this.source_dragend);
      });
      return $('.data-drop', container).each(function(ix, el) {
        return $(el).dragover(_this.target_dragover).drop(_this.target_drop).dragenter(_this.target_dragenter).dragleave(_this.target_dragleave);
      });
    };

    GlobalDrag.prototype.source_dragstart = function(e) {
      var $e;
      $e = this.find(e, 'data-drag', false);
      if ($e === false) {
        return false;
      }
      this.src_start($e);
      e.dataTransfer.setData($e.attr('data-drag-type'), $e.attr('data-drag-data'));
      this.log3('start:type/data/$e', $e.attr('data-drag-type'), $e.attr('data-drag-data'), $e);
      return $e.addClass('active-source');
    };

    GlobalDrag.prototype.source_dragend = function(e) {
      var $e;
      $e = $(e.target);
      $e.removeClass('active-source');
      return this.src_end();
    };

    GlobalDrag.prototype.target_dragover = function(e) {
      var $e;
      if (this.drag_type === false) {
        return;
      }
      $e = this.find(e, 'active-target');
      if ($e === false) {
        e.dataTransfer.dropEffect = 'none';
        return true;
      }
      e.preventDefault();
      return false;
    };

    GlobalDrag.prototype.target_dragenter = function(e) {
      var $e;
      this.light(e, 'target');
      $e = this.find(e, 'active-target');
      if ($e === false) {
        return;
      }
      this.count_target += 1;
      return $e.addClass('active-drop');
    };

    GlobalDrag.prototype.target_dragleave = function(e) {
      var $e;
      this.unlight(e, 'target');
      $e = this.find(e, 'active-target');
      if ($e === false) {
        return;
      }
      this.count_target -= 1;
      if (this.count_target === 0) {
        return $e.removeClass('active-drop');
      }
    };

    GlobalDrag.prototype.target_drop = function(e) {
      var $e, action, drag_type, drop_data, params;
      if (this.drag_type === false) {
        return true;
      }
      e.stopPropagation();
      e.preventDefault();
      $e = this.find(e, 'active-target');
      if ($e === false) {
        return true;
      }
      drag_type = this.drag_type;
      action = $e.attr('data-drop-' + drag_type);
      drop_data = this.data($e, 'drop');
      params = $.extend({}, this.src_data, drop_data, {
        event: e
      });
      this.src_end();
      window.EpicMvc.Epic.makeClick(false, action, params, true);
      return false;
    };

    GlobalDrag.prototype.src_start = function($e) {
      this.drag_type = this.get_type($e.attr('data-drag-type'));
      this.log3('src_start drag_type/$e', this.drag_type, $e);
      if (this.drag_type === false) {
        return;
      }
      this.src_elem = $e;
      this.src_data = this.data($e, 'drag');
      this.log3('src_start src_data', this.src_data);
    };

    GlobalDrag.prototype.src_end = function() {
      $('.active-target').removeClass('active-target');
      this.count_target = 0;
      this.count_enter = 0;
      this.count_leave = 0;
      this.src_data = false;
      this.src_elem = false;
      this.drag_type = false;
    };

    GlobalDrag.prototype.light = function(evt, src) {
      var Data, Pre_flight, src_data, type;
      if (this.count_enter === 0) {
        this.count_enter = 1;
        if (this.drag_type === false) {
          this.drag_type = this.get_type(evt.dataTransfer.types);
        }
        type = this.drag_type;
        src_data = this.src_data;
        Data = this.data;
        Pre_flight = this.pre_flight;
        this.log3('light0,type/src/src_data', type, src, src_data);
        $('[data-drop-' + type + ']').not('.active-source').filter(function() {
          if (src_data === false) {
            return true;
          }
          return Pre_flight($(this).attr('data-drop-' + type), $.extend({}, src_data, Data($(this), 'drop')));
        }).addClass('active-target');
        return this.check(false);
      } else {
        return this.count_enter += 1;
      }
    };

    GlobalDrag.prototype.unlight = function(evt, src) {
      return this.count_leave += 1;
    };

    GlobalDrag.prototype.check = function(enter, leave) {
      var current_enter, current_leave,
        _this = this;
      if (enter === 0) {
        return;
      }
      if (enter && enter === leave && enter === this.count_enter && leave === this.count_leave) {
        $('.active-target').removeClass('active-target');
        this.count_enter = 0;
        this.count_leave = 0;
        return;
      }
      current_enter = this.count_enter;
      current_leave = this.count_leave;
      return (function(current_enter, current_leave) {
        return setTimeout((function() {
          return _this.check(current_enter, current_leave);
        }), 200);
      })(current_enter, current_leave);
    };

    GlobalDrag.prototype.data = function($e, drag_or_drop) {
      var data;
      data = $e === false ? drag_or_drop : $e.attr('data-' + drag_or_drop + '-data');
      if (data && data.length) {
        return JSON.parse(data);
      }
      return {};
    };

    GlobalDrag.prototype.find = function(evt, class_nm, traverse) {
      var $e, $e_parent;
      class_nm = '.' + class_nm;
      $e = $(evt.target);
      if ($e.is(class_nm)) {
        return $e;
      }
      if (traverse !== false) {
        $e_parent = $e.parent(class_nm);
        if ($e_parent.is(class_nm)) {
          return $e_parent;
        }
      }
      return false;
    };

    return GlobalDrag;

  })();

  window.EpicMvc.Extras.GlobalDrag = GlobalDrag;

}).call(this);

window.EpicMvc.view$Base={
tmpl: {
"starter": ["",[4],"page",{},"\n",[1]]}, page: {
"page": ["<b>A Base Page</b>\n",[]]}, part: {
}};

/*Package/bootstrap/Extras/bootstrap.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var bootstrap, _log2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _log2 = function() {};

  bootstrap = (function() {

    function bootstrap(Epic, content_watch) {
      var _this = this;
      this.Epic = Epic;
      this.content_watch = content_watch;
      this.onPopState = __bind(this.onPopState, this);

      this.very_first = true;
      this.was_popped = false;
      this.was_modal = false;
      this.unloadMsgs = {};
      this.baseUrl = window.document.location.pathname;
      this.baseId = "epic-new-page";
      this.modalId = "epic-new-modal";
      this.basePage = '<div id="' + this.baseId + '"></div><div id="' + this.modalId + '"></div>';
      $('body').html(this.basePage);
      setTimeout((function() {
        return _this.onPopState(true);
      }), 0);
      window.onpopstate = this.onPopState;
      $(document).on('hidden.bs.modal', function() {
        return _this.Epic.makeClick(false, 'close_modal', {}, true);
      });
      true;
    }

    bootstrap.prototype.UnloadMessage = function(ix, msg) {
      var new_msg, nm, rec;
      if (msg) {
        this.unloadMsgs[ix] = msg;
      } else {
        delete this.unloadMsgs[ix];
      }
      new_msg = (function() {
        var _ref, _results;
        _ref = this.unloadMsgs;
        _results = [];
        for (nm in _ref) {
          rec = _ref[nm];
          _results.push(rec);
        }
        return _results;
      }).call(this);
      new_msg = new_msg.length ? new_msg.join("\n") : null;
      return window.onbeforeunload = function() {
        return new_msg;
      };
    };

    bootstrap.prototype.getFormData = function() {
      return $('form').serializeArray();
    };

    bootstrap.prototype.form_action = function(out_attrs, click_index, action, value) {
      var o;
      return o = "<button " + (out_attrs.join(' ')) + " onclick=\"EpicMvc.Epic.click(" + click_index + ");return false;\">" + value + "</button>";
    };

    bootstrap.prototype.link_action = function(click_index, id, attr_text, text) {
      var o;
      return o = "<a" + id + " href=\"#\" onclick=\"EpicMvc.Epic.click(" + click_index + ");return false;\"" + attr_text + ">" + text + "</a>";
    };

    bootstrap.prototype.doControl = function(oFi, c_nm, val, c_ty, c_data, wd, mx_len, do_one_radio) {
      var attrs, btn_id, button, choice_option, choice_value, choices, from_id, html, i, id, inputs, msg_id, msgs, s, size, split, to_id, _i, _j, _len, _ref, _ref1;
      html = '';
      c_ty = c_ty.split(':')[0];
      if (c_ty === 'radio' && do_one_radio) {
        c_ty = 'do_one_radio';
      }
      if (val == null) {
        val = '';
      }
      switch (c_ty) {
        case 'upload':
          id = 'U' + this.Epic.nextCounter();
          from_id = 'fr' + id;
          to_id = 'to' + id;
          btn_id = 'bt' + id;
          msg_id = 'ms' + id;
          button = "<span data-theme=\"a\" class=\"ui-btn ui-btn-corner-all ui-shadow ui-btn-up-a\" aria-disabled=\"false\" id=\"" + btn_id + "\">\n<span class=\"ui-btn-inner ui-btn-corner-all\" aria-hidden=\"true\">\n<span class=\"ui-btn-text\">Upload</span></span></span>";
          msgs = "<span class=\"qq-message\" id=\"" + msg_id + "\">" + (oFi.getUploadedMsg(c_nm, val)) + "</span>";
          inputs = "<input class=\"ui-input-text\" type=\"file\" style=\"display:none\" id=\"" + from_id + "\" name=\"upload_" + c_nm + "\" value=\"" + val + "\" size=\"" + wd + "\">\n<input type=\"hidden\" id=\"" + to_id + "\" name=\"" + c_nm + "\" value=\"" + val + "\">";
          html = "<table style=\"display:inline-block; width:60%\">\n	<tr>\n		<td style=\"width:120px\">" + button + "</td>\n		<td>" + msgs + "</td>\n		<td>" + inputs + "</td>\n	</tr>\n</table>";
          oFi.haveUpload(c_nm, from_id, to_id, btn_id, msg_id);
          break;
        case 'textarea':
          attrs = " name=\"" + c_nm + "\"";
          split = c_data.split(' ');
          for (i = _i = 0, _ref = split.length; _i < _ref; i = _i += 2) {
            attrs += ' ' + split[i].toLowerCase() + '="' + split[i + 1] + '"';
          }
          html += "<textarea" + attrs + ">" + (window.EpicMvc.escape_html(val)) + "</textarea>";
          break;
        case 'password':
        case 'text':
          html += "<input class=\"ui-input-text\" type=\"" + (c_ty.toLowerCase()) + "\" name=\"" + c_nm + "\" value=\"" + val + "\" size=\"" + wd + "\">";
          break;
        case 'do_one_radio':
        case 'radio':
          break;
        case 'pulldown':
          choices = oFi.getChoices(c_nm);
          size = wd ? " size=\"" + wd + "\"" : '';
          html = "<select name=\"" + c_nm + "\"" + size + " data-native-menu=\"false\">";
          _ref1 = choices.options;
          for (i = _j = 0, _len = _ref1.length; _j < _len; i = ++_j) {
            choice_option = _ref1[i];
            choice_value = choices.values[i];
            s = choice_value === val ? ' selected="selected"' : '';
            html += "\n<option value=\"" + (window.EpicMvc.escape_html(choice_value)) + "\"" + s + ">\n	" + (window.EpicMvc.escape_html(choice_option)) + "</option>";
          }
          html += "\n</select>";
      }
      return html;
    };

    bootstrap.prototype.onPopState = function(event) {
      var f, req_inx;
      f = 'E:bootstrap.onPopState: ';
      _log2(f, {
        was_popped: this.was_popped,
        very_first: this.very_first,
        special: event === true,
        state: event === true ? 'XX' : event.state
      });
      if (event === true || !event.state) {
        if (this.was_popped || !this.very_first) {
          return;
        }
      }
      this.was_popped = true;
      if (this.very_first) {
        req_inx = this.Epic.request().addLink({
          _a: 'browser_hash',
          hash: location.hash.substr(1)
        });
        this.Epic.click(req_inx);
      } else {
        if (event.state) {
          this.Epic.setModelState(event.state);
        }
        this.Epic.renderSecure();
      }
    };

    bootstrap.prototype.render = function(content, history, click_index, modal) {
      var container, f, watch, _i, _len, _ref;
      f = 'E:bootstrap.render2: ';
      _log2(f, history, modal, this.was_modal);
      if (typeof history === 'undefined') {
        throw new Error('History is hosed!');
      }
      if (this.was_modal) {
        window.$('#' + this.modalId + '>div.modal').modal('hide');
        window.$('.modal-backdrop').remove();
        $('#' + this.modalId).html('');
      }
      if (modal) {
        container = '#' + this.modalId;
        $(container).html(content);
        window.$('#' + this.modalId + ' div.modal').modal();
      } else {
        container = '#' + this.baseId;
        $(container).html(content);
      }
      _ref = this.content_watch;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        watch = _ref[_i];
        watch(container);
      }
      this.handleRenderState(history, click_index);
      this.was_modal = modal;
      this.was_popped = false;
      this.very_first = false;
    };

    bootstrap.prototype.handleRenderState = function(history, click_index) {
      var displayHash, f, model_state, new_hash, _base, _base1;
      f = 'E:bootstrap.handleRenderState:' + history + ':' + click_index;
      _log2(f, {
        vf: this.very_first,
        wp: this.was_popped
      });
      if (!history) {
        return;
      }
      displayHash = this.very_first ? '' : 'click-' + click_index;
      new_hash = this.Epic.getDomCache();
      if (new_hash === false) {
        new_hash = this.Epic.getExternalUrl();
      }
      if (new_hash !== false) {
        displayHash = new_hash;
      }
      model_state = this.Epic.getModelState();
      if (this.very_first || history === 'replace') {
        if (typeof (_base = window.history).replaceState === "function") {
          _base.replaceState(model_state, displayHash, '#' + displayHash);
        }
      } else if (!this.was_popped && history === true) {
        if (typeof (_base1 = window.history).pushState === "function") {
          _base1.pushState(model_state, displayHash, '#' + displayHash);
        }
        window.document.title = displayHash;
      }
    };

    return bootstrap;

  })();

  window.EpicMvc.Extras.bootstrap$bootstrap = bootstrap;

}).call(this);

window.EpicMvc.view$bootstrap={
tmpl: {
}, page: {
}, part: {
"fist_default": ["",[132,5,13],"foreach",{"table":"Tag/Control"},"\n",[12],"if",{"val":["",["varGet2",["Control","type","lc",null]],""],"eq":"hidden"},["\n\t<input type=\"",["varGet2",["Control","type","lc",null]],"\" name=\"",["varGet2",["Control","name",null,null]],"\" value=\"",["varGet2",["Control","value",null,null]],"\">\n"],"","","","\n",[128,17,29,45,53,61,69,85,101,117],"if",{"val":["",["varGet2",["Control","type","lc",null]],""],"ne":"hidden"},"\n\n",[28,21],"if",{"name":"req","set":["",["varGet3",["Tag","Form","show_req",null,null]],""]},"\n\t",[24],"if",{"name":"req","set":["",["varGet2",["Control","req",null,null]],""]},"\n","","","",["\n<div class=\"control-group",["varGet2",["Control","issue","..error",null]],"\">\n\n"],[44,33],"if",{"val":["",["varGet2",["Control","type","lc",null]],""],"ne":"yesno"},["\n\t<label for=\"",["varGet2",["Control","name",null,null]],"\" class=\"control-label\">"],[40],"if_true",{"name":"req"},"<span class=\"form-req\">*</span>","","","",["",["varGet2",["Control","label",null,null]],"</label>\n"],"","","","\n<div class=\"controls\">\n\n",[52],"if",{"val":["",["varGet2",["Control","type",null,null]],""],"eq":"textarea"},["\n\t<textarea name=\"",["varGet2",["Control","name",null,null]],"\" ",["varGet2",["Control","attrs",null,null]]," ",["varGet3",["Tag","If","req",".required=\"\"",null]],">",["varGet2",["Control","value","esc",null]],"</textarea>\n"],"","","","\n\n",[60],"if",{"val":["",["varGet2",["Control","type","lc",null]],""],"eq":"text"},["\n\t<input type=\"",["varGet2",["Control","type","lc",null]],"\" name=\"",["varGet2",["Control","name",null,null]],"\" value=\"",["varGet2",["Control","value",null,null]],"\" size=\"",["varGet2",["Control","width",null,null]],"\" ",["varGet3",["Tag","If","req",".required=\"\"",null]],">\n"],"","","","\n\n",[68],"if",{"val":["",["varGet2",["Control","type","lc",null]],""],"eq":"password"},["\n\t<input type=\"",["varGet2",["Control","type","lc",null]],"\" name=\"",["varGet2",["Control","name",null,null]],"\" value=\"",["varGet2",["Control","value",null,null]],"\" size=\"",["varGet2",["Control","width",null,null]],"\" ",["varGet3",["Tag","If","req",".required=\"\"",null]],">\n"],"","","","\n\n",[84,73],"if",{"val":["",["varGet2",["Control","type","lc",null]],""],"eq":"yesno"},["\n\t<label for=\"",["varGet2",["Control","id",null,null]],"\" class=\"control-label\">\n\t\t<input type=\"checkbox\" name=\"",["varGet2",["Control","name",null,null]],"\" id=\"",["varGet2",["Control","id",null,null]],"\" value=\"",["varGet2",["Control","yes_val",null,null]],"\"",["varGet2",["Control","selected","..checked",null]],">\n\t"],[80],"if_true",{"name":"req"},"<span class=\"form-req\">*</span>","","","",["",["varGet2",["Control","label",null,null]],"</label>\n"],"","","","\n\n",[100,89],"if",{"val":["",["varGet2",["Control","type",null,null]],""],"eq":"radio"},"\n",[96],"foreach",{"table":"Control/Choice"},["\n\t<label for=\"",["varGet2",["Control","id",null,null]],"-",["varGet2",["Choice","option",null,null]],"\" class=\"control-sublabel\">\n\t<input type=\"radio\" name=\"",["varGet2",["Control","name",null,null]],"\" id=\"",["varGet2",["Control","id",null,null]],"-",["varGet2",["Choice","option",null,null]],"\" value=\"",["varGet2",["Choice","value","esc",null]],"\"",["varGet2",["Choice","selected","..checked",null]],">\n\t",["varGet2",["Choice","option",null,null]],"</label>\n"],"","","","\n","","","","\n\n",[116,105],"if",{"val":["",["varGet2",["Control","type",null,null]],""],"eq":"pulldown"},["\n\t<select name=\"",["varGet2",["Control","name",null,null]],"\"",["varGet2",["Control","size","..size=\"%\"",null]],">\n\t"],[112],"foreach",{"table":"Control/Choice"},["\n\t\t<option value=\"",["varGet2",["Choice","value","esc",null]],"\"",["varGet2",["Choice","selected","..selected",null]],">",["varGet2",["Choice","option",null,null]],"</option>\n\t"],"","","","\n\t</select>\n","","","","\n\n",[124],"if",{"set":["",["varGet2",["Control","issue",null,null]],""]},["\n<span class=\"help-block field-error\">",["varGet2",["Control","issue",null,null]],"</span>\n"],"","","","\n\n</div> \n</div> \n","","",""," \n","","","","\n",[140],"if",{"set":["",["varGet3",["Tag","Form","show_req",null,null]],"",["varGet3",["Tag","Form","any_req",null,null]],""]},"\n<span class=\"form-req-note\">* = Required field</span>\n","","","","\n",[1,133]],
"fist_inline": ["",[84,5,17,25,33,41,57,73],"foreach",{"table":"Tag/Control"},"\n",[16,9],"if",{"name":"req","set":["",["varGet3",["Tag","Form","show_req",null,null]],""]},"\n\t",[12],"if",{"name":"req","set":["",["varGet2",["Control","req",null,null]],""]},"\n","","","","\n\n",[24],"if",{"val":["",["varGet2",["Control","type",null,null]],""],"eq":"textarea"},["\n\t<textarea name=\"",["varGet2",["Control","name",null,null]],"\" ",["varGet2",["Control","attrs",null,null]]," placeholder=\"",["varGet2",["Control","label",null,null]],"\" ",["varGet3",["Tag","If","req",".required=\"\".title=\"Required\"",null]],">",["varGet2",["Control","value","esc",null]],"</textarea>\n"],"","","","\n\n",[32],"if",{"val":["",["varGet2",["Control","type","lc",null]],""],"eq":"text"},["\n\t<input type=\"",["varGet2",["Control","type","lc",null]],"\" name=\"",["varGet2",["Control","name",null,null]],"\" value=\"",["varGet2",["Control","value",null,null]],"\" size=\"",["varGet2",["Control","width",null,null]],"\" placeholder=\"",["varGet2",["Control","label",null,null]],"\" ",["varGet3",["Tag","If","req",".required=\"\".title=\"Cannot be blank\"",null]],">\n"],"","","","\n\n",[40],"if",{"val":["",["varGet2",["Control","type","lc",null]],""],"eq":"password"},["\n\t<input type=\"",["varGet2",["Control","type","lc",null]],"\" name=\"",["varGet2",["Control","name",null,null]],"\" value=\"",["varGet2",["Control","value",null,null]],"\" size=\"",["varGet2",["Control","width",null,null]],"\" placeholder=\"",["varGet2",["Control","label",null,null]],"\" ",["varGet3",["Tag","If","req",".required=\"\"",null]],">\n"],"","","","\n\n",[56,45],"if",{"val":["",["varGet2",["Control","type",null,null]],""],"eq":"radio"},["\n\t<label for=\"",["varGet2",["Control","name",null,null]],"\">",["varGet2",["Control","label",null,null]],"</label>\n"],[52],"foreach",{"table":"Control/Choice"},["\n\t<label for=\"",["varGet2",["Control","id",null,null]],"-",["varGet2",["Choice","option",null,null]],"\">\n\t<input type=\"radio\" name=\"",["varGet2",["Control","name",null,null]],"\" id=\"",["varGet2",["Control","id",null,null]],"-",["varGet2",["Choice","option",null,null]],"\" value=\"",["varGet2",["Choice","value","esc",null]],"\"",["varGet2",["Choice","selected","..selected",null]],">\n\t",["varGet2",["Choice","option",null,null]],"</label>\n"],"","","","\n","","","","\n\n",[72,61],"if",{"val":["",["varGet2",["Control","type",null,null]],""],"eq":"pulldown"},["\n\t<label for=\"",["varGet2",["Control","name",null,null]],"\">",["varGet2",["Control","label",null,null]],"</label>\n\t<select name=\"",["varGet2",["Control","name",null,null]],"\"",["varGet2",["Control","size","..size=\"%\"",null]],">\n\t"],[68],"foreach",{"table":"Control/Choice"},["\n\t\t<option value=\"",["varGet2",["Choice","value","esc",null]],"\"",["varGet2",["Choice","selected","..selected",null]],">",["varGet2",["Choice","option",null,null]],"</option>\n\t"],"","","","\n\t</select>\n","","","","\n\n",[80],"if",{"set":["",["varGet2",["Control","issue",null,null]],""]},["\n<span class=\"help-inline field-error\">",["varGet2",["Control","issue",null,null]],"</span>\n"],"","","","\n\n","","","","\n",[1]]}};

/*Package/BaseDevl/app.coffee*/// Generated by CoffeeScript 1.4.0
(function() {

  window.EpicMvc.app$BaseDevl = {
    OPTIONS: {
      frame: {
        MMM_BaseDevl: 'bdevl'
      }
    },
    MODELS: {
      Tag: {
        "class": "TagExe$BaseDevl",
        inst: "bdT"
      },
      Devl: {
        "class": "Devl$BaseDevl",
        inst: "bdD"
      }
    },
    CLICKS: {
      dbg_toggle: {
        call: 'Devl/toggle',
        use_fields: 'what'
      },
      dbg_refresh: {
        call: 'Devl/clear_cache'
      },
      dbg_open_model: {
        call: 'Devl/open_model',
        use_fields: 'name'
      },
      dbg_open_table: {
        call: 'Devl/open_table',
        use_fields: 'name'
      },
      dbg_open_subtable: {
        call: 'Devl/open_subtable',
        use_fields: 'name'
      },
      dbg_close_subtable: {
        call: 'Devl/close_subtable'
      },
      dbg_table_left: {
        call: 'Devl/table_left'
      },
      dbg_table_right: {
        call: 'Devl/table_right'
      },
      dbg_table_col_set: {
        call: 'Devl/table_col_set',
        use_fields: 'col'
      },
      dbg_table_by_row: {
        call: 'Devl/table_row_set'
      }
    }
  };

}).call(this);

/*Package/BaseDevl/Model/Tag.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var TagExe,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TagExe = (function(_super) {

    __extends(TagExe, _super);

    function TagExe() {
      return TagExe.__super__.constructor.apply(this, arguments);
    }

    TagExe.prototype.resetForNextRequest = function(state) {
      TagExe.__super__.resetForNextRequest.call(this, state);
      this.bd_template = this.viewExe.template;
      this.bd_page = this.viewExe.page;
      this.errors_cache = {
        _COUNT: 0
      };
      return this.in_defer = false;
    };

    TagExe.prototype.Opts = function() {
      return (this.Epic.getViewTable('Devl/Opts'))[0];
    };

    TagExe.prototype._Error = function(type, key, e) {
      var msg, prefix, _base, _ref;
      if ((_ref = (_base = this.errors_cache)[type]) == null) {
        _base[type] = {};
      }
      if (!(key in this.errors_cache[type])) {
        this.errors_cache[type][key] = e;
        this.errors_cache._COUNT++;
        if (this.errors_cache._COUNT < 5) {
          _log2('### _Error type/key/e', type, key, e);
          msg = ((("" + key + "\n\n" + e.message).replace(/&lt;/g, '<')).replace(/&gt;/g, '>')).replace(/&amp;/g, '&');
          return prefix = type === 'varGet2' || type === 'varGet3' ? 'Variable reference' : 'Tag';
        }
      }
    };

    TagExe.prototype.Tag_defer = function(oPt) {
      var out;
      this.in_defer = true;
      out = TagExe.__super__.Tag_defer.call(this, oPt);
      this.in_defer = false;
      return out;
    };

    TagExe.prototype.Tag_debug = function(oPt) {
      var out, save;
      save = this.Opts;
      this.Opts = function() {
        return {};
      };
      out = this.viewExe.doAllParts(oPt.parts);
      this.Opts = save;
      return out;
    };

    TagExe.prototype.getTable = function(nm) {
      var row, _i, _len, _ref;
      if (this.Opts().form !== true) {
        return TagExe.__super__.getTable.call(this, nm);
      }
      switch (nm) {
        case 'Control':
        case 'Form':
          if (this.fist_table.Debug !== true) {
            _ref = this.fist_table.Control;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              row = _ref[_i];
              row.label += "<span class=\"dbg-tag-box\" title=\"" + row.name + "(" + row.type + ")\">#</span>";
            }
            this.fist_table.Debug = true;
          }
      }
      return TagExe.__super__.getTable.call(this, nm);
    };

    TagExe.prototype.Tag_form_part = function(oPt) {
      var c, g, inside, v, _ref, _ref1, _ref2;
      try {
        if (!oPt.attrs.form) {
          throw Error("Missing 'form' attribute");
        }
        g = this.Epic.getGroupNm();
        c = this.Epic.getFistGroupCache().getCanonicalFist(g, oPt.attrs.form);
        v = this.Epic.oAppConf.getFistView(g, c);
        if (!v) {
          throw Error("app.conf requires MODELS: ... forms=\"...," + c + "\"");
        }
        if (!('fistLoadData' in this.Epic.getInstance(v))) {
          throw Error("Your model (" + v + ") must have a method fistLoadData");
        }
      } catch (e) {
        _log2('##### Error in form-part', (_ref = oPt.attrs.part) != null ? _ref : 'fist_default', e, e.stack);
        this._Error('form', this._TagText(oPt, true), e);
        return this._Err('tag', oPt, e);
      }
      try {
        inside = '';
        if (this.Opts().form === true) {
          return this._Div('tag', oPt, inside, TagExe.__super__.Tag_form_part.call(this, oPt));
        }
        if (this.Opts().file === true) {
          return "<div class=\"dbg-part-box\" title=\"" + ((_ref1 = oPt.attrs.part) != null ? _ref1 : 'fist_default') + ".part.html (" + oPt.attrs.form + ")\">.</div>" + (TagExe.__super__.Tag_form_part.call(this, oPt));
        }
        return TagExe.__super__.Tag_form_part.call(this, oPt);
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        _log2('##### Error in form-part', (_ref2 = oPt.attrs.part) != null ? _ref2 : 'fist_default', e, e.stack);
        this._Error('form_part', this._TagText(oPt, true), e);
        return this._Err('tag', oPt, e);
      }
    };

    TagExe.prototype.Tag_page_part = function(oPt) {
      try {
        if (this.Opts().file !== true || this.in_defer) {
          return TagExe.__super__.Tag_page_part.call(this, oPt);
        }
        return "<div class=\"dbg-part-box\" title=\"" + oPt.attrs.part + ".part.html\">.</div>" + (TagExe.__super__.Tag_page_part.call(this, oPt));
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        _log2('##### Error in page-part', oPt.attrs.part, e, e.stack);
        return "<pre>&lt;epic:page_part part=\"" + oPt.attrs.part + "\"&gt;<br>" + e + "<br>" + e.stack + "</pre>";
      }
    };

    TagExe.prototype.Tag_page = function(oPt) {
      try {
        if (this.viewExe.current === false) {
          throw new Error("Missing view page or template '");
        }
        if (!this.viewExe.current === void 0) {
          throw new Error("Possibly too many page tags");
        }
        if (this.Opts().file !== true) {
          return TagExe.__super__.Tag_page.call(this, oPt);
        }
        return "<div class=\"dbg-part-box\" title=\"" + this.bd_template + ".tmpl.html\">T</div>\n<div class=\"dbg-part-box\" title=\"" + this.bd_page + ".page.html\">P</div>\n" + (TagExe.__super__.Tag_page.call(this, oPt));
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        _log2('##### Error in page', this.bd_page, e, e.stack);
        this._Error('page', this._TagText(oPt, true), e);
        return this._Err('page', oPt, e);
      }
    };

    TagExe.prototype.varGet3 = function(view_nm, tbl_nm, col_nm, format_spec, custom_spec, give_error) {
      var key, t_custom_spec, t_format_spec, val;
      try {
        val = TagExe.__super__.varGet3.call(this, view_nm, tbl_nm, col_nm, format_spec, custom_spec);
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        if (val === void 0) {
          throw new Error("Column/spec does not exist (" + view_nm + "/" + tbl_nm + "/" + col_nm + t_format_spec + t_custom_spec + ").");
        }
      } catch (e) {
        if (this.Epic.isSecurityError(e || give_error)) {
          throw e;
        }
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        key = '&amp;' + view_nm + '/' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
        _log2('##### Error in varGet3 key=', key, e);
        this._Error('varGet3', key, e);
        throw e;
      }
      return val;
    };

    TagExe.prototype.varGet2 = function(tbl_nm, col_nm, format_spec, custom_spec, sub_nm, give_error) {
      var key, t_custom_spec, t_format_spec, val;
      try {
        val = TagExe.__super__.varGet2.call(this, tbl_nm, col_nm, format_spec, custom_spec, sub_nm);
      } catch (e) {
        if (this.Epic.isSecurityError(e || give_error)) {
          throw e;
        }
        _log2('##### varGet2', "&" + tbl_nm + "/" + col_nm + ";", e, e.stack);
        val = "&amp;" + tbl_nm + "/" + col_nm + ";[" + e.message + "] <pre>" + e.stack + "</pre>";
      }
      if (val === void 0) {
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        key = '&amp;' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
        _log2('##### Error in varGet2 key=', key, 'undefined');
        this._Error('varGet2', key, {
          message: 'is undefined',
          stack: "\n"
        });
        val = "&amp;" + tbl_nm + "/" + col_nm + ";";
      }
      return val;
    };

    TagExe.prototype.Tag_if = function(oPt) {
      var inside;
      try {
        if (this.Opts().tag2 !== true || this.in_defer) {
          return TagExe.__super__.Tag_if.call(this, oPt);
        }
        inside = '';
        return this._Div('tag', oPt, inside, TagExe.__super__.Tag_if.call(this, oPt));
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        this._Error('if', this._TagText(oPt, true), e);
        return this._Err('tag', oPt, e);
      }
    };

    TagExe.prototype.Tag_foreach = function(oPt) {
      var at_table, cols, inside, lh, nm, oMd, rh, tbl, _ref;
      try {
        at_table = this.viewExe.handleIt(oPt.attrs.table);
        _ref = at_table.split('/'), lh = _ref[0], rh = _ref[1];
        if (lh in this.info_foreach) {
          if (!(rh in this.info_foreach[lh].row)) {
            throw new Error("Sub-table missing: (" + rh + ")");
          }
          tbl = this.info_foreach[lh].row[rh];
        } else {
          oMd = this.Epic.getInstance(lh);
          tbl = oMd.getTable(rh);
        }
        if (this.Opts().tag !== true || this.in_defer) {
          return TagExe.__super__.Tag_foreach.call(this, oPt);
        }
        if (tbl != null ? tbl.length : void 0) {
          inside = 'len:' + tbl.length;
          cols = (function() {
            var _results;
            _results = [];
            for (nm in tbl[0]) {
              _results.push(nm);
            }
            return _results;
          })();
          inside += "<span title=\"" + (cols.join(', ')) + "\">Cols:" + cols.length + "<span>";
        } else {
          inside = 'empty';
        }
        return this._Div('tag', oPt, inside, TagExe.__super__.Tag_foreach.call(this, oPt));
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        return this._Err('tag', oPt, e);
      }
    };

    TagExe.prototype.Tag_form_action = function(oPt) {
      var action, inside;
      try {
        if (!('action' in oPt.attrs)) {
          throw new Error("Missing 'action' attribute");
        }
        if (!('title' in oPt.attrs)) {
          action = this.viewExe.handleIt(oPt.attrs.action);
          oPt.attrs.title = action;
        }
        if (this.Opts().tag !== true) {
          return TagExe.__super__.Tag_form_action.call(this, oPt);
        }
        inside = '';
        return this._Div('tag', oPt, inside, TagExe.__super__.Tag_form_action.call(this, oPt));
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        this._Error('form_action', this._TagText(oPt, true), e);
        return this._Err('tag', oPt, e);
      }
    };

    TagExe.prototype.Tag_link_action = function(oPt) {
      var action, inside;
      try {
        if (!('action' in oPt.attrs)) {
          throw new Error("Missing 'action' attribute");
        }
        if (!('title' in oPt.attrs)) {
          action = this.viewExe.handleIt(oPt.attrs.action);
          oPt.attrs.title = action;
        }
        if (this.Opts().tag !== true) {
          return TagExe.__super__.Tag_link_action.call(this, oPt);
        }
        inside = '';
        return this._Div('tag', oPt, inside, TagExe.__super__.Tag_link_action.call(this, oPt));
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        this._Error('link_action', this._TagText(oPt, true), e);
        return this._Err('tag', oPt, e);
      }
    };

    TagExe.prototype.Tag_explain = function(oPt) {
      return JSON.stringify(this.Epic.getViewTable(oPt.attrs.table));
    };

    TagExe.prototype._TagText = function(oPt, asError) {
      var ans, attrs, col_nm, custom_spec, format_spec, item, key, klass, list, sub_nm, t_custom_spec, t_format_spec, tag, tbl_nm, text, val, view_nm, _i, _len, _ref, _ref1, _ref2;
      tag = this.viewExe.current[oPt.parts + 1];
      attrs = [];
      _ref = oPt.attrs;
      for (key in _ref) {
        val = _ref[key];
        if (typeof val === 'object') {
          list = val;
          val = '';
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            item = list[_i];
            text = false;
            ans = '';
            if (item[0] === 'varGet3') {
              _ref1 = item[1], view_nm = _ref1[0], tbl_nm = _ref1[1], col_nm = _ref1[2], format_spec = _ref1[3], custom_spec = _ref1[4];
              t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
              t_custom_spec = custom_spec ? '#' + custom_spec : '';
              text = '&' + view_nm + '/' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
              if (!asError) {
                ans = (function() {
                  try {
                    return this.varGet3(view_nm, tbl_nm, col_nm, format_spec, custom_spec, true);
                  } catch (e) {
                    return e.message;
                  }
                }).call(this);
              }
            }
            if (item[0] === 'varGet2') {
              _ref2 = item[1], tbl_nm = _ref2[0], col_nm = _ref2[1], format_spec = _ref2[2], custom_spec = _ref2[3], sub_nm = _ref2[4];
              t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
              t_custom_spec = custom_spec ? '#' + custom_spec : '';
              text = '&' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
              if (!asError) {
                ans = (function() {
                  try {
                    return this.varGet2(tbl_nm, col_nm, format_spec, custom_spec, sub_nm, true);
                  } catch (e) {
                    return e.message;
                  }
                }).call(this);
              }
            }
            val += text === false ? item : "<span title=\"" + ans + "\">" + text + "</span>";
          }
        }
        attrs.push("" + key + "=\"" + val + "\"");
      }
      if (klass) {
        klass = " class=\"" + klass + "\"";
      }
      return "&lt;epic:" + tag + " " + (attrs.join(' ')) + "&gt;";
    };

    TagExe.prototype._Div = function(type, oPt, inside, after) {
      if (after == null) {
        after = '';
      }
      return "<div class=\"dbg-" + type + "-box\">" + (this._TagText(oPt)) + inside + "</div>" + after;
    };

    TagExe.prototype._Err = function(type, oPt, e) {
      var stack, title;
      _log2('### _Err type/oPt/e', type, oPt, {
        e: e,
        m: e.message,
        s: e.stack
      });
      stack = this.Opts().stack ? "<pre>\n" + e.stack + "</pre>" : '';
      title = (e.stack.split('\n'))[1];
      return "<div class=\"dbg-" + type + "-error-box\">\n" + (this._TagText(oPt, true)) + "<br><span class=\"dbg-" + type + "-error-msg\" title=\"" + title + "\">" + e.message + "</span>\n</div>" + stack;
    };

    return TagExe;

  })(window.EpicMvc.Model.TagExe$Base);

  window.EpicMvc.Model.TagExe$BaseDevl = TagExe;

}).call(this);

/*Package/BaseDevl/Model/Devl.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  var Devl,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Devl = (function(_super) {

    __extends(Devl, _super);

    function Devl(Epic, view_nm) {
      Devl.__super__.constructor.call(this, Epic, view_nm);
      this.opts = {
        file: false,
        tag: false,
        tag2: false,
        form: false,
        model: false,
        stack: false
      };
      this.open_model = '';
      this.open_table = '';
      this.open_table_stack = [];
      this.table_row_cnt = 0;
      this.table_by_col = false;
      this.table_col = false;
    }

    Devl.prototype.eventNewRequest = function() {
      var _this = this;
      this.invalidateTables(true);
      return setTimeout((function() {
        return _this.invalidateTables(true);
      }), 2000);
    };

    Devl.prototype.action = function(act, p) {
      var dummy, f, i, incr, m, r, _ref;
      f = 'dM:Devl(' + act + ')';
      r = {};
      i = new window.EpicMvc.Issue(this.Epic);
      m = new window.EpicMvc.Issue(this.Epic);
      switch (act) {
        case 'toggle':
          this.opts[p.what] = !this.opts[p.what];
          break;
        case 'clear_cache':
          this.Epic.loader.clearCache();
          break;
        case 'open_model':
          if (this.open_model !== p.name) {
            this.open_model = p.name;
            this.open_table = '';
            this.open_table_stack = [];
          } else {
            this.open_model = '';
          }
          delete this.Table.Model;
          break;
        case 'close_subtable':
          if (!this.open_table_stack.length) {
            return;
          }
          _ref = this.open_table_stack.pop(), dummy = _ref[0], this.table_row_cnt = _ref[1], this.table_by_col = _ref[2], this.table_col = _ref[3];
          delete this.Table.Model;
          break;
        case 'open_subtable':
          this.open_table_stack.push([p.name, this.table_row_cnt, this.table_by_col, this.table_col]);
          this.table_row_cnt = 0;
          this.table_by_col = false;
          this.table_col = false;
          delete this.Table.Model;
          break;
        case 'open_table':
          if (this.open_table !== p.name) {
            this.table_row_cnt = 0;
            this.table_by_col = false;
            this.table_col = false;
            this.open_table = p.name;
            this.open_table_stack = [];
          } else {
            this.open_table = '';
          }
          delete this.Table.Model;
          break;
        case 'table_row_set':
          this.table_by_col = false;
          if (p.row != null) {
            this.table_row_cnt = p.row;
          }
          break;
        case 'table_col_set':
          this.table_col = p.col;
          this.table_by_col = true;
          break;
        case 'table_left':
        case 'table_right':
          incr = act === 'table_left' ? -1 : 1;
          _log2(f, act, incr, this.table_row_cnt);
          this.table_row_cnt += incr;
          delete this.Table.Model;
          break;
        default:
          return Devl.__super__.action.call(this, act, p);
      }
      return [r, i, m];
    };

    Devl.prototype.loadTable = function(tbl_nm) {
      var cols, f, inst, is_sub, len, nm, open, rcol, rec, rec_s, row, row_inx, rrow, rval, sub_tnm, table, tnm, tnm_s, tref, trow, _i, _len, _ref, _ref1;
      f = 'dM:Devl.loadTable(' + tbl_nm + ')';
      switch (tbl_nm) {
        case 'Opts':
          return this.Table[tbl_nm] = [this.opts];
        case 'Model':
          table = [];
          for (inst in this.Epic.oModel) {
            nm = this.Epic.oModel[inst].view_nm;
            row = $.extend({
              is_open: '',
              Table: []
            }, {
              inst: inst,
              name: nm
            });
            if (nm === this.open_model) {
              row.is_open = 'yes';
            }
            _ref = this.Epic.oModel[inst].Table;
            for (tnm in _ref) {
              rec = _ref[tnm];
              tnm_s = tnm;
              rec_s = rec;
              open = false;
              is_sub = false;
              if (row.is_open === 'yes' && tnm === this.open_table) {
                open = true;
                if (this.open_table_stack.length) {
                  _ref1 = this.open_table_stack;
                  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                    tref = _ref1[_i];
                    sub_tnm = tref[0], row_inx = tref[1];
                    if (!(row_inx in rec_s) || !(sub_tnm in rec_s[row_inx])) {
                      break;
                    }
                    is_sub = true;
                    rec_s = rec_s[row_inx][sub_tnm];
                    tnm_s += ',' + sub_tnm;
                  }
                }
              }
              len = rec_s.length;
              trow = {
                is_open: open,
                is_sub: is_sub,
                name: tnm_s,
                rows: len,
                Cols: [],
                row_cnt: 0,
                col: '',
                curr_col: this.table_col,
                by_col: this.table_by_col
              };
              if (open) {
                if (this.table_row_cnt < 0) {
                  this.table_row_cnt = len - 1;
                }
                if (this.table_row_cnt > len - 1) {
                  this.table_row_cnt = 0;
                }
                trow.row_cnt = this.table_row_cnt;
              }
              if (len) {
                cols = (function() {
                  var _results;
                  _results = [];
                  for (rcol in rec_s[0]) {
                    _results.push(rcol);
                  }
                  return _results;
                })();
              } else {
                cols = [];
              }
              trow.cols = len ? cols.join(', ') : 'no rows';
              if (len && open) {
                if (!this.table_by_col) {
                  trow.Cols = (function() {
                    var _ref2, _results;
                    _ref2 = rec_s[this.table_row_cnt];
                    _results = [];
                    for (rcol in _ref2) {
                      rval = _ref2[rcol];
                      _results.push({
                        type: (rval === null ? 'Null' : typeof rval),
                        col_ix: cols.indexOf(rcol),
                        col: rcol,
                        len: rval != null ? rval.length : void 0,
                        val: rval != null ? rval : '???'
                      });
                    }
                    return _results;
                  }).call(this);
                } else {
                  trow.Rows = (function() {
                    var _ref2, _ref3, _results;
                    _results = [];
                    for (rrow in rec_s) {
                      _results.push({
                        row: rrow,
                        len: (_ref2 = rec_s[rrow][this.table_col]) != null ? _ref2.length : void 0,
                        type: (rec_s[rrow][this.table_col] === null ? 'Null' : typeof rec_s[rrow][this.table_col]),
                        val: (_ref3 = rec_s[rrow][this.table_col]) != null ? _ref3 : '???'
                      });
                    }
                    return _results;
                  }).call(this);
                }
              }
              row.Table.push(trow);
            }
            row.tables = row.Table.length;
            table.push(row);
            table.sort(function(a, b) {
              if (a.inst === b.inst) {
                return 0;
              } else if (a.inst > b.inst) {
                return 1;
              } else {
                return -1;
              }
            });
          }
          _log2(f, 'final', table);
          return this.Table[tbl_nm] = table;
        default:
          return Devl.__super__.loadTable.call(this, tbl_nm);
      }
    };

    return Devl;

  })(window.EpicMvc.ModelJS);

  window.EpicMvc.Model.Devl$BaseDevl = Devl;

}).call(this);

/*Package/BaseDevl/Model/ModelJS.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var CoreModelJS, ModelJS,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CoreModelJS = window.EpicMvc.ModelJS;

  ModelJS = (function(_super) {

    __extends(ModelJS, _super);

    function ModelJS() {
      return ModelJS.__super__.constructor.apply(this, arguments);
    }

    ModelJS.prototype.action = function(act, parms) {
      throw new Error("Model (" + this.view_nm + ").action() needs (" + act + ")");
    };

    ModelJS.prototype.loadTable = function(tbl_nm) {
      if (tbl_nm in this.Table) {
        return;
      }
      throw new Error("Model (" + this.view_nm + ").loadTable() needs (" + tbl_nm + ")");
    };

    ModelJS.prototype.fistLoadData = function(oFist) {
      throw new Error("Model (" + this.view_nm + ").fistLoadData() needs (" + (oFist.getFistNm()) + ")");
    };

    ModelJS.prototype.fistGetFieldChoices = function(oFist, field) {
      throw new Error("Model (" + this.view_nm + ").fistGetFieldChoices() needs (" + (oFist.getFistNm()) + ":" + field + ")");
    };

    return ModelJS;

  })(CoreModelJS);

  window.EpicMvc.ModelJS = ModelJS;

}).call(this);

/*Package/BaseDevl/Extras/LoadStrategy.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  var LoadStrategy;

  LoadStrategy = (function() {

    function LoadStrategy(Epic) {
      this.Epic = Epic;
      this.path = 'Package/Base/view/';
      this.cache = {};
      this.cache_local_flag = true;
    }

    LoadStrategy.prototype.clearCache = function() {
      return this.cache = {};
    };

    LoadStrategy.prototype.preLoaded = function(pkg, type, nm) {
      var _ref, _ref1;
      return (_ref = window.EpicMvc['view$' + pkg]) != null ? (_ref1 = _ref[type]) != null ? _ref1[nm] : void 0 : void 0;
    };

    LoadStrategy.prototype.get = function(type, nm) {
      var full_nm, i, p, pkg, results, _i, _len, _ref, _ref1;
      full_nm = (type !== 'tmpl' ? type + '/' : '') + nm + '.' + type + '.html';
      if (this.cache[full_nm] != null) {
        return this.cache[full_nm];
      }
      if ((_ref = this.reverse_packages) == null) {
        this.reverse_packages = (function() {
          var _i, _ref1, _results;
          _results = [];
          for (i = _i = _ref1 = this.Epic.appconfs.length - 1; _ref1 <= 0 ? _i <= 0 : _i >= 0; i = _ref1 <= 0 ? ++_i : --_i) {
            _results.push(this.Epic.appconfs[i]);
          }
          return _results;
        }).call(this);
      }
      _ref1 = this.reverse_packages;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        pkg = _ref1[_i];
        if (p = this.preLoaded(pkg, type, nm)) {
          results = p;
        } else {
          results = this.getFile(pkg, full_nm);
          if (results !== false) {
            results = window.EpicMvc.ParseFile(full_nm, results);
          }
        }
        if (this.cache_local_flag && results !== false) {
          this.cache[full_nm] = results;
        }
        if (results !== false) {
          break;
        }
      }
      if (results === false) {
        console.log('NO FILE FOUND! ' + nm);
      }
      return results;
    };

    LoadStrategy.prototype.getFile = function(pkg, nm) {
      var path, results;
      results = false;
      path = "Package/" + pkg + "/view/";
      if (pkg === 'Base' || pkg === 'BaseDevl' || pkg === 'bootstrap') {
        path = "EpicPkg/" + pkg + "/view/";
      }
      window.$.ajax({
        url: path + nm,
        async: false,
        cache: this.cache_local_flag ? false : true,
        dataType: 'text',
        success: function(data) {
          return results = data;
        },
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log('AJAX ERROR ');
        }
      });
      return results;
    };

    LoadStrategy.prototype.getCombinedAppConfs = function() {
      var pkg, result, _i, _len, _ref;
      result = {};
      _ref = this.Epic.appconfs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        window.$.extend(true, result, window.EpicMvc['app$' + pkg]);
      }
      return result;
    };

    LoadStrategy.prototype.template = function(nm) {
      return this.get('tmpl', nm);
    };

    LoadStrategy.prototype.page = function(nm) {
      return this.get('page', nm);
    };

    LoadStrategy.prototype.part = function(nm) {
      return this.get('part', nm);
    };

    LoadStrategy.prototype.fist = function(grp_nm) {
      return window.EpicMvc['fist$' + grp_nm];
    };

    return LoadStrategy;

  })();

  window.EpicMvc.Extras.LoadStrategy$BaseDevl = LoadStrategy;

}).call(this);

window.EpicMvc.view$BaseDevl={
tmpl: {
"BaseDevl": ["<h5>I'm an 'outer' template</h5>\n",[4],"page",{},"\n",[1]],
"bdevl": ["<style>\n.dbg-part { border: solid 8px #888; }\n.dbg-tag-error-box { border: solid 2px #C44; font-weight: bold;}\n.dbg-tag-error-msg { color: red; }\n.dbg-tag-box { border: solid 2px #44C; }\n.dbg-part-box { font-size: .5em;\n  -webkit-box-shadow: 10px 10px 5px #888;\n  padding: 5px 5px 5px 15px;\n  width: 10px;\n  height: 10px;\n  z-index: 99999;\n}\n.red { color: red; }\n</style>\n<script type=\"text/javascript\">\n\t(function($) {\n\t\t$(document).ready(function() {\n\t\t\tvar $dur = \"medium\"; // Duration of Animation\n\n\t\t\t$(\".dbg-toolbar\").css({\n\t\t\t\t\"right\" : 0,\n\t\t\t\t\"top\" : -52\n\t\t\t})\n\t\t\t$(\".dbg-toolbar\").hover(function() {\n\t\t\t\t$(this).stop().animate({\n\t\t\t\t\ttop : -7\n\t\t\t\t}, $dur);\n\t\t\t}, function() {\n\t\t\t\t$(this).stop().animate({\n\t\t\t\t\ttop : -52\n\t\t\t\t}, $dur);\n\t\t\t});\n\t\t\t$(\".dbg-toolbar\").show();\n\t\t});\n\t})(jQuery);\n</script>\n",[56,5,13,21,29,37,45],"debug",{},"\n<div class=\"dbg-toolbar\" style=\"position: fixed; z-index: 9999; background-color: #484848; font-size: 10px; padding: 10px 10px 0 10px; top: -52px; right: 0;\">\n\t<div class=\"btn-toolbar\">\n\t\t<div class=\"btn-group\">\n\t\t\t",[12],"link_action",{"action":"dbg_refresh","p:what":"file","class":"btn btn-mini"},"\n\t\t\t\t<i class=\"icon-refresh\"><span class=\"epic-alternate\">[R]</span></i>\n\t\t\t","","","","\n\t\t\t",[20],"link_action",{"action":"dbg_toggle","p:what":"file","class":"btn btn-mini"},["\n\t\t\t\t\t<i class=\"icon-h-sign icon-large ",["varGet3",["Devl","Opts","file",".red",null]],"\"><span class=\"epic-alternate\">[H]</span></i>\n\t\t\t"],"","","","\n\t\t\t",[28],"link_action",{"action":"dbg_toggle","p:what":"tag","class":"btn btn-mini"},["\n\t\t\t\t\t<i class=\"icon-chevron-left icon-large ",["varGet3",["Devl","Opts","tag",".red",null]],"\"><span class=\"epic-alternate\">[&lt;]</span></i>\n\t\t\t"],"","","","\n\t\t\t",[36],"link_action",{"action":"dbg_toggle","p:what":"tag2","class":"btn btn-mini"},["\n\t\t\t\t\t<i class=\"icon-chevron-right icon-large ",["varGet3",["Devl","Opts","tag2",".red",null]],"\"><span class=\"epic-alternate\">[&gt;]</span></i>\n\t\t\t"],"","","","\n\t\t\t",[44],"link_action",{"action":"dbg_toggle","p:what":"form","class":"btn btn-mini"},["\n\t\t\t\t\t<i class=\"icon-edit icon-large ",["varGet3",["Devl","Opts","form",".red",null]],"\"><span class=\"epic-alternate\">[F]</span></i>\n\t\t\t"],"","","","\n\t\t\t",[52],"link_action",{"action":"dbg_toggle","p:what":"model","class":"btn btn-mini"},["\n\t\t\t\t\t<i class=\"icon-reorder icon-large ",["varGet3",["Devl","Opts","model",".red",null]],"\"><span class=\"epic-alternate\">[M]</span></i>\n\t\t\t"],"","","","\n\t\t</div>\n\t</div>\n\t<div style=\"text-align: center; color: #FFF; letter-spacing: 5px; font-size: 10px; height: 18px; padding-left: 4px; margin-top: -3px;\">EPIC</div>\n</div>\n","","","","\n",[72,61,65],"if",{"set":["",["varGet3",["Devl","Opts","model",null,null]],""]},"\n\t<table width=\"100%\"><tr><td width=\"20%\" style=\"background-color:#90C0FF;vertical-align:top;padding-top:75px;padding-bottom:20px;\">\n\t\t",[64],"page_part",{"part":"dbg_model","dynamic":"div"}," \n\t</td><td width=\"100%\" style=\"vertical-align:top;position:relative;\">\n\t\t\t",[68],"page",{},"\n\t</td></tr></table>\n","","","","\n",[84,77],"if",{"not_set":["",["varGet3",["Devl","Opts","model",null,null]],""]},"\n\t",[80],"page",{},"\n","","","","\n",[1,57,73]]}, page: {
}, part: {
"dbg_model": ["<style>\nul.dbg-model.nav, ul.dbg-model.nav ul { margin-bottom: 0; border: 0; }\nul.dbg-model.nav li a, ul.dbg-model.nav ul li a { padding: 0; border: 0; }\nul.dbg-model.nav ul li a { padding-left: 15px; }\n</style>\n<ul class=\"dbg-model nav nav-tabs nav-stacked\">\n\t",[312,5,13],"foreach",{"table":"Devl/Model"},"\n\t<li>\n\t\t",[12],"link_action",{"action":"dbg_open_model","p:name":["",["varGet2",["Model","name",null,null]],""]},["\n\t\t\t[",["varGet2",["Model","tables",null,null]],"] ",["varGet2",["Model","name",null,null]]," (",["varGet2",["Model","inst",null,null]],")\n\t\t"],"","","","\n\t</li>\n\t\t",[308,17],"if",{"set":["",["varGet2",["Model","is_open",null,null]],""]},"\n\t\t\t<ul class=\"nav nav-tabs nav-stacked\">\n\t\t\t\t",[304,21,29],"foreach",{"table":"Model/Table"},"\n\t\t\t\t<li>\n\t\t\t\t\t",[28],"link_action",{"action":"dbg_open_table","p:name":["",["varGet2",["Table","name",null,null]],""]},["\n\t\t\t\t\t\t<span title=\"",["varGet2",["Table","cols",null,null]],"\">[",["varGet2",["Table","rows",null,null]],"] ",["varGet2",["Table","name",null,null]],"</span>\n\t\t\t\t\t"],"","","","\n\t\t\t\t\t",[300,33,49,73,81,121,225],"if",{"set":["",["varGet2",["Table","is_open",null,null]],""]},"\n\t\t\t\t\t<table border=\"1\" style=\"font-size:8pt;line-height:1;\">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t",[48,37],"if",{"set":["",["varGet2",["Table","by_col",null,null]],""]}," \n\t\t\t\t\t\t\t\t",[44],"link_action",{"action":"dbg_table_by_row"},"\n\t\t\t\t\t\t\t\t\tRow\n\t\t\t\t\t\t\t\t","","","","\n\t\t\t\t\t\t\t","","","","\n\t\t\t\t\t\t\t",[72,53],"if",{"not_set":["",["varGet2",["Table","by_col",null,null]],""]}," \n\t\t\t\t\t\t\t\tColumn\n\t\t\t\t\t\t\t\t",[68,57],"if",{"set":["",["varGet2",["Table","is_sub",null,null]],""]},"",[64],"link_action",{"action":"dbg_close_subtable","style":"padding:0;"},"^","","","","","","","","\n\t\t\t\t\t\t\t","","","","\n\t\t\t\t\t\t\t</th><th>T</th><th center>\n\t\t\t\t\t\t\t\t",[80],"if",{"val":["",["varGet2",["Table","rows",null,null]],""],"eq":"1"},"\n\t\t\t\t\t\t\t\t\tValue\n\t\t\t\t\t\t\t\t","","","","\n\t\t\t\t\t\t\t\t",[120,85,93],"if",{"val":["",["varGet2",["Table","rows",null,null]],""],"ne":"1"},"\n\t\t\t\t\t\t\t\t\t",[92],"if",{"set":["",["varGet2",["Table","by_col",null,null]],""]},["\n\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;",["varGet2",["Table","curr_col",null,null]],"&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t\t"],"","","","\n\t\t\t\t\t\t\t\t\t",[116,97,105],"if",{"not_set":["",["varGet2",["Table","by_col",null,null]],""]},"\n\t\t\t\t\t\t\t\t\t\t",[104],"link_action",{"action":"dbg_table_left"},"&lt;","","","",["\n\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;Value (row ",["varGet2",["Table","row_cnt",null,null]],")&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t\t\t"],[112],"link_action",{"action":"dbg_table_right"},"&gt;","","","","\n\t\t\t\t\t\t\t\t\t","","","","\n\t\t\t\t\t\t\t\t","","","","\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t\t",[224,125],"if",{"not_set":["",["varGet2",["Table","by_col",null,null]],""]}," \n\t\t\t\t\t\t",[220,129,137,153,161,169,209],"foreach",{"table":"Table/Cols"},"\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t",[136],"if",{"val":["",["varGet2",["Table","rows",null,null]],""],"eq":"1"},["\n\t\t\t\t\t\t\t\t",["varGet2",["Cols","col",null,null]],"\n\t\t\t\t\t\t\t"],"","","","\n\t\t\t\t\t\t\t",[152,141],"if",{"val":["",["varGet2",["Table","rows",null,null]],""],"ne":"1"},"\n\t\t\t\t\t\t\t\t",[148],"link_action",{"action":"dbg_table_col_set","p:col":["",["varGet2",["Cols","col",null,null]],""]},["",["varGet2",["Cols","col",null,null]],""],"","","","\n\t\t\t\t\t\t\t","","","","\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t",[160],"if",{"set":["",["varGet2",["Cols","val",null,null]],""]},["<td style=\"color:green;\">",["varGet2",["Cols","type","1",null]],"</td>"],"","","","\n\t\t\t\t\t\t\t",[168],"if",{"not_set":["",["varGet2",["Cols","val",null,null]],""]},["<td style=\"color:red;\">",["varGet2",["Cols","type","1",null]],"</td>"],"","","",["\n\t\t\t\t\t\t\t<td title=\"",["varGet2",["Cols","type",null,null]],"\">\n\t\t\t\t\t\t\t\t\t"],[208,173,181],"if",{"val":["",["varGet2",["Cols","type",null,null]],""],"eq":"object"},"\n\t\t\t\t\t\t\t\t\t\t",[180],"if",{"not_set":["",["varGet2",["Cols","len",null,null]],""]}," Table [ empty ]","","","","\n\t\t\t\t\t\t\t\t\t\t",[204,185,193],"if",{"set":["",["varGet2",["Cols","len",null,null]],""]},"\n\t\t\t\t\t\t\t\t\t\t\t",[192],"link_action",{"action":"dbg_open_subtable","p:name":["",["varGet2",["Cols","col",null,null]],""],"style":"padding:0;"},"Table","","","",["\n\t\t\t\t\t\t\t\t\t\t\t[",["varGet2",["Cols","len",null,null]]," row"],[200],"if",{"val":["",["varGet2",["Cols","len",null,null]],""],"ne":"1"},"s","","","","]\n\t\t\t\t\t\t\t\t\t\t","","","","\n\t\t\t\t\t\t\t\t\t","","","","\n\t\t\t\t\t\t\t\t",[216],"if",{"val":["",["varGet2",["Cols","type",null,null]],""],"ne":"object"},["\n\t\t\t\t\t\t\t\t\t",["varGet2",["Cols","val",null,null]],"\n\t\t\t\t\t\t\t\t"],"","","","\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t","","","","\n\t\t\t\t\t\t","","","","\n\n\t\t\t\t\t\t",[296,229],"if",{"set":["",["varGet2",["Table","by_col",null,null]],""]}," \n\t\t\t\t\t\t",[292,233,241,249,281],"foreach",{"table":"Table/Rows"},["\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>",["varGet2",["Rows","row",null,null]],"</th>\n\t\t\t\t\t\t\t"],[240],"if",{"set":["",["varGet2",["Rows","val",null,null]],""]},["<td style=\"color:green;\">",["varGet2",["Rows","type","1",null]],"</td>"],"","","","\n\t\t\t\t\t\t\t",[248],"if",{"not_set":["",["varGet2",["Rows","val",null,null]],""]},["<td style=\"color:red;\">",["varGet2",["Rows","type","1",null]],"</td>"],"","","",["\n\t\t\t\t\t\t\t<td title=\"",["varGet2",["Rows","type",null,null]],"\">\n\t\t\t\t\t\t\t\t"],[280,253,269],"if",{"val":["",["varGet2",["Rows","type",null,null]],""],"eq":"object"},"Table [\n\t\t\t\t\t\t\t\t\t",[268,257],"if",{"set":["",["varGet2",["Rows","len",null,null]],""]},["",["varGet2",["Rows","len",null,null]]," row"],[264],"if",{"val":["",["varGet2",["Rows","len",null,null]],""],"ne":"1"},"s","","","","","","","","\n\t\t\t\t\t\t\t\t\t",[276],"if",{"not_set":["",["varGet2",["Rows","len",null,null]],""]},"empty","","","","\n\t\t\t\t\t\t\t\t]","","","","\n\t\t\t\t\t\t\t\t",[288],"if",{"val":["",["varGet2",["Rows","type",null,null]],""],"ne":"object"},["\n\t\t\t\t\t\t\t\t\t",["varGet2",["Rows","val",null,null]],"\n\t\t\t\t\t\t\t\t"],"","","","\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t","","","","\n\t\t\t\t\t\t","","","","\n\n\n\t\t\t\t\t</table>\n\t\t\t\t\t","","","","\n\t\t\t\t</li>\n\t\t\t\t","","","","\n\t\t\t</ul>\n\t\t","","","","\n\t","","","","\n</ul>\n",[1]]}};

