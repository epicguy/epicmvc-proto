// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  var View,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  View = (function(superClass) {
    extend(View, superClass);

    function View() {
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.run = function() {
      this.errors_cache = {
        _COUNT: 0
      };
      this.warn_cache = {};
      this.in_defer = false;
      return View.__super__.run.call(this);
    };

    View.prototype.Opts = function() {
      return E.Devl('Opts')[0];
    };

    View.prototype._Error = function(type, key, e) {
      var base, msg, prefix;
      if ((base = this.errors_cache)[type] == null) {
        base[type] = {};
      }
      if (!(key in this.errors_cache[type])) {
        this.errors_cache[type][key] = e;
        this.errors_cache._COUNT++;
        if (this.errors_cache._COUNT < 5) {
          _log2('### _Error type/key/e', type, key, e);
          msg = (((key + "\n\n" + e.message).replace(/&lt;/g, '<')).replace(/&gt;/g, '>')).replace(/&amp;/g, '&');
          prefix = type === 'v2' || type === 'v3' ? 'Variable reference' : 'Tag';
          return _log2("ERROR", prefix + " error (" + type + "):\n\n" + msg);
        }
      }
    };

    View.prototype.invalidateTables = function(view_nm, tbl_list, deleted_tbl_nms) {
      if (deleted_tbl_nms.length) {
        E.Devl().tableChange(view_nm, tbl_list, deleted_tbl_nms);
      }
      return View.__super__.invalidateTables.call(this, view_nm, tbl_list, deleted_tbl_nms);
    };

    View.prototype.xT_defer = function(oPt) {
      var out;
      this.in_defer = true;
      out = View.__super__.xT_defer.call(this, oPt);
      this.in_defer = false;
      return out;
    };

    View.prototype.xT_debug = function(oPt) {
      var out, save;
      save = this.Opts;
      this.Opts = function() {
        return {};
      };
      out = this.viewExe.doAllParts(oPt.parts);
      this.Opts = save;
      return out;
    };

    View.prototype.my_accessModelTable = function(at_table, alias) {
      var err, i, i_info, k, lh, nm, ref, ref1, rh, row, row_info, row_typ;
      ref = at_table.split('/'), lh = ref[0], rh = ref[1];
      if (lh in this.R) {
        row = this.R[lh];
        if (!(rh in row)) {
          row_info = (function() {
            switch (row_typ = E.type_oau(row)) {
              case 'O':
                row_info = ((function() {
                  var results;
                  results = [];
                  for (nm in row) {
                    results.push(nm);
                  }
                  return results;
                })()).join();
                if ('fieldNm' in row) {
                  return row_info += ' fieldNm:' + row.fieldNm;
                }
                break;
              default:
                return row_info = "Not a hash (" + row_typ + ")";
            }
          })();
          i = this.I[lh];
          i_info = '';
          ref1 = {
            m: 'model',
            p: 'parent',
            c: 'count'
          };
          for (k in ref1) {
            nm = ref1[k];
            if (i[k] != null) {
              i_info += nm + ':' + i[k];
            }
          }
          err = "No such sub-table (" + rh + ") in (" + lh + ") R(" + row_info + ") I(" + i_info + "})";
          throw new Error(err);
        }
      } else if (!(lh in E)) {
        err = "No such Model (" + lh + ") for model/table (" + lh + "/" + rh + ")";
        throw new Error(err);
      }
    };

    View.prototype.xT_fist = function(oPt) {
      var c, e, g, inside, ref, ref1, ref2, v;
      try {
        if (!oPt.attrs.form) {
          throw Error("Missing 'form' attribute");
        }
        g = this.Epic.getGroupNm();
        c = this.Epic.getFistGroupCache().getCanonicalFist(g, oPt.attrs.form);
        v = this.Epic.oAppConf.getFistView(g, c);
        if (!v) {
          throw Error("app.conf requires MODELS: ... forms=\"...," + c + "\"");
        }
        if (!('fistLoadData' in this.Epic.getInstance(v))) {
          throw Error("Your model (" + v + ") must have a method fistLoadData");
        }
      } catch (_error) {
        e = _error;
        _log2('##### Error in form-part', (ref = oPt.attrs.part) != null ? ref : 'fist_default', e, e.stack);
        this._Error('form', this._TagText(oPt, true), e);
        return this._Err('tag', 'fist', attrs, e);
      }
      try {
        inside = '';
        if (this.Opts().form === true) {
          return this._Div('tag', oPt, inside, View.__super__.xT_fist.call(this, oPt));
        }
        if (this.Opts().file === true) {
          return "<div class=\"dbg-part-box\" title=\"" + ((ref1 = oPt.attrs.part) != null ? ref1 : 'fist_default') + ".part.html (" + oPt.attrs.form + ")\">.</div>" + (View.__super__.xT_fist.call(this, oPt));
        }
        return View.__super__.xT_fist.call(this, oPt);
      } catch (_error) {
        e = _error;
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        _log2('##### Error in form-part', (ref2 = oPt.attrs.part) != null ? ref2 : 'fist_default', e, e.stack);
        this._Error('form_part', this._TagText(oPt, true), e);
        return this._Err('tag', 'fist', attrs, e);
      }
    };

    View.prototype.T_part = function(attrs) {
      var e;
      try {
        if (this.Opts().file !== true) {
          return View.__super__.T_part.call(this, attrs);
        }
        return [
          m('div.dbg-part-box', {
            title: "Part/" + attrs.part + ".html"
          }, '.'), View.__super__.T_part.call(this, attrs)
        ];
      } catch (_error) {
        e = _error;
        _log2('##### Error in page-part', attrs.part, e);
        return m('pre', {}, ["<e-part part=\"Part/" + attrs.part + "\">", m('br'), e, m('br'), e.stack]);
      }
    };

    View.prototype.getLetTypPag = function() {
      var letter, nest, page, type;
      nest = this.frames.length - this.frame_inx;
      letter = (function() {
        switch (nest) {
          case 0:
            return 'P';
          case 1:
            return 'L';
          default:
            return 'F';
        }
      })();
      type = {
        P: 'Page',
        L: 'Layout',
        F: 'Frame'
      }[letter];
      page = (function() {
        switch (nest) {
          case 0:
            return this.page_name;
          default:
            return this.frames[this.frame_inx];
        }
      }).call(this);
      return [letter, type, page];
    };

    View.prototype.T_page = function(attrs) {
      var e, letter, page, ref, type;
      try {
        if (this.Opts().file !== true) {
          return View.__super__.T_page.call(this, attrs);
        }
        ref = this.getLetTypPag(), letter = ref[0], type = ref[1], page = ref[2];
        return [
          {
            tag: 'div',
            attrs: {
              className: "dbg-part-box",
              title: type + "/" + page + ".html"
            },
            children: letter
          }, View.__super__.T_page.call(this, attrs)
        ];
      } catch (_error) {
        e = _error;
        _log2('##### Error in T_page', attrs, e);
        this._Error('page', this._TagText({
          tag: 'page',
          attrs: attrs
        }, true), e);
        return this._Err('page', 'page', attrs, e);
      }
    };

    View.prototype.v3 = function(view_nm, tbl_nm, col_nm, format_spec, custom_spec, give_error) {
      var e, key, t_custom_spec, t_format_spec, val;
      try {
        val = View.__super__.v3.call(this, view_nm, tbl_nm, col_nm, format_spec, custom_spec);
        if (val === void 0) {
          t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
          t_custom_spec = custom_spec ? '#' + custom_spec : '';
          key = '&' + view_nm + '/' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
          if (!this.warn_cache[key]) {
            E.option.warn('v3', "Undefined result: (" + key + ").");
            this.warn_cache[key] = true;
          }
        }
      } catch (_error) {
        e = _error;
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        key = '&' + view_nm + '/' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
        _log2('##### Error in v3 key=', key, e);
        this._Error('v3', key, e);
        throw e;
      }
      return val;
    };

    View.prototype.v2 = function(tbl_nm, col_nm, format_spec, custom_spec, sub_nm, give_error) {
      var e, key, t_custom_spec, t_format_spec, val;
      if (!(tbl_nm in this.R)) {
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        key = '&' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
        throw new Error("No such Table (" + tbl_nm + ") evaluating " + key);
      }
      try {
        val = View.__super__.v2.call(this, tbl_nm, col_nm, format_spec, custom_spec, sub_nm);
      } catch (_error) {
        e = _error;
        _log2('##### v2', "&" + tbl_nm + "/" + col_nm + ";", e, e.stack);
        val = "&" + tbl_nm + "/" + col_nm + ";[" + e.message + "] <pre>" + e.stack + "</pre>";
      }
      if (val === void 0) {
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        key = '&' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
        if (!this.warn_cache[key]) {
          E.option.warn('v2', "Undefined result: (" + key + ").");
          this.warn_cache[key] = true;
        }
      }
      return val;
    };

    View.prototype.xT_if = function(oPt) {
      var e, inside;
      try {
        if (this.Opts().tag2 !== true || this.in_defer) {
          return View.__super__.xT_if.call(this, oPt);
        }
        inside = '';
        return this._Div('tag', oPt, inside, View.__super__.xT_if.call(this, oPt));
      } catch (_error) {
        e = _error;
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        this._Error('if', this._TagText(oPt, true), e);
        return this._Err('tag', 'if', attrs, e);
      }
    };

    View.prototype.T_foreach = function(attrs, children) {
      var e, inside;
      try {
        if (attrs.table == null) {
          throw new Error('Missing table="<model>/<table>"');
        }
        this.my_accessModelTable(attrs.table);
        if (this.Opts().tag !== true || this.in_defer) {
          return View.__super__.T_foreach.call(this, attrs, children);
        }

        /*
        			if tbl?.length
        				inside= ['len:'+tbl.length]
        				cols=( nm for nm of tbl[0 ])
        				inside.push m 'span', title: "#{cols.join ', '} Cols:#{cols.length}"
        			else inside='empty'
         */
        inside = '';
        return this._Div('tag', attrs, inside, View.__super__.T_foreach.call(this, attrs, children));
      } catch (_error) {
        e = _error;
        return this._Err('tag', 'foreach', attrs, e);
      }
    };

    View.prototype.T_fist = function(attrs, children) {
      var e;
      try {
        return View.__super__.T_fist.call(this, attrs, children);
      } catch (_error) {
        e = _error;
        return this._Err('tag', 'fist', attrs, e);
      }
    };

    View.prototype.xT_explain = function(oPt) {
      return JSON.stringify(this.Epic.getViewTable(oPt.attrs.table));
    };

    View.prototype._TagText = function(tag, attrs, asError) {
      var attrs_array, key, letter, page, ref, type, val;
      ref = this.getLetTypPag(), letter = ref[0], type = ref[1], page = ref[2];
      attrs_array = [];
      for (key in attrs) {
        val = attrs[key];
        attrs_array.push(key + "=\"" + val + "\"");
      }
      return "<e-" + tag + " " + (attrs_array.join(' ')) + ">";
    };

    View.prototype._Div = function(type, attrs, inside, after) {
      if (after == null) {
        after = '';
      }
      return [
        m('div', {
          className: "dbg-" + type + "-box"
        }, "" + (this._TagText(attrs)) + inside), after
      ];
    };

    View.prototype._Err = function(type, tag, attrs, e) {
      var stack, title;
      _log2('### _Err type/tag/attrs/e', type, tag, attrs, {
        e: e,
        m: e.message,
        s: e.stack
      }, (e.stack.split('\n'))[1]);
      title = (e.stack.split('\n'))[1];
      stack = this.Opts().stack ? m('pre', {}, "\n" + e.stack) : title;
      return {
        tag: 'div',
        attrs: {
          className: "dbg-" + type + "-error-box clearLeft"
        },
        children: [
          this._TagText(tag, attrs, true), m('br'), m('div', {
            className: "dbg-" + type + "-error-msg",
            title: e.stack
          }, e.message), stack
        ]
      };
    };

    return View;

  })(E.Model.View$Base);

  E.Model.View$Dev = View;

}).call(this);
