// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var Fist;

  Fist = (function() {

    function Fist(Epic, grp_nm, flist_nm, view_nm) {
      var oG;
      this.Epic = Epic;
      this.grp_nm = grp_nm;
      this.view_nm = view_nm;
      oG = this.Epic.getFistGroupCache();
      flist_nm = oG.getCanonicalFist(grp_nm, flist_nm);
      this.fist_nm = flist_nm;
      this.oM = this.Epic.getInstance(view_nm);
      this.form_state = 'empty';
      this.fistDef = oG.getFistDef(grp_nm, this.fist_nm);
      this.fieldDef = oG.getFieldDefsForFist(grp_nm, this.fist_nm);
      this.cache_field_choice = [];
      this.fb = new window.EpicMvc.FistBack(this.Epic, this.loadFieldDefs());
      this.upload_todo = [];
      this.upload_fl = {};
    }

    Fist.prototype.getGroupNm = function() {
      return this.grp_nm;
    };

    Fist.prototype.getFistNm = function() {
      return this.fist_nm;
    };

    Fist.prototype.loadFieldDefs = function() {
      var _ref;
      return (_ref = this.fieldDef) != null ? _ref : this.fieldDef = this.Epic.getFistGroupCache().getFieldDefsForFist(this.grp_nm, this.fist_nm);
    };

    Fist.prototype.getFieldsDefs = function() {
      return this.loadFieldDefs();
    };

    Fist.prototype.loadFieldChoices = function(fl) {
      var ct, final_obj, json, k, split, v, wist, wist_grp, wist_nm;
      final_obj = {
        options: [],
        values: []
      };
      if (!(this.cache_field_choice[fl] != null)) {
        this.loadFieldDefs();
        ct = this.fieldDef[fl].type.split(':');
        switch (ct[1]) {
          case 'custom':
            final_obj = this.oM.fistGetFieldChoices(this, fl);
            break;
          case 'json_like':
            json = this.fieldDef[fl].cdata.replace(/'/g, '"').replace(/"""/g, "'");
            json = $.parseJSON(json);
            for (k in json) {
              v = json[k];
              final_obj.options.push(k);
              final_obj.values.push(v);
            }
            break;
          case 'use_word_list':
            split = this.fieldDef[fl].cdata.split(':');
            if (split.length === 2) {
              wist_grp = split[0], wist_nm = split[1];
            } else if (split[0] != null) {
              wist_grp = this.grp_nm;
              wist_nm = split[0];
            } else {
              wist_grp = this.grp_nm;
              wist_nm = fl;
            }
            wist = this.Epic.getViewTable('Wist/' + wist_nm);
            for (k in wist) {
              v = wist[k];
              final_obj.options.push(v.text);
              final_obj.valules.push(v.word);
            }
        }
        this.cache_field_choice[fl] = final_obj;
      }
    };

    Fist.prototype.getHtmlPostedFieldsList = function(flist_nm) {
      var fistDef;
      fistDef = this.fistDef;
      if ((flist_nm != null) && flist_nm !== this.fist_nm) {
        fistDef = this.Epic.getFistGroupCache().getFistDef(this.grp_nm, flist_nm);
      }
      return fistDef;
    };

    Fist.prototype.getFieldAttributes = function(fl_nm) {
      this.loadFieldDefs();
      return this.fieldDef[fl_nm];
    };

    Fist.prototype.getHtmlFieldValue = function(fl_nm) {
      this.loadData();
      return this.fb.fb_HTML[fl_nm];
    };

    Fist.prototype.getDbFieldValue = function(fl_nm) {
      this.loadData();
      return this.fb.fb_DB[fl_nm];
    };

    Fist.prototype.getDbFieldValues = function() {
      this.loadData();
      return this.fb.fb_DB;
    };

    Fist.prototype.getChoices = function(fl_nm) {
      this.loadFieldChoices(fl_nm);
      return this.cache_field_choice[fl_nm];
    };

    Fist.prototype.fieldLevelValidate = function(data) {
      this.form_state = 'posted';
      return this.fb.FistValidate(data);
    };

    Fist.prototype.loadData = function(data) {
      if (this.form_state === 'empty') {
        this.oM.fistLoadData(this);
        return this.form_state = 'loaded';
      }
    };

    Fist.prototype.setDbValuesFromModel = function(data) {
      this.fb.SetDbValues(data);
      this.form_state = 'loaded';
    };

    Fist.prototype.eventNewRequest = function() {
      this.clearValues();
      this.upload_todo = [];
      this.uploaded_fl = {};
    };

    Fist.prototype.clearValues = function() {
      if (this.form_state !== 'empty') {
        this.fb.ClearValues();
        this.form_state = 'empty';
      }
    };

    Fist.prototype.getUploadedMsg = function(fl, val) {
      return this.oM.fistGetUploadedMsg(this, fl, val);
    };

    Fist.prototype.haveUpload = function(fl, from_id, to_id, btn_id, msg_id, now) {
      var details, uploader,
        _this = this;
      details = {
        fl: fl,
        from_id: from_id,
        to_id: to_id,
        btn_id: btn_id,
        msg_id: msg_id
      };
      if (now !== true) {
        this.upload_todo.push(details);
        return;
      }
      uploader = new qq.FileUploaderBasic($.extend({
        element: document.getElementById(from_id),
        button: document.getElementById(btn_id),
        debug: true,
        multiple: false,
        allowedExtensions: ['jpg', 'jpeg'],
        onComplete: function(id, fileName, responseJSON) {
          return _this.uploadComplete(fl, id, fileName, responseJSON);
        }
      }, this.oM.fistGetUploadOptions(this, fl, from_id, to_id)));
      this.upload_fl[fl] = details;
    };

    Fist.prototype.uploadComplete = function(fl, the_id, fileName, responseJSON) {
      var form_value;
      form_value = this.oM.fistHandleUploadResponse(this, fl, responseJSON);
      if (form_value === false) {
        $('#' + this.upload_fl[fl].msg_id).text(' File failed to load, try again?');
      } else {
        $('#' + this.upload_fl[fl].msg_id).text(' ' + this.oM.fistGetUploadedMsg(this, fl, form_value) + '  uploaded.');
        $('#' + this.upload_fl[fl].to_id).val(form_value);
      }
    };

    Fist.prototype.eventInitializePage = function() {
      var v, _i, _len, _ref;
      _ref = this.upload_todo;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        this.haveUpload(v.fl, v.from_id, v.to_id, v.btn_id, v.msg_id, true);
      }
    };

    return Fist;

  })();

  window.EpicMvc.Fist = Fist;

}).call(this);
