// Generated by CoffeeScript 1.9.2
(function() {
  var E, MockLoadStrategy, _log, dev_dir, doIt, doObj, epic_path, fs;

  _log = function() {};

  fs = require('fs');

  dev_dir = '../' + process.argv[3];

  epic_path = '../' + process.argv[2];

  E = require('E');

  require(epic_path + '/EpicCore.js');

  require(epic_path + '/Dev/Extra/ParseFile.js');

  MockLoadStrategy = (function() {
    function MockLoadStrategy(dev_dir, pkg_nm) {
      this.path = dev_dir + '/' + pkg_nm + '/';
    }

    MockLoadStrategy.prototype.getLayoNm = function(nm) {
      return this.path + 'Layout/' + nm + '.html';
    };

    MockLoadStrategy.prototype.getPageNm = function(nm) {
      return this.path + 'Page/' + nm + '.html';
    };

    MockLoadStrategy.prototype.getPartNm = function(nm) {
      return this.path + 'Part/' + nm + '.html';
    };

    MockLoadStrategy.prototype.getFile = function(nm) {
      var results;
      results = 'bad request?';
      results = fs.readFileSync(nm);
      return String(results);
    };

    MockLoadStrategy.prototype.layout = function(nm) {
      var full_nm, out;
      _log("layout: " + nm);
      full_nm = this.getLayoNm(nm);
      out = E.Extra.ParseFile(full_nm, this.getFile(full_nm));
      return out;
    };

    MockLoadStrategy.prototype.page = function(nm) {
      var full_nm, out;
      _log("page: " + nm);
      full_nm = this.getPageNm(nm);
      out = E.Extra.ParseFile(full_nm, this.getFile(full_nm));
      return out;
    };

    MockLoadStrategy.prototype.part = function(nm) {
      var full_nm;
      _log("part: " + nm);
      full_nm = this.getPartNm(nm);
      return E.Extra.ParseFile(full_nm, this.getFile(full_nm));
    };

    MockLoadStrategy.prototype.readdir = function(type) {
      var f, files, i, len, p, path_part, ref, results1;
      f = 'MockLoadStrategy.readdir';
      _log(f, '>', type);
      path_part = type;
      _log(f, '@path path_part', this.path, path_part);
      if (!fs.existsSync(this.path + path_part)) {
        return [];
      }
      files = fs.readdirSync(this.path + path_part);
      ref = (function() {
        var j, len, results2;
        results2 = [];
        for (j = 0, len = files.length; j < len; j++) {
          p = files[j];
          results2.push(p.split('.'));
        }
        return results2;
      })();
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        f = ref[i];
        results1.push(f[0]);
      }
      return results1;
    };

    return MockLoadStrategy;

  })();

  doObj = function(obj) {
    var content;
    content = "function(){" + obj.content + "}";
    return "{preloaded:1,can_componentize:" + obj.can_componentize + ",defer:" + obj.defer + ",content:" + content + "}";
  };

  doIt = function(dev_dir, pkg_nm) {
    var end, f, fnm, i, j, k, len, len1, len2, load, out, ref, ref1, ref2;
    f = 'doIt';
    _log(f, 'args', dev_dir, pkg_nm);
    out = 'E.view$' + pkg_nm + '={\n';
    load = new MockLoadStrategy(dev_dir, pkg_nm);
    out += 'Layout: {\n';
    end = '';
    ref = load.readdir('Layout');
    for (i = 0, len = ref.length; i < len; i++) {
      fnm = ref[i];
      out += end + ("\"" + fnm + "\":" + (doObj(load.layout(fnm))));
      end = ",\n";
    }
    out += '},\nPage: {\n';
    end = '';
    ref1 = load.readdir('Page');
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      fnm = ref1[j];
      out += end + ("\"" + fnm + "\":" + (doObj(load.page(fnm))));
      end = ",\n";
    }
    out += '},\nPart: {\n';
    end = '';
    ref2 = load.readdir('Part');
    for (k = 0, len2 = ref2.length; k < len2; k++) {
      fnm = ref2[k];
      out += end + ("\"" + fnm + "\":" + (doObj(load.part(fnm))));
      end = ",\n";
    }
    out += '}};\n';
    return console.log('' + out);
  };

  doIt(dev_dir, process.argv[4]);

}).call(this);
