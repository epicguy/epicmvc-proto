// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var View,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = (function(_super) {

    __extends(View, _super);

    function View() {
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.run = function() {
      this.errors_cache = {
        _COUNT: 0
      };
      this.in_defer = false;
      return View.__super__.run.call(this);
    };

    View.prototype.Opts = function() {
      return E.Devl('Opts')[0];
    };

    View.prototype._Error = function(type, key, e) {
      var msg, prefix, _base, _ref;
      if ((_ref = (_base = this.errors_cache)[type]) == null) {
        _base[type] = {};
      }
      if (!(key in this.errors_cache[type])) {
        this.errors_cache[type][key] = e;
        this.errors_cache._COUNT++;
        if (this.errors_cache._COUNT < 5) {
          _log2('### _Error type/key/e', type, key, e);
          msg = ((("" + key + "\n\n" + e.message).replace(/&lt;/g, '<')).replace(/&gt;/g, '>')).replace(/&amp;/g, '&');
          prefix = type === 'varGet2' || type === 'varGet3' ? 'Variable reference' : 'Tag';
          return _log2("ERROR", "" + prefix + " error (" + type + "):\n\n" + msg);
        }
      }
    };

    View.prototype.invalidateTables = function(view_nm, tbl_list, deleted_tbl_nms) {
      if (deleted_tbl_nms.length) {
        E.Devl().tableChange(view_nm, tbl_list, deleted_tbl_nms);
      }
      return View.__super__.invalidateTables.call(this, view_nm, tbl_list, deleted_tbl_nms);
    };

    View.prototype.xT_defer = function(oPt) {
      var out;
      this.in_defer = true;
      out = View.__super__.xT_defer.call(this, oPt);
      this.in_defer = false;
      return out;
    };

    View.prototype.xT_debug = function(oPt) {
      var out, save;
      save = this.Opts;
      this.Opts = function() {
        return {};
      };
      out = this.viewExe.doAllParts(oPt.parts);
      this.Opts = save;
      return out;
    };

    View.prototype.xgetTable = function(nm) {
      var row, _i, _len, _ref;
      if (this.Opts().form !== true) {
        return View.__super__.xgetTable.call(this, nm);
      }
      switch (nm) {
        case 'Control':
        case 'Form':
          if (this.fist_table.Debug !== true) {
            _ref = this.fist_table.Control;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              row = _ref[_i];
              row.label += "<span class=\"dbg-tag-box\" title=\"" + row.name + "(" + row.type + ")\">#</span>";
            }
            this.fist_table.Debug = true;
          }
      }
      return View.__super__.xgetTable.call(this, nm);
    };

    View.prototype._accessModelTable = function(at_table, alias) {
      var err, lh, rh, row, _ref;
      _ref = at_table.split('/'), lh = _ref[0], rh = _ref[1];
      if (lh in this.info_foreach) {
        row = this.info_foreach[lh].row;
        if (!(rh in row)) {
          _log2('ERROR', err = "No such sub-table (" + rh + ") in (" + lh + ") row=", row);
          throw new Error(err);
        }
      } else if (!(lh in E)) {
        _log2('ERROR', err = "No such Model (" + lh + ") for model/table (" + lh + "/" + rh + ")");
        throw new Error(err);
      }
      return View.__super__._accessModelTable.call(this, at_table, alias);
    };

    View.prototype.xT_fist = function(oPt) {
      var c, g, inside, v, _ref, _ref1, _ref2;
      try {
        if (!oPt.attrs.form) {
          throw Error("Missing 'form' attribute");
        }
        g = this.Epic.getGroupNm();
        c = this.Epic.getFistGroupCache().getCanonicalFist(g, oPt.attrs.form);
        v = this.Epic.oAppConf.getFistView(g, c);
        if (!v) {
          throw Error("app.conf requires MODELS: ... forms=\"...," + c + "\"");
        }
        if (!('fistLoadData' in this.Epic.getInstance(v))) {
          throw Error("Your model (" + v + ") must have a method fistLoadData");
        }
      } catch (e) {
        _log2('##### Error in form-part', (_ref = oPt.attrs.part) != null ? _ref : 'fist_default', e, e.stack);
        this._Error('form', this._TagText(oPt, true), e);
        return this._Err('tag', oPt, e);
      }
      try {
        inside = '';
        if (this.Opts().form === true) {
          return this._Div('tag', oPt, inside, View.__super__.xT_fist.call(this, oPt));
        }
        if (this.Opts().file === true) {
          return "<div class=\"dbg-part-box\" title=\"" + ((_ref1 = oPt.attrs.part) != null ? _ref1 : 'fist_default') + ".part.html (" + oPt.attrs.form + ")\">.</div>" + (View.__super__.xT_fist.call(this, oPt));
        }
        return View.__super__.xT_fist.call(this, oPt);
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        _log2('##### Error in form-part', (_ref2 = oPt.attrs.part) != null ? _ref2 : 'fist_default', e, e.stack);
        this._Error('form_part', this._TagText(oPt, true), e);
        return this._Err('tag', oPt, e);
      }
    };

    View.prototype.T_part = function(attrs) {
      try {
        if (this.Opts().file !== true) {
          return View.__super__.T_part.call(this, attrs);
        }
        return [
          m('div.dbg-part-box', {
            title: "Part/" + attrs.part + ".html"
          }, '.'), View.__super__.T_part.call(this, attrs)
        ];
      } catch (e) {
        _log2('##### Error in page-part', attrs.part, e);
        return m('pre', {}, ["<e-part part=\"Part/" + attrs.part + "\">", m('br'), e, m('br'), e.stack]);
      }
    };

    View.prototype.getLetTypPag = function() {
      var letter, nest, page, type;
      nest = this.frames.length - this.frame_inx;
      letter = (function() {
        switch (nest) {
          case 0:
            return 'P';
          case 1:
            return 'L';
          default:
            return 'F';
        }
      })();
      type = {
        P: 'Page',
        L: 'Layout',
        F: 'Frame'
      }[letter];
      page = (function() {
        switch (nest) {
          case 0:
            return this.page_name;
          default:
            return this.frames[this.frame_inx];
        }
      }).call(this);
      return [letter, type, page];
    };

    View.prototype.T_page = function(attrs) {
      var letter, page, type, _ref;
      try {
        if (this.Opts().file !== true) {
          return View.__super__.T_page.call(this, attrs);
        }
        _ref = this.getLetTypPag(), letter = _ref[0], type = _ref[1], page = _ref[2];
        return [
          {
            tag: 'div',
            attrs: {
              className: "dbg-part-box",
              title: "" + type + "/" + page + ".html"
            },
            children: letter
          }, View.__super__.T_page.call(this, attrs)
        ];
      } catch (e) {
        _log2('##### Error in T_page', attrs, e);
        this._Error('page', this._TagText({
          tag: 'page',
          attrs: attrs
        }, true), e);
        return this._Err('page', {
          tag: 'page',
          attrs: attrs
        }, e);
      }
    };

    View.prototype.v3 = function(view_nm, tbl_nm, col_nm, format_spec, custom_spec, give_error) {
      var key, t_custom_spec, t_format_spec, val;
      try {
        val = View.__super__.v3.call(this, view_nm, tbl_nm, col_nm, format_spec, custom_spec);
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        if (val === void 0) {
          throw new Error("Column/spec does not exist (" + view_nm + "/" + tbl_nm + "/" + col_nm + t_format_spec + t_custom_spec + ").");
        }
      } catch (e) {
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        key = '&amp;' + view_nm + '/' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
        _log2('##### Error in varGet3 key=', key, e);
        this._Error('varGet3', key, e);
        throw e;
      }
      return val;
    };

    View.prototype.xv2 = function(tbl_nm, col_nm, format_spec, custom_spec, sub_nm, give_error) {
      var key, t_custom_spec, t_format_spec, val;
      try {
        val = View.__super__.xv2.call(this, tbl_nm, col_nm, format_spec, custom_spec, sub_nm);
      } catch (e) {
        if (this.Epic.isSecurityError(e || give_error)) {
          throw e;
        }
        _log2('##### varGet2', "&" + tbl_nm + "/" + col_nm + ";", e, e.stack);
        val = "&amp;" + tbl_nm + "/" + col_nm + ";[" + e.message + "] <pre>" + e.stack + "</pre>";
      }
      if (val === void 0) {
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        key = '&amp;' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
        _log2('##### Error in varGet2 key=', key, 'undefined');
        this._Error('varGet2', key, {
          message: 'is undefined',
          stack: "\n"
        });
        val = "&amp;" + tbl_nm + "/" + col_nm + ";";
      }
      return val;
    };

    View.prototype.xT_if = function(oPt) {
      var inside;
      try {
        if (this.Opts().tag2 !== true || this.in_defer) {
          return View.__super__.xT_if.call(this, oPt);
        }
        inside = '';
        return this._Div('tag', oPt, inside, View.__super__.xT_if.call(this, oPt));
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        this._Error('if', this._TagText(oPt, true), e);
        return this._Err('tag', oPt, e);
      }
    };

    View.prototype.xT_foreach = function(oPt) {
      var at_table, cols, inside, lh, nm, oMd, rh, tbl, _ref;
      try {
        at_table = this.viewExe.handleIt(oPt.attrs.table);
        _ref = at_table.split('/'), lh = _ref[0], rh = _ref[1];
        if (lh in this.info_foreach) {
          if (!(rh in this.info_foreach[lh].row)) {
            throw new Error("Sub-table missing: (" + rh + ") in foreach table='" + lh + "/" + rh + "' (dyn:" + (this.info_foreach[lh].dyn.join(',')));
          }
          tbl = this.info_foreach[lh].row[rh];
        } else {
          oMd = this.Epic.getInstance(lh);
          tbl = oMd.getTable(rh);
        }
        if (this.Opts().tag !== true || this.in_defer) {
          return View.__super__.xT_foreach.call(this, oPt);
        }
        if (tbl != null ? tbl.length : void 0) {
          inside = 'len:' + tbl.length;
          cols = (function() {
            var _results;
            _results = [];
            for (nm in tbl[0]) {
              _results.push(nm);
            }
            return _results;
          })();
          inside += "<span title=\"" + (cols.join(', ')) + "\">Cols:" + cols.length + "<span>";
        } else {
          inside = 'empty';
        }
        return this._Div('tag', oPt, inside, View.__super__.xT_foreach.call(this, oPt));
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        return this._Err('tag', oPt, e);
      }
    };

    View.prototype.xT_explain = function(oPt) {
      return JSON.stringify(this.Epic.getViewTable(oPt.attrs.table));
    };

    View.prototype._TagText = function(oPt, asError) {
      var attrs, key, letter, page, type, val, _ref, _ref1;
      _ref = this.getLetTypPag(), letter = _ref[0], type = _ref[1], page = _ref[2];
      attrs = [];
      _ref1 = oPt.attrs;
      for (key in _ref1) {
        val = _ref1[key];
        attrs.push("" + key + "=\"" + val + "\"");
      }
      return "<e-" + oPt.tag + " " + (attrs.join(' ')) + ">";
    };

    View.prototype._Div = function(type, oPt, inside, after) {
      if (after == null) {
        after = '';
      }
      return "<div class=\"dbg-" + type + "-box\">" + (this._TagText(oPt)) + inside + "</div>" + after;
    };

    View.prototype._Err = function(type, oPt, e) {
      var stack, title;
      _log2('### _Err type/oPt/e', type, oPt, {
        e: e,
        m: e.message,
        s: e.stack
      });
      stack = this.Opts().stack ? "<pre>\n" + e.stack + "</pre>" : '';
      title = (e.stack.split('\n'))[1];
      return {
        tag: 'div',
        attrs: {
          className: "dbg-" + type + "-error-box"
        },
        children: [
          this._TagText(oPt, true), m('br'), m('dir', {
            className: "dbg-" + type + "-error-msg",
            title: title
          }, e.message), stack
        ]
      };
    };

    return View;

  })(E.Model.View$Base);

  E.Model.View$Dev = View;

}).call(this);
