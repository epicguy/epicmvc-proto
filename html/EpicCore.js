// Generated by CoffeeScript 1.4.0
'use strict';

var Fist, FistFilt, Issue, ModelJS, app, klass, nm, w, _ref,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

app = function(window, undef) {
  var E, Extra, Model, aClicks, aFists, aFlows, aMacros, aModels, aSetting, appFindAttr, appFindClick, appFindNode, appFist, appGetF, appGetS, appGetSetting, appGetT, appGetVars, appInit, appLoadFormsIf, appModel, appStartS, appStartT, appconfs, cacheByGrp, click, clickAction, counter, fgGetCanonicalFist, fgGetFieldDefsForFist, fgGetFieldDefsForGroup, fgGetFistDef, fgGetFistDefsForGroup, fgGetFistGroup, finish_logout, inClick, make_model_functions, merge, nm, oFist, oModel, obj, option, setModelState, type_oau, _d_clickAction, _ref;
  inClick = false;
  counter = 0;
  Model = {};
  Extra = {};
  oModel = {};
  oFist = {};
  appconfs = [];
  option = {
    load_dirs: []
  };
  E = {};
  E.nextCounter = function() {
    return ++counter;
  };
  type_oau = function(obj) {
    return {}.toString.call(obj)[8];
  };
  merge = function() {
    var atype, depth, dest, dup, f, func, otype, source, sources, stype, utype, _i, _len;
    dest = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    otype = 'O';
    atype = 'A';
    utype = 'U';
    stype = 'S';
    depth = 0;
    func = {};
    func[otype] = function(dest, source) {
      var ans, f, snm;
      f = 'func:O';
      if ((type_oau(source)) !== otype) {
        return undef;
      }
      for (snm in source) {
        ans = dup(dest[snm], source[snm]);
        if (ans !== undef) {
          dest[snm] = ans;
        }
      }
      return undef;
    };
    func[atype] = function(dest, source) {
      var ans, f, inx, s, _i, _len;
      f = 'func:A';
      if ((type_oau(source)) !== atype) {
        reutrn(undef);
      }
      for (inx = _i = 0, _len = source.length; _i < _len; inx = ++_i) {
        s = source[inx];
        ans = dup(dest[inx], s);
        if (ans !== undef) {
          dest[inx] = ans;
        }
      }
      return undef;
    };
    func[utype] = function(was, want) {
      var become, f;
      f = 'func:U';
      switch (type_oau(want)) {
        case otype:
          become = {};
          func[otype](become, want);
          break;
        case atype:
          become = [];
          func[atype](become, want);
          break;
        default:
          become = want;
      }
      return become;
    };
    func[stype] = function(was, want) {
      if ((type_oau(want)) in func) {
        return want;
      }
      return was;
    };
    dup = function(dest, source) {
      var r, type;
      depth++;
      type = type_oau(dest);
      if (!(type in func)) {
        type = stype;
      }
      r = func[type](dest, source);
      depth--;
      return r;
    };
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      f = ':merge:source-loop';
      dup(dest, source);
    }
    return dest;
  };
  E.login = function() {
    var f, k, o, _results;
    f = ':login';
    _log2(f, oModel);
    _results = [];
    for (k in oModel) {
      o = oModel[k];
      _results.push(typeof o.eventLogin === "function" ? o.eventLogin() : void 0);
    }
    return _results;
  };
  E.logout = function(click_event, click_data) {
    var _this = this;
    if (inClick !== false) {
      setTimeout((function() {
        return E.logout(click_event, click_data);
      }), 100);
      return;
    }
    if (click_event) {
      return (click(click_event, click_data)).then(function() {
        return finish_logout();
      });
    } else {
      return finish_logout();
    }
  };
  finish_logout = function() {
    var k, o;
    for (k in oModel) {
      o = oModel[k];
      if (!(typeof o.eventLogout === "function" ? o.eventLogout() : void 0)) {
        continue;
      }
      delete modelState[k];
      delete oModel[k];
    }
    return oFist = {};
  };
  E.fist = function(flist_nm, grp_nm) {
    var f, fist_nm, inst_nm, t, view_nm, _ref;
    if (!grp_nm) {
      _ref = E.App().getStepPath(), f = _ref[0], t = _ref[1];
      grp_nm = E.oA.getGroupNm(f(t));
    }
    fist_nm = E.fistGrp().fist(grp_nm, flist_nm);
    inst_nm = "" + grp_nm + "_" + fist_nm;
    if (!(inst_nm in oFist)) {
      view_nm = E.oA.fist(grp_nm, fist_nm);
      oFist[inst_nm] = new E.Fist(grp_nm, fist_nm, view_nm, flist_nm);
    }
    return oFist[inst_nm];
  };
  E.run = function(set_appconfs, more_options, init_func) {
    var promise;
    appconfs = set_appconfs;
    appInit();
    merge(option, more_options);
    E.oLoader = new Extra[option.loader](appconfs);
    promise = E.oLoader.D_loadAsync();
    promise.then(function() {
      if (typeof init_func === 'function') {
        init_func();
      }
      E.App().go(aSetting.go);
      return E.oRender = new Extra[option.render];
    });
  };
  click = function(action_token, data) {
    var f;
    f = ':click:' + action_token;
    _log2(f, data);
    if (inClick !== false) {
      if (typeof option.c1 === "function") {
        option.c1();
      }
    }
    inClick = action_token;
    m.startComputation();
    return (clickAction(action_token, data, E.App().getStepPath())).then(function(click_result) {
      var k, modelState, o, ss;
      E.App().setIssues(click_result[0]);
      E.App().setMessages(click_result[1]);
      inClick = false;
      modelState = {};
      for (k in oModel) {
        o = oModel[k];
        if ((o.saveState != null) && (ss = o.saveState())) {
          modelState[k] = ss;
        }
      }
      return m.endComputation();
    });
  };
  setModelState = function(s) {
    var inst_nm, modelState, _base, _results;
    if (s != null) {
      modelState = s;
    }
    _results = [];
    for (inst_nm in oModel) {
      _results.push(typeof (_base = oModel[inst_nm]).restoreState === "function" ? _base.restoreState(modelState[inst_nm]) : void 0);
    }
    return _results;
  };
  aSetting = {
    frames: {},
    modals: {},
    layout: 'default',
    go: 'default//'
  };
  aMacros = {};
  aClicks = {};
  aFlows = {
    "default": {
      start: 'default',
      TRACKS: {
        "default": {
          start: 'default',
          STEPS: {
            "default": {}
          }
        }
      }
    }
  };
  aModels = {};
  aFists = false;
  appLoadFormsIf = function(config) {
    var form_nm, group, node, view_nm, _i, _len, _ref, _ref1, _ref2;
    if (aFists === false) {
      aFists = {};
      for (view_nm in aModels) {
        node = aModels[view_nm];
        if (!node.fists) {
          continue;
        }
        group = (_ref = node.group) != null ? _ref : aSetting.group;
        if ((_ref1 = aFists[group]) == null) {
          aFists[group] = {};
        }
        _ref2 = node.forms;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          form_nm = _ref2[_i];
          aFists[group][form_nm] = view_nm;
        }
      }
    }
  };
  appInit = function() {
    var nm, obj, _i, _len, _ref, _ref1;
    for (_i = 0, _len = appconfs.length; _i < _len; _i++) {
      nm = appconfs[_i];
      app = (_ref = E['app$' + nm]) != null ? _ref : {};
      if (app.STEPS) {
        merge(aFlows["default"].TRACKS["default"].STEPS, app.STEPS);
      }
      if (app.TRACKS) {
        merge(aFlows["default"].TRACKS, app.TRACKS);
      }
      _ref1 = {
        SETTINGS: aSetting,
        MACROS: aMacros,
        CLICKS: aClicks,
        FLOWS: aFlows,
        MODELS: aModels,
        OPTIONS: option
      };
      for (nm in _ref1) {
        obj = _ref1[nm];
        merge(obj, app[nm]);
      }
    }
    make_model_functions();
  };
  appModel = function(view_name, attribute) {
    if (!(view_name in aModels)) {
      config.a1(view_name);
    }
    if (!(attribute in aModels[view_name])) {
      option.a2(view_name, attribute);
    }
    return aModels[view_name][attribute];
  };
  appFist = function(group_nm, fist_nm) {
    appLoadFormsIf();
    return aFist[group_nm][fist_nm];
  };
  appFindNode = function(flow, t, s, cat, nm) {
    var ncat, nf, ns, nt, _ref, _ref1, _ref2, _ref3, _ref4;
    nf = aFlows[flow];
    if (nf) {
      if (t && ((nt = (_ref = nf.TRACKS) != null ? _ref[t] : void 0) != null)) {
        if (s && ((ns = (_ref1 = nt.STEPS) != null ? _ref1[s] : void 0) != null)) {
          if ((ncat = (_ref2 = ns[cat]) != null ? _ref2[nm] : void 0) != null) {
            return ncat;
          }
        }
        if ((ncat = (_ref3 = nt[cat]) != null ? _ref3[nm] : void 0) != null) {
          return ncat;
        }
      }
      if ((ncat = (_ref4 = nf[cat]) != null ? _ref4[nm] : void 0) != null) {
        return ncat;
      }
    }
    return null;
  };
  appFindAttr = function(flow, t, s, attr) {
    var nattr, nf, ns, nt, _ref, _ref1;
    nf = aFlows[flow];
    if (nf) {
      if (t && ((nt = (_ref = nf.TRACKS) != null ? _ref[t] : void 0) != null)) {
        if (s && ((ns = (_ref1 = nt.STEPS) != null ? _ref1[s] : void 0) != null)) {
          if ((nattr = ns[attr]) != null) {
            return nattr;
          }
        }
        if ((nattr = nt[attr]) != null) {
          return nattr;
        }
      }
      if ((nattr = nf[attr]) != null) {
        return nattr;
      }
    }
    return null;
  };
  appGetF = function(flow) {
    return aFlows[flow];
  };
  appGetT = function(flow, track) {
    return aFlows[flow].TRACKS[track];
  };
  appGetS = function(flow, track, step) {
    return aFlows[flow].TRACKS[track].STEPS[step];
  };
  appStartT = function(flow) {
    return appGetF(flow).start;
  };
  appStartS = function(flow, track) {
    return appGetT(flow, track).start;
  };
  appFindClick = function(path, action_token) {
    var _ref;
    return (_ref = appFindNode(path[0], path[1], path[2], 'CLICKS', action_token)) != null ? _ref : aClicks[action_token];
  };
  appGetSetting = function(setting_name, flow, track, step) {
    var _ref;
    if (!flow) {
      return aSetting[setting_name];
    }
    return (_ref = appFindAttr(flow, track, step != null ? step : false, setting_name)) != null ? _ref : aSetting[setting_name];
  };
  appGetVars = function(flow, track, step) {
    var f, k, v, vars;
    f = ':appGetVars';
    vars = merge({}, aFlows[flow].v, aFlows[flow].TRACKS[track].v, aFlows[flow].TRACKS[track].STEPS[step].v);
    _log2(f, ((function() {
      var _results;
      _results = [];
      for (k in vars) {
        if (!__hasProp.call(vars, k)) continue;
        v = vars[k];
        _results.push("" + k + ":" + v);
      }
      return _results;
    })()).join(', '));
    return vars;
  };
  make_model_functions = function() {
    var model, view, _results;
    _results = [];
    for (view in aModels) {
      model = aModels[view];
      _results.push((function(view, model) {
        return E[view] = function(table_or_ctx, act_if_action, data) {
          var cls, inst_nm, oM;
          inst_nm = model.inst;
          if (!(inst_nm in oModel)) {
            cls = model["class"];
            if (!(E.Model[cls] != null)) {
              option.m1(view, model);
            }
            oModel[inst_nm] = new E.Model[cls](view, model.options);
            if (inst_nm in oModel) {
              oModel[inst_nm].restoreState(oModel[inst_nm]);
            }
          }
          oM = oModel[inst_nm];
          if (table_or_ctx === undef) {
            return oM;
          }
          if (act_if_action === undef) {
            return oM.getTable(table_or_ctx);
          }
          return oM.action(table_or_ctx, act_if_action, data);
        };
      })(view, model));
    }
    return _results;
  };
  clickAction = function(action_token, data, original_path) {
    var d;
    d = new m.Deferred();
    d.resolve(_d_clickAction(action_token, data, original_path));
    return d.promise;
  };
  _d_clickAction = function(action_token, data, original_path) {
    var click_node, doClickNode, doLeftSide, doRightSide, f, master_data, master_issue, master_message;
    f = ":clickAction(" + action_token + ")";
    _log2(f, data, original_path);
    master_issue = new Issue('App');
    master_message = new Issue('App');
    master_data = merge({}, data);
    click_node = appFindClick(original_path, action_token);
    _log2(f, click_node);
    if (!(click_node != null)) {
      _log2('WARNING', "No app. entry for action_token (" + action_token + ") on path (" + original_path + ")");
      return [master_issue, master_message];
    }
    doLeftSide = function(click_node) {
      var ctx, d, i, is_macro, mg, nm, nms, r, val, view_act, view_nm, _i, _len, _ref, _ref1, _ref2;
      _log2(f, 'doLeftSide:', {
        click_node: click_node
      });
      if (click_node.go != null) {
        E.App().go(click_node.go);
      }
      nms = (function() {
        switch (type_oau(click_node.pass)) {
          case 'A':
            return click_node.pass;
          case 'S':
            return click_node.pass.split(',');
          default:
            return [];
        }
      })();
      for (_i = 0, _len = nms.length; _i < _len; _i++) {
        nm = nms[_i];
        if (!(nm in data)) {
          _log2('WARNING', "Action (" + action_token + ") request data is missing param " + nm, data, click_node, original_path);
        }
      }
      _ref = click_node.set;
      for (nm in _ref) {
        val = _ref[nm];
        master_data[nm] = val;
      }
      if (click_node["do"] != null) {
        is_macro = !/[.]/.test(click_node["do"]);
        if (is_macro) {
          if (!aMacros[click_node["do"]]) {
            if (typeof option.ca2 === "function") {
              option.ca2(action_token, original_path, click_node);
            }
          }
          if (is_macro) {
            return doClickNode(aMacros[click_node["do"]]);
          }
        }
        _ref1 = click_node["do"].split('.'), view_nm = _ref1[0], view_act = _ref1[1];
        view_act = view_act != null ? view_act : action_token;
        d = new m.Deferred();
        r = {};
        i = new E.Issue(view_nm, view_act);
        mg = new E.Issue(view_nm, view_act);
        ctx = {
          d: d,
          r: r,
          i: i,
          m: mg
        };
        E[view_nm](ctx, view_act, master_data);
        _ref2 = ctx.r;
        for (nm in _ref2) {
          val = _ref2[nm];
          master_data[nm] = val;
        }
        master_issue.addObj(ctx.i);
        return master_message.addObj(ctx.m);
      }
    };
    doRightSide = function(click_node) {
      var choice, k, matches, next_node, val, _i, _len, _ref, _ref1, _ref2, _ref3;
      next_node = null;
      _ref1 = (_ref = click_node.next) != null ? _ref : [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        choice = _ref1[_i];
        if (choice.when === 'default') {
          next_node = choice;
          break;
        }
        if ((typeof choice.when) === 'string' && choice.when === ((_ref2 = master_data.success) != null ? _ref2 : master_data.ok)) {
          next_node = choice;
          break;
        }
        matches = true;
        _ref3 = choice.when;
        for (k in _ref3) {
          val = _ref3[k];
          if (master_data[k] !== val) {
            matches = false;
            break;
          }
        }
        if (matches) {
          next_node = choice;
          break;
        }
      }
      if (next_node) {
        _log2('doRightSide:', {
          next_node: next_node
        });
        doClickNode(next_node);
      }
    };
    doClickNode = function(click_node) {
      doLeftSide(click_node);
      return doRightSide(click_node);
    };
    doClickNode(click_node);
    return [master_issue, master_message];
  };
  cacheByGrp = [];
  fgGetFistGroup = function(grp_nm) {
    var _ref;
    option.fg1(grp_nm(f(!((_ref = cacheByGrp[grp_nm]) != null ? _ref : cacheByGrp[grp_nm] = E.oLoader.fist(grp_nm)))));
    return cacheByGrp[grp_nm];
  };
  fgGetFistDef = function(grp_nm, flist_nm) {
    var fgroup;
    fgroup = fgGetFistGroup(grp_nm);
    if (!fgroup.FISTS[flist_nm]) {
      option.fg2(grp_nm, flist_nm);
    }
    return fgroup.FISTS[flist_nm];
  };
  fgGetFieldDefsForGroup = function(grp_nm) {
    return fgGetFistGroup(grp_nm).FIELDS;
  };
  fgGetFistDefsForGroup = function(grp_nm) {
    return fgGetFistGroup(grp_nm).FISTS;
  };
  fgGetFieldDefsForFist = function(grp_nm, flist_nm) {
    var fgroup, fieldDef, nm, _i, _len, _ref;
    fgroup = fgGetFistGroup(grp_nm);
    fieldDef = {};
    _ref = fgGetFistDef(grp_nm, flist_nm);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      nm = _ref[_i];
      if (!(nm in fgroup.FIELDS)) {
        option.fg3(grp_nm, flist_nm, nm);
      }
      fieldDef[nm] = fgroup.FIELDS[nm];
    }
    return fieldDef;
  };
  fgGetCanonicalFist = function(grp_nm, flist_nm) {
    return (flist_nm.split('_'))[0];
  };
  _ref = {
    type_oau: type_oau,
    Model: Model,
    Extra: Extra,
    option: option,
    click: click,
    merge: merge,
    appconfs: appconfs,
    appGetF: appGetF,
    appGetT: appGetT,
    appGetS: appGetS,
    appStartT: appStartT,
    appStartS: appStartS,
    appFindClick: appFindClick,
    appGetSetting: appGetSetting,
    appGetVars: appGetVars,
    oModel: oModel,
    oFist: oFist
  };
  for (nm in _ref) {
    obj = _ref[nm];
    E[nm] = obj;
  }
  return E;
};

Fist = (function() {

  function Fist(Epic, grp_nm, flist_nm, view_nm) {
    var oG;
    this.Epic = Epic;
    this.grp_nm = grp_nm;
    this.view_nm = view_nm;
    oG = this.Epic.getFistGroupCache();
    flist_nm = oG.getCanonicalFist(grp_nm, flist_nm);
    this.fist_nm = flist_nm;
    this.oM = E[this.view_nm]();
    this.form_state = 'empty';
    this.fistDef = oG.getFistDef(grp_nm, this.fist_nm);
    this.cache_field_choice = [];
    this.filt = FistFilt;
    this.Fb_ClearValues();
    this.upload_todo = [];
    this.upload_fl = {};
    this.focus_fl_nm = false;
  }

  Fist.prototype.getGroupNm = function() {
    return this.grp_nm;
  };

  Fist.prototype.getFistNm = function() {
    return this.fist_nm;
  };

  Fist.prototype.loadFieldDefs = function() {
    var _ref;
    return (_ref = this.fieldDef) != null ? _ref : this.fieldDef = this.Epic.getFistGroupCache().getFieldDefsForFist(this.grp_nm, this.fist_nm);
  };

  Fist.prototype.getFieldsDefs = function() {
    return this.loadFieldDefs();
  };

  Fist.prototype.loadFieldChoices = function(fl) {
    var ct, f, final_obj, json, k, rec, row, v, w_opt, w_val, wist, wist_grp, wist_nm, _i, _j, _len, _len1, _ref, _ref1;
    f = ':Fist.loadFieldChoices:' + fl;
    final_obj = {
      options: [],
      values: []
    };
    if (true) {
      this.loadFieldDefs();
      ct = this.fieldDef[fl].type.split(':');
      switch (ct[1]) {
        case 'custom':
          final_obj = this.oM.fistGetFieldChoices(this, fl);
          break;
        case 'array':
          _ref = this.fieldDef[fl].cdata;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            rec = _ref[_i];
            if (typeof rec === 'object') {
              final_obj.options.push(String(rec[1]));
              final_obj.values.push(String(rec[0]));
            } else {
              final_obj.options.push(String(rec));
              final_obj.values.push(String(rec));
            }
          }
          break;
        case 'json_like':
          json = this.fieldDef[fl].cdata.replace(/'/g, '"').replace(/"""/g, "'");
          json = JSON.parse(json);
          for (k in json) {
            v = json[k];
            final_obj.options.push(k);
            final_obj.values.push(v);
          }
          break;
        case 'wist':
          _ref1 = this.fieldDef[fl].cdata.split(':'), wist_grp = _ref1[0], wist_nm = _ref1[1], w_val = _ref1[2], w_opt = _ref1[3];
          wist = this.Epic.getViewTable("Wist/" + wist_grp + ":" + wist_nm);
          for (_j = 0, _len1 = wist.length; _j < _len1; _j++) {
            row = wist[_j];
            final_obj.options.push(row[w_opt]);
            final_obj.values.push(row[w_val]);
          }
          _log2(f, final_obj);
      }
      this.cache_field_choice[fl] = final_obj;
    }
  };

  Fist.prototype.getHtmlPostedFieldsList = function(flist_nm) {
    var fistDef;
    fistDef = this.fistDef;
    if ((flist_nm != null) && flist_nm !== this.fist_nm) {
      fistDef = this.Epic.getFistGroupCache().getFistDef(this.grp_nm, flist_nm);
    }
    return fistDef;
  };

  Fist.prototype.getFieldAttributes = function(fl_nm) {
    return (this.Epic.getFistGroupCache().getFieldDefsForGroup(this.grp_nm))[fl_nm];
  };

  Fist.prototype.getHtmlFieldValue = function(fl_nm) {
    this.loadData();
    return this.fb_HTML[fl_nm];
  };

  Fist.prototype.getHtmlFieldValues = function() {
    this.loadData();
    _log2('getHtmlFieldValues', this.fist_nm, this.fb_HTML);
    return this.fb_HTML;
  };

  Fist.prototype.getDbFieldValue = function(fl_nm) {
    this.loadData();
    return this.fb_DB[fl_nm];
  };

  Fist.prototype.getDbFieldValues = function() {
    this.loadData();
    return this.fb_DB;
  };

  Fist.prototype.getFieldIssues = function() {
    return this.fb_issues;
  };

  Fist.prototype.getFocus = function() {
    return this.focus_fl_nm;
  };

  Fist.prototype.setFocus = function(fl_nm) {
    return this.focus_fl_nm = fl_nm;
  };

  Fist.prototype.getChoices = function(fl_nm) {
    this.loadFieldChoices(fl_nm);
    return this.cache_field_choice[fl_nm];
  };

  Fist.prototype.fieldLevelValidate = function(data, flist_nm, clear_issues) {
    this.form_state = 'posted';
    return this.Fb_FistValidate(data, flist_nm != null ? flist_nm : this.fist_nm, clear_issues != null ? clear_issues : true);
  };

  Fist.prototype.loadData = function(data) {
    if (this.form_state === 'empty') {
      this.oM.fistLoadData(this);
      this.form_state = 'loaded';
    }
  };

  Fist.prototype.setFromDbValues = function(data) {
    this.Fb_SetHtmlValuesFromDb(data);
    this.form_state = 'loaded';
  };

  Fist.prototype.setFromHTMLValues = function(data) {
    this.Fb_SetHtmlValuesFromHtml(data);
    this.form_state = 'loaded';
  };

  Fist.prototype.eventNewRequest = function(changed) {
    if (changed.step) {
      this.clearValues();
      this.upload_todo = [];
      this.uploaded_fl = {};
    }
  };

  Fist.prototype.clearIssues = function(html_nm) {
    if (html_nm) {
      delete this.fb_issues[html_nm];
    } else {
      this.fb_issues = {};
    }
  };

  Fist.prototype.clearValues = function() {
    if (this.form_state !== 'empty') {
      this.Fb_ClearValues();
      this.form_state = 'empty';
    }
  };

  Fist.prototype.Fb_SetHtmlValuesFromDb = function(data) {
    var dbnms, k, _i, _len;
    dbnms = this.Fb_DbNames();
    for (_i = 0, _len = dbnms.length; _i < _len; _i++) {
      k = dbnms[_i];
      if (k in data) {
        this.fb_DB[k] = data[k];
      }
    }
    return this.Fb_Db2Html();
  };

  Fist.prototype.Fb_SetHtmlValuesFromHtml = function(data) {
    this.Fb_Html2Html(data, this.fist_nm);
    return null;
  };

  Fist.prototype.Fb_ClearValues = function() {
    this.fb_DB = {};
    this.fb_HTML = {};
    this.fb_issues = {};
    return this.Fb_Db2Html();
  };

  Fist.prototype.Fb_FistValidate = function(data, flist_nm, clear_issues) {
    var issues;
    if (clear_issues === true) {
      this.fb_issues = {};
    }
    this.Fb_Html2Html(data, flist_nm);
    issues = new Issue;
    issues.call(this.Fb_Check(flist_nm));
    if (issues.count() === 0) {
      this.Fb_Html2Db(flist_nm);
      issues.call(this.Fb_Check(flist_nm, true));
    }
    return issues;
  };

  Fist.prototype.Fb_DbNames = function(flist_nm) {
    var db_nm, nm, rec, _ref, _ref1;
    if ((flist_nm != null) && flist_nm !== this.fist_nm) {
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.getHtmlPostedFieldsList(flist_nm);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          nm = _ref[_i];
          _results.push(this.fieldDef[nm].db_nm);
        }
        return _results;
      }).call(this);
    }
    if (!(this.fb_DB_names != null)) {
      this.loadFieldDefs();
      this.dbNm2HtmlNm = {};
      _ref = this.fieldDef;
      for (nm in _ref) {
        rec = _ref[nm];
        this.dbNm2HtmlNm[rec.db_nm] = nm;
      }
      if ((_ref1 = this.fb_DB_names) == null) {
        this.fb_DB_names = (function() {
          var _results;
          _results = [];
          for (db_nm in this.dbNm2HtmlNm) {
            _results.push(db_nm);
          }
          return _results;
        }).call(this);
      }
    }
    return this.fb_DB_names;
  };

  Fist.prototype.Fb_Make = function(main_issue, field, token_data) {
    var f, _ref;
    f = 'Fist.Fb_Make:' + field;
    if (token_data === true) {
      return false;
    }
    if ((_ref = this.issue_inline) == null) {
      this.issue_inline = E.oA.getShowIssues() === 'inline';
    }
    _log2(f, field, token_data, {
      inline: this.issue_inline
    });
    if (this.issue_inline) {
      this.fb_issues[field] = Issue.Make(this.view_nm, token_data[0], token_data[1]);
      if (main_issue.count() === 0) {
        main_issue.add('FORM_ERRORS', [this.fistName]);
      }
    } else {
      main_issue.add(token_data[0], token_data[1]);
    }
    return true;
  };

  Fist.prototype.Fb_Html2Html = function(p, flist_nm) {
    var f, nm, value, _i, _len, _ref;
    f = 'Fist.Fb_Html2Html';
    this.loadFieldDefs();
    _ref = this.getHtmlPostedFieldsList(flist_nm);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      nm = _ref[_i];
      value = p[nm];
      if ('H2H_prefilter' in this.filt) {
        value = this.filt.H2H_prefilter(nm, this.fieldDef[nm].h2h, value);
      }
      this.fb_HTML[nm] = this.filt.H2H_generic(nm, this.fieldDef[nm].h2h, value);
    }
  };

  Fist.prototype.Fb_Check = function(flist_nm, psuedo_only) {
    var db_nm, f, field, issue, issue_count, nm, p_nm, _i, _j, _len, _len1, _ref, _ref1;
    f = 'Fist.Fb_Check:' + flist_nm;
    issue = new Issue;
    _ref = this.Fb_DbNames(flist_nm);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      db_nm = _ref[_i];
      nm = this.dbNm2HtmlNm[db_nm];
      field = this.fieldDef[nm];
      if (psuedo_only) {
        if (field.type !== 'psuedo') {
          continue;
        }
      }
      if (field.type !== 'psuedo' || psuedo_only) {
        this.Fb_Make(issue, nm, this.Fb_Validate(nm, this.fb_HTML[nm]));
      } else {
        issue_count = 0;
        _ref1 = field.cdata;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p_nm = _ref1[_j];
          if (this.Fb_Make(issue, nm, this.Fb_Validate(nm + '_' + p_nm, this.fb_HTML[nm + '_' + p_nm]))) {
            issue_cnt += 1;
          }
        }
      }
    }
    return issue;
  };

  Fist.prototype.Fb_Validate = function(fieldName, value) {
    var f, field, _ref;
    f = 'Fist.Fb_Validate:' + fieldName;
    this.loadFieldDefs();
    field = (_ref = this.fieldDef[fieldName]) != null ? _ref : this.getFieldAttributes(fieldName);
    if ((!(value != null)) || value.length === 0) {
      if (field.req === true) {
        if (field.req_text) {
          return ['FIELD_EMPTY_TEXT', [fieldName, field.label, field.req_text]];
        } else {
          return ['FIELD_EMPTY', [fieldName, field.label]];
        }
      }
      return true;
    }
    if (field.max_len > 0 && value.length > field.max_len) {
      return ['FIELD_OVER_MAX', [fieldName, field.label, field.max_len]];
    }
    if (!this.filt['CHECK_' + field.validate](fieldName, field.validate_expr, value, this)) {
      if (field.issue_text) {
        return ['FIELD_ISSUE_TEXT', [fieldName, field.label, field.issue_text]];
      } else {
        return ['FIELD_ISSUE', [fieldName, field.label]];
      }
    }
    return true;
  };

  Fist.prototype.Fb_Html2Db = function(flist_nm) {
    var f, field, nm, p_nm, psuedo_prefix, value, _i, _len, _ref;
    f = 'Fist.Fb_Html2Db';
    this.loadFieldDefs();
    _ref = this.getHtmlPostedFieldsList(flist_nm);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      nm = _ref[_i];
      field = this.fieldDef[nm];
      psuedo_prefix = "";
      if (field.type !== 'psuedo') {
        value = this.fb_HTML[nm];
      } else {
        psuedo_prefix = '_psuedo';
        value = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = field.cdata;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p_nm = _ref1[_j];
            _results.push(this.fb_HTML[nm + '_' + p_nm]);
          }
          return _results;
        }).call(this);
      }
      this.fb_DB[field.db_nm] = this.filt['H2D_' + field.h2d + psuedo_prefix](nm, field.h2d_expr, value);
    }
  };

  Fist.prototype.Fb_Db2Html = function() {
    var db_nm, field, i, list, nm, p_nm, psuedo_fl, psuedo_prefix, subfield, value, _i, _j, _len, _len1, _ref, _ref1, _results;
    _ref = this.Fb_DbNames();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      db_nm = _ref[_i];
      nm = this.dbNm2HtmlNm[db_nm];
      field = this.fieldDef[nm];
      psuedo_fl = (field != null ? field.type : void 0) === 'psuedo' ? true : false;
      if (!(db_nm in this.fb_DB)) {
        if (!psuedo_fl) {
          this.fb_HTML[nm] = null;
        } else {
          _ref1 = field.cdata;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            subfield = _ref1[_j];
            this.fb_HTML[nm + '_' + subfield] = null;
          }
        }
        continue;
      }
      value = this.fb_DB[db_nm];
      psuedo_prefix = "";
      if (!psuedo_fl) {
        _results.push(this.fb_HTML[nm] = this.filt['D2H_' + field.d2h](db_nm + '%' + nm, field.d2h_expr, value));
      } else {
        switch (field.cdata.length) {
          case 0:
            _results.push(option.fb1(field));
            break;
          case 1:
            _results.push(BROKEN());
            break;
          default:
            list = this.filt['D2H_' + field.d2h + '_psuedo'](db_nm + '%' + nm, field.d2h_expr, value);
            _results.push((function() {
              var _k, _len2, _ref2, _results1;
              _ref2 = field.cdata;
              _results1 = [];
              for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
                p_nm = _ref2[i];
                _results1.push(this.fb_HTML[nm + '_' + p_nm] = list[i]);
              }
              return _results1;
            }).call(this));
        }
      }
    }
    return _results;
  };

  return Fist;

})();

FistFilt = (function() {

  function FistFilt() {}

  FistFilt.H2H_generic = function(fieldName, spec, value) {
    var k, new_value, one_spec, spec_ary, _base;
    new_value = value != null ? value : '';
    spec_ary = typeof (_base = spec != null ? spec : '').split === "function" ? _base.split(':') : void 0;
    for (k in spec_ary) {
      one_spec = spec_ary[k];
      new_value = (function() {
        switch (one_spec) {
          case '':
            return new_value;
          case 'trim_spaces':
            return (String(new_value)).trim();
          case 'digits_only':
            return new_value.replace(/[^0-9]/g, '');
          case 'lower_case':
            return new_value.toLowerCase();
          case 'upper_case':
            return new_value.toUpperCase();
          default:
            return option.ff1(fieldName, spec, one_spec);
        }
      })();
    }
    return new_value;
  };

  FistFilt.CHECK_ = function(fieldName, validateExpr, value, oF) {
    return true;
  };

  FistFilt.CHECK_null = function(fieldName, validateExpr, value, oF) {
    return true;
  };

  FistFilt.CHECK_undefined = function(fieldName, validateExpr, value, oF) {
    return true;
  };

  FistFilt.CHECK_any = function(fieldName, validateExpr, value, oF) {
    return true;
  };

  FistFilt.CHECK_phone = function(fieldName, validateExpr, value, oF) {
    var check_pat, re;
    switch (validateExpr) {
      case undef:
        value = value.replace(/[^0-9]/g, '');
        check_pat = '[0-9]{10}';
        break;
      default:
        BROKE();
    }
    re = new RegExp('^' + check_pat + '$');
    if (value.match(re)) {
      return true;
    } else {
      return false;
    }
  };

  FistFilt.CHECK_zip = function(fieldName, validateExpr, value, oF) {
    switch (validateExpr) {
      case '5or9':
        if (!value.match(/^[0-9]{5}(|[0-9]{4})$/)) {
          return false;
        }
        break;
      default:
        BROKE();
    }
    return true;
  };

  FistFilt.CHECK_choice = function(fieldName, validateExpr, value, oF) {
    _log2('CHECK_choice:value/values', value, oF.getChoices(fieldName).values);
    if (__indexOf.call(oF.getChoices(fieldName).values, value) < 0) {
      return false;
    }
    if (validateExpr) {
      if (oF.getChoices(fieldName).values[0] === value) {
        return false;
      }
    }
    return true;
  };

  FistFilt.CHECK_email = function(fieldName, validateExpr, value, oF) {
    var few, most, re, some;
    most = '[A-Z0-9._+%-]';
    some = '[A-Z0-9.-]';
    few = '[A-Z]';
    re = new RegExp("^" + most + "+@" + some + "+[.]" + few + "{2,4}$", 'i');
    if (value.match(re)) {
      return true;
    } else {
      return false;
    }
  };

  FistFilt.CHECK_regexp = function(fieldName, validateExpr, value, oF) {
    var re;
    re = new RegExp("^" + validateExpr + "$");
    if (value.match(re)) {
      return true;
    } else {
      return false;
    }
  };

  FistFilt.CHECK_confirm = function(fieldName, validateExpr, value, oF) {
    var other_value;
    other_value = oF.getHtmlFieldValue(validateExpr);
    if (other_value !== value) {
      return false;
    }
    return true;
  };

  FistFilt.H2D_ = function(fieldName, filtExpr, value) {
    return value;
  };

  FistFilt.H2D_undefined = function() {
    return this.H2D_.apply(this, arguments);
  };

  FistFilt.H2D__psuedo = function(fieldName, filtExpr, value) {
    return value;
  };

  FistFilt.H2D_date_psuedo = function(fieldName, filtExpr, value) {
    var Y, d, f, m;
    f = 'FF:H2D_date_psuedo';
    _log2(f, fieldName, filtExpr, value);
    m = value[0], d = value[1], Y = value[2];
    if (!((m != null) || (d != null) || (Y != null))) {
      return '';
    }
    if (m == null) {
      m = '';
    }
    if (d == null) {
      d = '';
    }
    if (Y == null) {
      Y = '';
    }
    if (m.length === 1) {
      m = '0' + m;
    }
    if (d.length === 1) {
      d = '0' + d;
    }
    return "" + Y + "-" + m + "-" + d;
  };

  FistFilt.H2D_join_psuedo = function(fieldName, filtExpr, value) {
    return value.join(filtExpr);
  };

  FistFilt.H2D_phone = function(fieldName, filtExpr, value) {
    return value.replace(/[^0-9]/g, '');
  };

  FistFilt.H2D_zero_is_blank = function(fieldName, filtExpr, value) {
    if (value === 0 || value === '0') {
      return '';
    } else {
      return value;
    }
  };

  FistFilt.D2H_ = function(fieldName, filtExpr, value) {
    return value;
  };

  FistFilt.D2H_undefined = function() {
    return this.D2H_.apply(this, arguments);
  };

  FistFilt.D2H_null = function() {
    return this.D2H_.apply(this, arguments);
  };

  FistFilt.D2H_phone = function(fieldName, filtExpr, value) {
    value = value.replace(/[^0-9]/g, '');
    return value.replace(/(...)(...)(...)/, '($1) $2-$3');
  };

  FistFilt.D2H_date = function(fieldName, filtExpr, value) {
    return this.D2H_date_psuedo(fieldName, filtExpr, value).join('/');
  };

  FistFilt.D2H_date_psuedo = function(fieldName, filtExpr, value) {
    var Y, d, f, m, _ref;
    f = 'FF:D2H_date_psuedo';
    _log2(f, fieldName, filtExpr, value);
    _ref = ((value != null ? value : '--').split(/[^0-9-]/))[0].split('-'), Y = _ref[0], m = _ref[1], d = _ref[2];
    return [(m != null ? m : '').replace(/^0/, ''), (d != null ? d : '').replace(/^0/, ''), Y];
  };

  FistFilt.D2H_blank_is_zero = function(fieldName, filtExpr, value) {
    if (value.length) {
      return value;
    } else {
      return '0';
    }
  };

  return FistFilt;

})();

Issue = (function() {

  function Issue(t_view, t_action) {
    this.t_view = t_view;
    this.t_action = t_action;
    this.issue_list = [];
  }

  Issue.Make = function(view, type, value_list) {
    var issue;
    issue = new Issue(view);
    issue.add(type, value_list);
    return issue;
  };

  Issue.prototype.add = function(type, msgs) {
    var f;
    f = ':Issue.add:' + this.t_view + ':' + this.t_action;
    _log2(f, 'params:type/msgs', type, msgs);
    switch (typeof msgs) {
      case 'undefined':
        msgs = [];
        break;
      case 'string':
        msgs = [msgs];
    }
    return this.issue_list.push({
      token: type,
      more: msgs,
      t_view: this.t_view,
      t_action: this.t_action
    });
  };

  Issue.prototype.addObj = function(issue_obj) {
    var f, issue, new_issue, _i, _len, _ref, _ref1, _ref2;
    f = ':Issue.addObj:' + this.t_view + '#' + this.t_action;
    if (typeof issue_obj !== 'object' || !('issue_list' in issue_obj)) {
      return;
    }
    _ref = issue_obj.issue_list;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      issue = _ref[_i];
      new_issue = E.merge({}, issue);
      if ((_ref1 = new_issue.t_view) == null) {
        new_issue.t_view = this.t_view;
      }
      if ((_ref2 = new_issue.t_action) == null) {
        new_issue.t_action = this.t_action;
      }
      this.issue_list.push(new_issue);
    }
  };

  Issue.prototype.count = function() {
    return this.issue_list.length;
  };

  Issue.prototype.asTable = function(map) {
    var final, issue, _i, _len, _ref;
    final = [];
    _ref = this.issue_list;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      issue = _ref[_i];
      final.push({
        token: issue.token,
        title: "" + issue.t_view + "#" + issue.t_action + "#" + issue.token + "#" + (issue.more.join(',')),
        issue: this.map(map, issue.t_view, issue.t_action, issue.token, issue.more)
      });
    }
    return final;
  };

  Issue.prototype.map = function(map, t_view, t_action, token, more) {
    var map_list, spec, sub_map, _i, _j, _len, _len1, _ref;
    if (typeof map !== 'object') {
      return "" + t_view + "#" + t_action + "#" + token + "#" + (more.join(','));
    }
    map_list = [];
    if (t_view in map) {
      if (t_action in map[t_view]) {
        map_list.push(map[t_view][t_action]);
      }
      if ('default' in map[t_view]) {
        map_list.push(map[t_view]["default"]);
      }
    }
    if ('default' in map) {
      if (t_action in map["default"]) {
        map_list.push(map["default"][t_action]);
      }
      if ('default' in map["default"]) {
        map_list.push(map["default"]["default"]);
      }
    }
    for (_i = 0, _len = map_list.length; _i < _len; _i++) {
      sub_map = map_list[_i];
      _ref = sub_map || [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        spec = _ref[_j];
        if (token.match(spec[0])) {
          return this.doMap(token, spec[1], more, token);
        }
      }
    }
    return "" + t_view + "#" + t_action + "#" + token + "#" + (more.join(','));
  };

  Issue.prototype.doMap = function(token, pattern, vals) {
    var new_str;
    new_str = pattern.replace(/%([0-9])(?::([0-9]))?%/g, function(str, i1, i2, more) {
      if (i1 === '0') {
        return token;
      }
      if (i2) {
        return vals[i1 - 1] || vals[i2 - 1] || '';
      } else {
        return vals[i1 - 1] || '';
      }
    });
    return new_str;
  };

  return Issue;

})();

ModelJS = (function() {

  function ModelJS(view_nm, options, ss) {
    this.view_nm = view_nm;
    this.options = options;
    this._ModelJS = {
      ss: ss || false
    };
    this.restoreState(false);
  }

  ModelJS.prototype.getTable = function(tbl_nm) {
    this.loadTableIf(tbl_nm);
    return this.Table[tbl_nm];
  };

  ModelJS.prototype.loadTableIf = function(tbl_nm) {
    if (!(tbl_nm in this.Table)) {
      return this.loadTable(tbl_nm);
    }
  };

  ModelJS.prototype.restoreState = function(copy_of_state) {
    var key;
    if (this._ModelJS.ss != null) {
      for (key in this._ModelJS.ss) {
        delete this[key];
      }
    }
    if (this._ModelJS.ss != null) {
      E.merge(this, this._ModelJS.ss);
    }
    if (copy_of_state) {
      E.merge(this, copy_of_state);
    }
    return this.Table = {};
  };

  ModelJS.prototype.saveState = function() {
    var nm, ss, st;
    ss = this._ModelJS.ss;
    if (!ss) {
      return false;
    }
    st = {};
    for (nm in ss) {
      if (this[nm] !== ss[nm]) {
        st[nm] = this[nm];
      }
    }
    return E.merge({}, st);
  };

  ModelJS.prototype.invalidateTables = function(tbl_nms, not_tbl_names) {
    var deleted_tbl_nms, f, nm, _i, _len;
    f = ':ModelJS.invalidateTables~' + this.view_nm;
    if (not_tbl_names == null) {
      not_tbl_names = [];
    }
    if (tbl_nms === true) {
      tbl_nms = (function() {
        var _results;
        _results = [];
        for (nm in this.Table) {
          if (!(__indexOf.call(not_tbl_names, nm) >= 0)) {
            _results.push(nm);
          }
        }
        return _results;
      }).call(this);
    }
    deleted_tbl_nms = [];
    for (_i = 0, _len = tbl_nms.length; _i < _len; _i++) {
      nm = tbl_nms[_i];
      if (nm in this.Table) {
        deleted_tbl_nms.push(nm);
        delete this.Table[nm];
      }
    }
    return E.View().invalidateTables(this.view_nm, tbl_nms, deleted_tbl_nms);
  };

  return ModelJS;

})();

w = typeof window !== "undefined" ? window : {};

w.EpicMvc = w.E = new app(w);

_ref = {
  Issue: Issue,
  Fist: Fist,
  ModelJS: ModelJS,
  FistFilt: FistFilt
};
for (nm in _ref) {
  klass = _ref[nm];
  w.E[nm] = klass;
}

w._log2 = function() {};

w._log2 = Function.prototype.bind.call(console.log, console);

if (typeof module !== "undefined" && module !== null) {
  module.exports = w.E;
}

if (typeof define === "function" && define.amd) {
  define(function() {
    return w.E;
  });
}
