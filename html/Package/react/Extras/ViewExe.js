// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var ViewExe, pad_a, pad_b, pad_c,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  pad_a = 18;

  pad_b = 4;

  pad_c = 24;

  window.pad = function(l, s) {
    var r;
    s = String(s);
    r = l - s.length;
    if (r < 0) {
      r = 0;
    }
    return s + (new Array(r + 1)).join(' ');
  };

  window.PagePart = React.createClass({
    displayName: 'Epic-PagePart:',
    getInitialState: function() {
      return {
        oE: this.props.oE.cb('getInitialState', this)
      };
    },
    getDefaultProps: function() {
      return {
        onClick: this.handleClick
      };
    },
    componentDidMount: function() {
      this.props.oE.cb('componentDidMount', this);
      return null;
    },
    componentDidUpdate: function() {
      return this.props.oE.cb('componentDidUpdate', this);
    },
    componentWillUnmount: function() {
      return this.props.oE.cb('componentWillUnmount', this);
    },
    handleClick: function() {
      return alert('YEP, component can "see" that last click of yours.');
    },
    render: function() {
      var content;
      content = this.props.oE.cb('render', this);
      if ('dynamic' in this.props) {
        return React.DOM[this.props.dynamic](this.props, content);
      } else {
        if (!content) {
          return null;
        }
        if (this.props.oE.has_root) {
          return content;
        } else {
          return React.DOM.div(this.props, content);
        }
      }
    }
  });

  ViewExe = (function() {

    function ViewExe(Epic, loader, content_watch) {
      var frames, ix, nm;
      this.Epic = Epic;
      this.loader = loader;
      this.content_watch = content_watch;
      this.T_page = __bind(this.T_page, this);

      this.handleIt = __bind(this.handleIt, this);

      this.context = __bind(this.context, this);

      frames = this.Epic.oAppConf.getFrames();
      this.frames = (function() {
        var _i, _len, _ref, _results;
        _ref = ((function() {
          var _results1;
          _results1 = [];
          for (nm in frames) {
            _results1.push(nm);
          }
          return _results1;
        })()).sort();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ix = _ref[_i];
          _results.push(frames[ix]);
        }
        return _results;
      })();
      this.frames.push(function() {
        return 'NOT-SET';
      });
      this.frame_inx = 0;
      this.page_name = false;
      window.oE = this;
      window.oR = React.DOM;
      this.EpicMvcApp = React.createClass({
        render: this.T_page
      });
      this.invalidateTablesTimer = false;
    }

    ViewExe.prototype.init = function(template, page) {
      var handle, _ref, _ref1, _ref2;
      this.template = template;
      this.page = page;
      this.page_name = page;
      this.frames[this.frames.length - 1] = template;
      this.frame_inx = 0;
      this.info_foreach = {};
      this.info_parts = [{}];
      this.info_if_nms = {};
      if (true) {
        if ((_ref = this.context_handles) == null) {
          this.context_handles = {};
        }
        for (handle in this.context_handles) {
          this.context(':init', {
            state: {
              oE: handle
            }
          });
        }
        this.context_active = false;
        if ((_ref1 = this.context_audit) == null) {
          this.context_audit = [];
        }
        this.context_dirty = {};
        return (_ref2 = this.context_refs) != null ? _ref2 : this.context_refs = {};
      }
    };

    ViewExe.prototype.run = function() {
      var handle, result, start;
      if (true) {
        for (handle in this.context_handles) {
          this.context_audit.push("" + (pad(pad_a + pad_b, ':run')) + handle);
        }
      }
      _log2('START RUN', start = new Date().getTime());
      result = this.T_page();
      _log2('END RUN', new Date().getTime() - start);
      return result;
    };

    ViewExe.prototype.invalidateTables = function(view_nm, tbl_nms) {
      var f, tbl, _i, _len,
        _this = this;
      f = ':react:ViewExe.invalidateTables';
      _log2(f, view_nm, tbl_nms);
      if (this.Epic.inClick !== false || this.page_name === false) {
        return 'not now';
      }
      if (true) {
        for (_i = 0, _len = tbl_nms.length; _i < _len; _i++) {
          tbl = tbl_nms[_i];
          this.context('ref_dirty', view_nm, tbl);
        }
      }
      if (this.invalidateTablesTimer === false) {
        this.invalidateTablesTimer = setTimeout(function() {
          var comp, key, val, _ref;
          _this.invalidateTablesTimer = false;
          _ref = _this.context_dirty;
          for (key in _ref) {
            val = _ref[key];
            if (!(val === true)) {
              continue;
            }
            comp = _this.context_handles[key].that;
            _this.context_audit.push("" + (pad(pad_a + pad_b, ':IT in')) + key);
            comp.setState({
              oE: $.extend(comp.state.oE, {
                tableRefCnt: comp.state.oE.tableRefCnt + 1
              })
            });
            _this.context_audit.push("" + (pad(pad_a + pad_b, ':IT out')) + key);
          }
        }, 33);
        return 'started timer';
      }
    };

    ViewExe.prototype.doDefer = function() {
      return null;
    };

    ViewExe.prototype.context = function(action, that, extra, more) {
      var content, defer, f, handle, info_foreach, info_parts, key, key_comp, key_mt, match, mt, ref, sep, _i, _len, _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      f = ':react:ViewExe.context: ' + action;
      handle = action === 'getInitialState' ? this.Epic.nextCounter() : that != null ? (_ref = that.state) != null ? (_ref1 = _ref.oE) != null ? _ref1.handle : void 0 : void 0 : void 0;
      sep = '~';
      if (action !== 'ref_add' && action !== 'ref_dirty') {
        this.context_audit.push("" + (pad(pad_a, action)) + (pad(pad_b, handle != null ? handle : 'H')) + (pad(pad_c, (_ref2 = that != null ? (_ref3 = that.props) != null ? (_ref4 = _ref3.oE) != null ? _ref4.view : void 0 : void 0 : void 0) != null ? _ref2 : 'DN')) + " [" + ((_ref5 = that != null ? (_ref6 = that._owner) != null ? (_ref7 = _ref6.state) != null ? (_ref8 = _ref7.oE) != null ? _ref8.handle : void 0 : void 0 : void 0 : void 0) != null ? _ref5 : 'O') + "]");
      }
      if ((action !== 'ref_add' && action !== 'ref_dirty') && handle && this.context_handles[handle]) {
        if ((_ref9 = this.context_handles[handle]) != null) {
          _ref9.audit.push({
            action: action,
            that: that,
            extra: extra,
            more: more
          });
        }
      }
      switch (action) {
        case 'getViewState':
          info_foreach = $.extend(true, {}, this.info_foreach);
          info_parts = $.extend({}, this.info_parts[this.info_parts.length - 1]);
          return {
            info_foreach: info_foreach,
            info_parts: info_parts
          };
        case 'getInitialState':
          this.context_handles[handle] = {
            view: that.props.oE.view,
            that: that,
            audit: []
          };
          return {
            handle: handle,
            tableRefCnt: 1
          };
        case 'render':
          if (this.context_active !== false) {
            BLOWUP_CONTEXT_ACTIVE_NOT_FALSE();
          }
          this.context_active = handle;
          this.context_dirty[handle] = false;
          match = handle + sep;
          for (key in this.context_refs) {
            if ((key.slice(0, match.length)) === match) {
              delete this.context_refs[key];
            }
          }
          ref = this.context_handles[handle];
          ref.defer = [];
          this.info_parts.push(that.props.oE.info_parts);
          this.info_foreach = $.extend(true, {}, that.props.oE.info_foreach);
          content = this.handleIt(that.props.oE.content);
          this.info_parts.pop();
          this.context_active = false;
          return content;
        case 'ref_add':
          if (this.context_active === false) {
            BLOWUP_CONTEXT_ACTIVE_IS_FALSE();
          }
          mt = that + '/' + extra;
          this.context_refs[this.context_active + sep + mt] = true;
          break;
        case 'ref_dirty':
          mt = that + '/' + extra;
          for (key in this.context_refs) {
            _ref10 = key.split(sep), key_comp = _ref10[0], key_mt = _ref10[1];
            if (key_mt === mt) {
              this.context_dirty[key_comp] = true;
            }
          }
          break;
        case 'componentDidMount':
        case 'componentDidUpdate':
          _ref11 = this.context_handles[handle].defer;
          for (_i = 0, _len = _ref11.length; _i < _len; _i++) {
            defer = _ref11[_i];
            _log2(f, handle, defer);
            defer.func('react', {
              that: that
            }, defer.attrs);
          }
          break;
        case 'componentWillUnmount':
          delete this.context_dirty[handle];
          match = handle + sep;
          for (key in this.context_refs) {
            if ((key.slice(0, match.length)) === match) {
              delete this.context_refs[key];
            }
          }
          delete this.context_handles[handle];
      }
    };

    ViewExe.prototype.handleIt = function(content) {
      var entry, f, result, _i, _len;
      f = ':react:ViewExe.handleIt';
      if (typeof content === 'function') {
        content = content();
      }
      if (!content) {
        return null;
      }
      if (!$.isArray(content)) {
        return content;
      }
      result = [];
      for (_i = 0, _len = content.length; _i < _len; _i++) {
        entry = content[_i];
        if ((entry != null) && ((typeof entry) !== 'string' || entry.length)) {
          result.push(entry);
        }
      }
      switch (result.length) {
        case 0:
          return null;
        case 1:
          return result[0];
        default:
          return result;
      }
    };

    ViewExe.prototype.loadPartAttrs = function(attrs) {
      var attr, f, result, val;
      f = ':tag.loadPartAttrs';
      result = {};
      for (attr in attrs) {
        val = attrs[attr];
        if ('p_' !== attr.slice(0, 2)) {
          continue;
        }
        result[attr.slice(2)] = val;
      }
      return result;
    };

    ViewExe.prototype.next_frame = function() {
      return this.frames[this.frame_inx++];
    };

    ViewExe.prototype.T_page = function(attrs) {
      var can_componentize, content, f, name, result, view, _ref, _ref1;
      f = ':react:ViewExe.T_page';
      name = this.page_name;
      if (this.frame_inx < this.frames.length) {
        _ref = this.loader.template(name = this.next_frame()), content = _ref.content, can_componentize = _ref.can_componentize;
        view = 'tmpl/' + name;
      } else {
        _ref1 = this.loader.page(this.page_name), content = _ref1.content, can_componentize = _ref1.can_componentize;
        view = 'page/' + name;
      }
      this.context_audit.push('T_page   +' + view);
      if (true) {
        if (attrs == null) {
          attrs = {};
        }
        attrs.oE = $.extend({
          view: view,
          cb: this.context,
          has_root: can_componentize,
          content: content
        }, this.context('getViewState', view));
        _log2(f, 'before PagePart', view, attrs);
        result = PagePart(attrs);
        _log2(f, 'after PagePart', view, attrs, result);
      } else {
        result = this.handleIt(content);
      }
      this.context_audit.push('T_page   -' + view);
      if (result === void 0) {
        console.log('BIG ISSUE IN TMPL/PAGE: ' + name, 'func is', content_func);
        throw new Error('Big Issue in Tmpl/Page ' + name);
      }
      return result;
    };

    ViewExe.prototype.T_page_part = function(attrs) {
      var can_componentize, content, defer, f, result, view, _ref;
      f = 'react:viewexe.T_page_part:';
      view = attrs.part;
      this.context_audit.push((pad(pad_a + pad_b, 'T_page_part')) + view);
      _ref = this.loader.part(view), content = _ref.content, can_componentize = _ref.can_componentize, defer = _ref.defer;
      this.info_parts.push(this.loadPartAttrs(attrs));
      if (can_componentize || attrs.dynamic || defer) {
        if (defer && !can_componentize && !attrs.dynamic) {
          console.log("WARNING: DEFER logic has forced this page_part (" + view + ") to be a component, and will add a DIV tag.");
        }
        attrs.oE = $.extend({
          view: view,
          cb: this.context,
          has_root: can_componentize,
          content: content
        }, this.context('getViewState', view));
        result = PagePart(attrs);
      } else {
        result = this.handleIt(content);
      }
      this.info_parts.pop();
      if (result === void 0) {
        console.log('BIG ISSUE IN PART: ' + name, 'func is', content);
        throw new Error('Big Issue in PART ' + name);
      }
      this.context_audit.push(['T_page_p -' + view, result]);
      return result;
    };

    ViewExe.prototype.T_defer = function(attrs, content) {
      var f, f_content;
      f = 'react:viewexe.T_defer:';
      f_content = this.handleIt(content);
      if (this.context_active === false) {
        BLOWUP_DEFER_MISSING_COMPONENT();
      }
      this.context_handles[this.context_active].defer.push({
        attrs: attrs,
        func: new Function('type', 'opts', 'attrs', f_content)
      });
      return null;
    };

    ViewExe.prototype.T_if_true = function(attrs, content) {
      if (this.info_if_nms[attrs.name]) {
        return content();
      }
      return null;
    };

    ViewExe.prototype.T_if_false = function(attrs, content) {
      if (!this.info_if_nms[attrs.name]) {
        return this.handleIt(content);
      }
      return null;
    };

    ViewExe.prototype.truthy = function(val) {
      if ((function() {
        var _ref;
        switch (typeof val) {
          case 'string':
            return (val != null ? val.length : void 0) && ((_ref = val.toLowerCase()) !== 'n' && _ref !== 'no');
          case 'boolean':
            return val === true;
          default:
            return val;
        }
      })()) {
        return true;
      } else {
        return false;
      }
    };

    ViewExe.prototype.T_if = function(attrs, content) {
      var is_true, issue, lh, rh, tbl, val, _ref, _ref1;
      issue = false;
      is_true = false;
      if ('val' in attrs) {
        if ('eq' in attrs) {
          if (attrs.val === attrs.eq) {
            is_true = true;
          }
        } else if ('ne' in attrs) {
          if (attrs.val !== attrs.ne) {
            is_true = true;
          }
        } else if ('in_list' in attrs) {
          if (_ref = attrs.val, __indexOf.call(attrs.in_list.split(','), _ref) >= 0) {
            is_true = true;
          }
        } else {
          issue = true;
        }
      } else if ('set' in attrs) {
        is_true = this.truthy(attrs.set);
      } else if ('not_set' in attrs) {
        is_true = !this.truthy(attrs.not_set);
      } else if ('table_is_not_empty' in attrs) {
        val = attrs.table_is_not_empty;
        _ref1 = val.split('/'), lh = _ref1[0], rh = _ref1[1];
        tbl = this._accessModelTable(val, false)[0];
        if (tbl.length) {
          is_true = true;
        }
      } else {
        issue = true;
      }
      if (issue) {
        console.log('ISSUE T_if', attrs);
      }
      if ('name' in attrs) {
        this.info_if_nms[attrs.name] = is_true;
      }
      if (is_true && content) {
        return this.handleIt(content);
      } else {
        return null;
      }
    };

    ViewExe.prototype.getTable = function(nm) {
      var f, field, row, _i, _len, _ref;
      f = 'react:viewexe.getTable:' + nm;
      switch (nm) {
        case 'Control':
        case 'Form':
          return this.fist_table[nm];
        case 'If':
          return [this.info_if_nms];
        case 'Part':
          return this.info_parts.slice(-1);
        case 'Field':
          row = {};
          _ref = this.fist_table.Control;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            row[field.name] = [field];
          }
          this.Epic.log2(f, row);
          return [row];
        default:
          return [];
      }
    };

    ViewExe.prototype._accessModelTable = function(at_table, alias) {
      var dyn_list, dyn_m, dyn_t, lh, oM, rh, rh_alias, tbl, _ref, _ref1, _ref2;
      _ref = at_table.split('/'), lh = _ref[0], rh = _ref[1];
      if (lh in this.info_foreach) {
        tbl = this.info_foreach[lh].row[rh];
        _ref1 = this.info_foreach[lh].dyn, dyn_m = _ref1[0], dyn_t = _ref1[1], dyn_list = _ref1[2];
      } else {
        oM = this.Epic.getInstance(lh);
        tbl = oM.getTable(rh);
        _ref2 = [lh, rh, []], dyn_m = _ref2[0], dyn_t = _ref2[1], dyn_list = _ref2[2];
      }
      this.context('ref_add', dyn_m, dyn_t);
      if (tbl.length === 0) {
        return [tbl, rh, lh, rh, oM];
      }
      rh_alias = rh;
      if (alias) {
        rh_alias = alias;
      }
      dyn_list.push([rh, rh_alias]);
      this.info_foreach[rh_alias] = {
        dyn: [dyn_m, dyn_t, dyn_list]
      };
      return [tbl, rh_alias, lh, rh, oM];
    };

    ViewExe.prototype.T_foreach = function(attrs, content_f) {
      var break_rows_list, count, f, limit, out, rh_alias, row, tbl, _i, _len, _ref, _ref1;
      f = 'react:viewexe.T_foreach';
      _ref = this._accessModelTable(attrs.table, attrs.alias), tbl = _ref[0], rh_alias = _ref[1];
      if (tbl.length === 0) {
        return '';
      }
      break_rows_list = [];
      out = [];
      limit = tbl.length;
      if ('limit' in attrs) {
        limit = Number(attrs.limit) - 1;
      }
      for (count = _i = 0, _len = tbl.length; _i < _len; count = ++_i) {
        row = tbl[count];
        if (count > limit) {
          break;
        }
        this.info_foreach[rh_alias].row = $.extend(true, {}, row, {
          _FIRST: (count === 0 ? 'F' : ''),
          _LAST: (count === tbl.length - 1 ? 'L' : ''),
          _SIZE: tbl.length,
          _COUNT: count,
          _BREAK: ((_ref1 = count + 1, __indexOf.call(break_rows_list, _ref1) >= 0) ? 'B' : '')
        });
        out.push(this.handleIt(content_f));
      }
      delete this.info_foreach[rh_alias];
      if (!out.length) {
        return null;
      }
      return this.handleIt(out);
    };

    ViewExe.prototype.formatFromSpec = function(val, spec, custom_spec) {
      var left, right, str, _base, _ref;
      switch (spec) {
        case '':
          if (custom_spec) {
            return typeof (_base = window.EpicMvc).custom_filter === "function" ? _base.custom_filter(val, custom_spec) : void 0;
          } else {
            return val;
          }
        case 'count':
          return val != null ? val.length : void 0;
        case 'bool':
          if ((val === true || (typeof val === 'number' && val)) || (val != null ? val.length : void 0)) {
            return true;
          } else {
            return false;
          }
        case 'bytes':
          return window.bytesToSize(Number(val));
        case 'uriencode':
          return encodeURIComponent(val);
        case 'esc':
          return window.EpicMvc.escape_html(val);
        case 'quo':
          return ((val.replace(/\\/g, '\\\\')).replace(/'/g, '\\\'')).replace(/"/g, '\\"');
        case '1':
          return (String(val))[0];
        case 'lc':
          return (String(val)).toLowerCase();
        case 'ucFirst':
          str = (String(str)).toLowerCase();
          return str.slice(0, 1).toUpperCase() + str.slice(1);
        default:
          if ((spec != null ? spec.length : void 0) > 4 && spec[0] === '?') {
            _ref = spec.substr(2).split('?'), left = _ref[0], right = _ref[1];
            return ((val === true || (typeof val === 'number' && val)) || (val != null ? val.length : void 0) ? left : right).replace(new RegExp('[' + spec[1] + ']', 'g'), ' ').replace(new RegExp('[%]', 'g'), val);
          } else if (spec != null ? spec.length : void 0) {
            if ((val === true || (typeof val === 'number' && val)) || (val != null ? val.length : void 0)) {
              return spec.substr(1).replace(new RegExp('[' + spec.substr(0, 1) + ']', 'g'), ' ').replace(new RegExp('[%]', 'g'), val);
            } else {
              return '';
            }
          } else {
            return val;
          }
      }
    };

    ViewExe.prototype.v3 = function(view_nm, tbl_nm, key, format_spec, custom_spec) {
      var r, row;
      this.context('ref_add', view_nm, tbl_nm);
      row = (this.Epic.getViewTable(view_nm + '/' + tbl_nm))[0];
      r = this.formatFromSpec(row[key], format_spec, custom_spec);
      if (r === void 0) {
        console.log('G3:UNDEFINED', {
          view_nm: view_nm,
          tbl_nm: tbl_nm,
          key: key,
          format_spec: format_spec,
          custom_spec: custom_spec
        }, row);
      }
      return r;
    };

    ViewExe.prototype.v2 = function(table_ref, col_nm, format_spec, custom_spec, sub_nm) {
      var ans, r;
      ans = this.info_foreach[table_ref].row[col_nm];
      if (sub_nm != null) {
        ans = ans[sub_nm];
      }
      r = this.formatFromSpec(ans, format_spec, custom_spec);
      if (r === void 0) {
        console.log('G2:UNDEFINED', {
          table_ref: table_ref,
          col_nm: col_nm,
          format_spec: format_spec,
          custom_spec: custom_spec,
          sub_nm: sub_nm
        }, {
          info_foreach: this.info_foreach
        });
      }
      return r;
    };

    ViewExe.prototype.T_form_part = function(attrs) {
      var any_req, choices, fl, fl_nm, fm_nm, focus_nm, help, hpfl, is_first, issues, ix, map, nm, oFi, one_field_nm, orig, out, part, row, rows, s, show_req, value_fl_nm, _i, _j, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      part = (_ref = attrs.part) != null ? _ref : 'fist_default';
      row = (_ref1 = attrs.row) != null ? _ref1 : false;
      fm_nm = attrs.form;
      oFi = this.Epic.getFistInstance(fm_nm);
      one_field_nm = attrs.field != null ? attrs.field : false;
      help = (_ref2 = attrs.help) != null ? _ref2 : '';
      show_req = 'show_req' in attrs ? attrs.show_req : 'yes';
      any_req = false;
      is_first = true;
      out = [];
      hpfl = (function() {
        var _results;
        _results = [];
        for (nm in oFi.getHtmlFieldValues()) {
          _results.push(nm);
        }
        return _results;
      })();
      issues = oFi.getFieldIssues();
      focus_nm = oFi.getFocus();
      map = window.EpicMvc['issues$' + this.Epic.appConf().getGroupNm()];
      for (_i = 0, _len = hpfl.length; _i < _len; _i++) {
        fl_nm = hpfl[_i];
        if (one_field_nm !== false && one_field_nm !== fl_nm) {
          continue;
        }
        orig = oFi.getFieldAttributes(fl_nm);
        fl = $.extend({
          tip: '',
          fistnm: fm_nm,
          focus: ''
        }, orig);
        if (fl_nm === focus_nm) {
          fl.focus = 'yes';
        }
        fl.is_first = is_first === true ? 'yes' : '';
        is_first = false;
        fl.yes_val = fl.type === 'yesno' ? String((_ref3 = fl.cdata) != null ? _ref3 : '1') : 'not_used';
        fl.req = fl.req === true ? 'yes' : '';
        if (fl.req === true) {
          any_req = true;
        }
        fl.name = fl_nm;
        if ((_ref4 = fl["default"]) == null) {
          fl["default"] = '';
        }
        fl["default"] = String(fl["default"]);
        value_fl_nm = row ? fl_nm + '__' + row : fl_nm;
        fl.value = (_ref5 = oFi.getHtmlFieldValue(value_fl_nm)) != null ? _ref5 : fl["default"];
        fl.selected = fl.type === 'yesno' && fl.value === fl.yes_val ? 'yes' : '';
        fl.id = 'U' + this.Epic.nextCounter();
        fl.type = (fl.type.split(':'))[0];
        if ((_ref6 = fl.width) == null) {
          fl.width = '';
        }
        if (fl.type === 'radio' || fl.type === 'pulldown') {
          choices = oFi.getChoices(fl_nm);
          rows = [];
          for (ix = _j = 0, _ref7 = choices.options.length; 0 <= _ref7 ? _j < _ref7 : _j > _ref7; ix = 0 <= _ref7 ? ++_j : --_j) {
            s = choices.values[ix] === (String(fl.value)) ? 'yes' : '';
            rows.push({
              option: choices.options[ix],
              value: choices.values[ix],
              selected: s
            });
          }
          fl.Choice = rows;
        }
        fl.issue = issues[value_fl_nm] ? issues[value_fl_nm].asTable(map)[0].issue : '';
        out.push(fl);
      }
      this.fist_table = {
        Form: [
          {
            show_req: show_req,
            any_req: any_req,
            help: help
          }
        ],
        Control: out
      };
      return this.T_page_part({
        part: part
      });
    };

    ViewExe.prototype.T_react = function(attrs) {
      var _base, _ref;
      if ((_ref = (_base = EpicMvc.Extras).components) == null) {
        _base.components = {};
      }
      return EpicMvc.Extras.components[attrs.func](attrs);
    };

    ViewExe.prototype.T_show_me = function(attrs, content) {
      var ans, ans2, f;
      f = ':tag(viewexe).T_showme';
      _log2('======== attrs   ======', f, attrs);
      _log2('======== content ======', f, content);
      ans = content();
      _log2('======== content() ====', f, ans);
      ans2 = this.handleIt(content);
      _log2('======== handleIt =====', f, ans2);
      return ans2;
    };

    return ViewExe;

  })();

  window.EpicMvc.Extras.ViewExe$react = ViewExe;

}).call(this);
