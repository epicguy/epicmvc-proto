// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var FistGroupCache;

  FistGroupCache = (function() {

    function FistGroupCache(Epic, loadStrategy) {
      this.Epic = Epic;
      this.loadStrategy = loadStrategy;
      this.cacheByGrp = [];
    }

    FistGroupCache.prototype.getFistGroup = function(grp_nm) {
      var _base, _ref;
      if (!((_ref = (_base = this.cacheByGrp)[grp_nm]) != null ? _ref : _base[grp_nm] = this.loadStrategy.fist(grp_nm))) {
        throw 'Could not locate window.EpicMvc.fist$' + grp_nm;
      }
      return this.cacheByGrp[grp_nm];
    };

    FistGroupCache.prototype.getFistDef = function(grp_nm, flist_nm) {
      var g;
      g = this.getFistGroup(grp_nm);
      if (!g.FISTS[flist_nm]) {
        throw "Could not locate window.EpicMvc.fist$" + grp_nm + "." + flist_nm;
      }
      return g.FISTS[flist_nm];
    };

    FistGroupCache.prototype.getFieldDefsForGroup = function(grp_nm) {
      return this.getFistGroup(grp_nm).FIELDS;
    };

    FistGroupCache.prototype.getFistDefsForGroup = function(grp_nm) {
      return this.getFistGroup(grp_nm).FISTS;
    };

    FistGroupCache.prototype.getFieldDefsForFist = function(grp_nm, flist_nm) {
      var f, fieldDef, g, nm, _i, _len;
      g = this.getFistGroup(grp_nm);
      f = this.getFistDef(grp_nm, flist_nm);
      fieldDef = {};
      for (_i = 0, _len = f.length; _i < _len; _i++) {
        nm = f[_i];
        if (!(nm in g.FIELDS)) {
          throw "Fist " + grp_nm + ":" + flist_nm + " contains unknown field " + nm;
        }
        fieldDef[nm] = g.FIELDS[nm];
      }
      return fieldDef;
    };

    FistGroupCache.prototype.getCanonicalFist = function(grp_nm, flist_nm) {
      return (flist_nm.split('_'))[0];
    };

    return FistGroupCache;

  })();

  window.EpicMvc.FistGroupCache = FistGroupCache;

}).call(this);
