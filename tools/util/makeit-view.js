// Generated by CoffeeScript 1.4.0
(function() {
  var doIt, fs, jsdom, testenv;

  jsdom = require("jsdom");

  testenv = require("../testlib/testenv");

  fs = require('fs');

  doIt = function(epic_path, dev_dir, pkg_nm) {
    return jsdom.env({
      html: "<html><body><div id='fill_me'></div></body></html>",
      scripts: ['..' + '/testlib/MockEpicSetup.js', '..' + '/testlib/json2.js', epic_path + '/parse.js', epic_path + '/util.js']
    }, function(err, window) {
      var MockLoadStrategy, f, load, out, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      MockLoadStrategy = (function() {

        function MockLoadStrategy(Xdev_dir, Xpkg_nm) {
          this.Xdev_dir = Xdev_dir;
          this.Xpkg_nm = Xpkg_nm;
          this.path = this.Xdev_dir + '/Package/' + this.Xpkg_nm + '/view/';
        }

        MockLoadStrategy.prototype.getTmplNm = function(nm) {
          return this.path + nm + '.tmpl.html';
        };

        MockLoadStrategy.prototype.getPageNm = function(nm) {
          return this.path + 'page/' + nm + '.page.html';
        };

        MockLoadStrategy.prototype.getPartNm = function(nm) {
          return this.path + 'part/' + nm + '.part.html';
        };

        MockLoadStrategy.prototype.getFile = function(nm) {
          var results;
          results = 'bad request?';
          results = fs.readFileSync(nm);
          return String(results);
        };

        MockLoadStrategy.prototype.getCombinedAppConfs = function() {
          var pkg, result, _i, _len, _ref;
          result = {};
          _ref = this.Epic.appconfs;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pkg = _ref[_i];
            window.$.extend(true, result, window.EpicMvc['app$' + pkg]);
          }
          return result;
        };

        MockLoadStrategy.prototype.template = function(nm) {
          var full_nm, out;
          full_nm = this.getTmplNm(nm);
          out = window.EpicMvc.ParseFile(full_nm, this.getFile(full_nm));
          return out;
        };

        MockLoadStrategy.prototype.page = function(nm) {
          var full_nm, out;
          full_nm = this.getPageNm(nm);
          out = window.EpicMvc.ParseFile(full_nm, this.getFile(full_nm));
          return out;
        };

        MockLoadStrategy.prototype.part = function(nm) {
          var full_nm;
          full_nm = this.getPartNm(nm);
          return window.EpicMvc.ParseFile(full_nm, this.getFile(full_nm));
        };

        MockLoadStrategy.prototype.readdir = function(type) {
          var f, files, p, path_part, _i, _len, _ref, _results;
          path_part = (type === 'template' ? '.' : type);
          if (!fs.existsSync(this.path + path_part)) {
            return [];
          }
          files = fs.readdirSync(this.path + path_part);
          _ref = (function() {
            var _j, _len, _results1;
            _results1 = [];
            for (_j = 0, _len = files.length; _j < _len; _j++) {
              p = files[_j];
              _results1.push(p.split('.'));
            }
            return _results1;
          })();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            if ((f != null ? f[1] : void 0) === (type === 'template' ? 'tmpl' : type)) {
              _results.push(f[0]);
            }
          }
          return _results;
        };

        return MockLoadStrategy;

      })();
      out = 'window.EpicMvc.view$' + pkg_nm + '={\n';
      load = new MockLoadStrategy(dev_dir, pkg_nm);
      out += 'tmpl: {\n';
      _ref = load.readdir('template');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        out += "\"" + f + "\": " + (JSON.stringify(load.template(f))) + ",\n";
      }
      out += '}, page: {\n';
      _ref1 = load.readdir('page');
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        f = _ref1[_j];
        out += "\"" + f + "\": " + (JSON.stringify(load.page(f))) + ",\n";
      }
      out += '}, part: {\n';
      _ref2 = load.readdir('part');
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        f = _ref2[_k];
        out += "\"" + f + "\": " + (JSON.stringify(load.part(f))) + ",\n";
      }
      out += '}};\n';
      return console.log('' + out);
    });
  };

  doIt(process.argv[2] + '/EpicMvc', process.argv[3], process.argv[4]);

}).call(this);
