// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var FistBack;

  FistBack = (function() {

    function FistBack(Epic, fieldDef) {
      this.Epic = Epic;
      this.fieldDef = fieldDef;
      this.filt = window.EpicMvc.FistFilt;
      this.ClearValues();
      this.Epic.log2('FistBack.cons', this.fieldDef);
    }

    FistBack.prototype.SetHtmlValuesFromDb = function(data) {
      var k, v;
      this.Epic.log2('SetDbValues data:', data);
      this.DbNames();
      this.Epic.log2('SetDbValues DbNames:', this.DbNames());
      for (k in data) {
        v = data[k];
        this.fb_DB[k] = v;
      }
      this.Db2Html();
      return this.Epic.log2('SetDbValues fb_HTML:', this.fb_HTML);
    };

    FistBack.prototype.ClearValues = function() {
      this.Epic.log2('FistBack.ClearValues');
      this.fb_DB = {};
      return this.fb_HTML = {};
    };

    FistBack.prototype.FistValidate = function(data) {
      var issues;
      this.Html2Html(data);
      this.Html2Db();
      issues = new window.EpicMvc.Issue(this.Epic);
      issues.call(this.Check());
      if (issues.count() === 0) {
        this.Db2Html();
      }
      return issues;
    };

    FistBack.prototype.DbNames = function() {
      var db_nm, nm, rec, _ref, _ref1;
      if (!(this.fb_DB_names != null)) {
        this.dbNm2HtmlNm = {};
        _ref = this.fieldDef;
        for (nm in _ref) {
          rec = _ref[nm];
          this.dbNm2HtmlNm[rec.db_nm] = nm;
        }
        if ((_ref1 = this.fb_DB_names) == null) {
          this.fb_DB_names = (function() {
            var _results;
            _results = [];
            for (db_nm in this.dbNm2HtmlNm) {
              _results.push(db_nm);
            }
            return _results;
          }).call(this);
        }
      }
      return this.fb_DB_names;
    };

    FistBack.prototype.Make = function(token, data) {
      return window.EpicMvc.Issue.Make(this.Epic, token, data);
    };

    FistBack.prototype.Html2Html = function(p) {
      var nm;
      for (nm in this.fieldDef) {
        this.fb_HTML[nm] = this.filt.H2H_generic(nm, this.fieldDef[nm].h2h, p[nm]);
      }
    };

    FistBack.prototype.Html2Db = function() {
      var f, field, nm, p_nm, psuedo_prefix, value, _ref;
      f = 'FistBack.Html2Db';
      _ref = this.fieldDef;
      for (nm in _ref) {
        field = _ref[nm];
        psuedo_prefix = "";
        if (field.type !== 'psuedo') {
          value = this.fb_HTML[nm];
        } else {
          psuedo_prefix = '_psuedo';
          value = (function() {
            var _i, _len, _ref1, _results;
            _ref1 = field.cdata;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              p_nm = _ref1[_i];
              _results.push(this.fb_HTML[nm + '-' + p_nm]);
            }
            return _results;
          }).call(this);
        }
        this.Epic.log2(f, 'H2D_', nm, field.db_nm, value);
        this.fb_DB[field.db_nm] = this.filt['H2D_' + field.h2d + psuedo_prefix](nm, field.h2d_expr, value);
      }
      this.Epic.log2(f, 'fb_DB', this.fb_DB);
    };

    FistBack.prototype.Check = function() {
      var db_nm, field, issue, nm, p_nm, start_issue_count, _i, _j, _len, _len1, _ref, _ref1;
      this.Epic.log2('Check: ', this.DbNames());
      issue = new window.EpicMvc.Issue(this.Epic);
      _ref = this.DbNames();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        db_nm = _ref[_i];
        nm = this.dbNm2HtmlNm[db_nm];
        field = this.fieldDef[nm];
        if (field.type !== 'psuedo') {
          issue.call(this.Validate(nm, this.fb_DB[db_nm]));
        } else {
          start_issue_count = issue.count();
          _ref1 = field.cdata;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p_nm = _ref1[_j];
            issue.call(this.Validate(p_nm, this.fb_HTML[nm + '-' + p_nm]));
          }
          if (start_issue_count === issue.count()) {
            issue.call(this.Validate(nm, this.fb_DB[db_nm]));
          }
        }
      }
      return issue;
    };

    FistBack.prototype.Validate = function(fieldName, value) {
      var field;
      this.Epic.log2('Validate:', fieldName, value);
      field = this.fieldDef[fieldName];
      if ((!(value != null)) || value.length === 0) {
        if (field.req === true) {
          return this.Make('FIELD_EMPTY', [fieldName, field.req_text]);
        }
        return true;
      }
      if (field.max_len > 0 && value.length > field.max_len) {
        return this.Make('FIELD_OVER_MAX', [fieldName, field.max_len]);
      }
      if (!this.filt['CHECK_' + field.validate](fieldName, field.validate_expr, value)) {
        return this.Make('FIELD_ISSUE', [fieldName, field.issue_text]);
      }
      return true;
    };

    FistBack.prototype.Db2Html = function() {
      var db_nm, field, i, list, nm, p_nm, psuedo_fl, psuedo_prefix, subfield, value, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.DbNames();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        db_nm = _ref[_i];
        nm = this.dbNm2HtmlNm[db_nm];
        field = this.fieldDef[nm];
        psuedo_fl = (field != null ? field.type : void 0) === 'psuedo' ? true : false;
        if (!(db_nm in this.fb_DB)) {
          if (!psuedo_fl) {
            delete this.fb_HTML[nm];
          } else {
            _ref1 = field.cdata;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              subfield = _ref1[_j];
              delete this.fb_HTML[subfield];
            }
          }
          continue;
        }
        value = this.fb_DB[db_nm];
        psuedo_prefix = "";
        if (!psuedo_fl) {
          _results.push(this.fb_HTML[nm] = this.filt['D2H_' + field.d2h](db_nm + '%' + nm, field.d2h_expr, value));
        } else {
          switch (field.cdata.length) {
            case 0:
              throw 'Requires cdata with psuedo: ' + db_nm + '%' + nm;
              break;
            case 1:
              _results.push(BROKEN());
              break;
            default:
              list = this.filt['D2H_' + field.d2h + '_psuedo'](db_nm + '%' + nm, field.d2h_expr, value);
              _results.push((function() {
                var _k, _len2, _ref2, _results1;
                _ref2 = field.cdata;
                _results1 = [];
                for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
                  p_nm = _ref2[i];
                  _results1.push(this.fb_HTML[nm + '-' + p_nm] = list[i]);
                }
                return _results1;
              }).call(this));
          }
        }
      }
      return _results;
    };

    return FistBack;

  })();

  window.EpicMvc.FistBack = FistBack;

}).call(this);
