/* Copyright 2007-2014 by James Shelby, shelby (at:) dtsol.com; All rights reserved. */
/*EpicCore*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var Fist, FistFilt, Issue, ModelJS, app, klass, nm, w, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  app = function(window, undef) {
    var E, Extra, Model, aClicks, aFists, aFlows, aModels, aSetting, appFindAttr, appFindClick, appFindNode, appFist, appGetF, appGetS, appGetSetting, appGetT, appGetVars, appInit, appLoadFormsIf, appModel, appStartS, appStartT, appconfs, cacheByGrp, click, clickAction, counter, fgGetCanonicalFist, fgGetFieldDefsForFist, fgGetFieldDefsForGroup, fgGetFistDef, fgGetFistDefsForGroup, fgGetFistGroup, finish_logout, inClick, make_model_functions, merge, nm, oFist, oModel, obj, option, setModelState, type_oau, _d_clickAction, _ref;
    inClick = false;
    counter = 0;
    Model = {};
    Extra = {};
    oModel = {};
    oFist = {};
    appconfs = [];
    option = {
      load_dirs: []
    };
    E = {};
    E.nextCounter = function() {
      return ++counter;
    };
    type_oau = function(obj) {
      return {}.toString.call(obj)[8];
    };
    merge = function() {
      var atype, depth, dest, dup, f, func, otype, source, sources, stype, utype, _i, _len;
      dest = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      otype = 'O';
      atype = 'A';
      utype = 'U';
      stype = 'S';
      depth = 0;
      func = {};
      func[otype] = function(dest, source) {
        var ans, f, snm;
        f = 'func:O';
        if ((type_oau(source)) !== otype) {
          return undef;
        }
        for (snm in source) {
          ans = dup(dest[snm], source[snm]);
          if (ans !== undef) {
            dest[snm] = ans;
          }
        }
        return undef;
      };
      func[atype] = function(dest, source) {
        var ans, f, inx, s, _i, _len;
        f = 'func:A';
        if ((type_oau(source)) !== atype) {
          reutrn(undef);
        }
        for (inx = _i = 0, _len = source.length; _i < _len; inx = ++_i) {
          s = source[inx];
          ans = dup(dest[inx], s);
          if (ans !== undef) {
            dest[inx] = ans;
          }
        }
        return undef;
      };
      func[utype] = function(was, want) {
        var become, f;
        f = 'func:U';
        switch (type_oau(want)) {
          case otype:
            become = {};
            func[otype](become, want);
            break;
          case atype:
            become = [];
            func[atype](become, want);
            break;
          default:
            become = want;
        }
        return become;
      };
      func[stype] = function(was, want) {
        if ((type_oau(want)) in func) {
          return want;
        }
        return was;
      };
      dup = function(dest, source) {
        var r, type;
        depth++;
        type = type_oau(dest);
        if (!(type in func)) {
          type = stype;
        }
        r = func[type](dest, source);
        depth--;
        return r;
      };
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        source = sources[_i];
        f = ':merge:source-loop';
        dup(dest, source);
      }
      return dest;
    };
    E.login = function() {
      var f, k, o, _results;
      f = ':login';
      _log2(f, oModel);
      _results = [];
      for (k in oModel) {
        o = oModel[k];
        _results.push(typeof o.eventLogin === "function" ? o.eventLogin() : void 0);
      }
      return _results;
    };
    E.logout = function(click_event, click_data) {
      var _this = this;
      if (inClick !== false) {
        setTimeout((function() {
          return E.logout(click_event, click_data);
        }), 100);
        return;
      }
      if (click_event) {
        return (click(click_event, click_data)).then(function() {
          return finish_logout();
        });
      } else {
        return finish_logout();
      }
    };
    finish_logout = function() {
      var k, o;
      for (k in oModel) {
        o = oModel[k];
        if (!(typeof o.eventLogout === "function" ? o.eventLogout() : void 0)) {
          continue;
        }
        delete modelState[k];
        delete oModel[k];
      }
      return oFist = {};
    };
    E.fist = function(flist_nm, grp_nm) {
      var f, fist_nm, inst_nm, t, view_nm, _ref;
      if (!grp_nm) {
        _ref = E.App().getStepPath(), f = _ref[0], t = _ref[1];
        grp_nm = E.oA.getGroupNm(f(t));
      }
      fist_nm = E.fistGrp().fist(grp_nm, flist_nm);
      inst_nm = "" + grp_nm + "_" + fist_nm;
      if (!(inst_nm in oFist)) {
        view_nm = E.oA.fist(grp_nm, fist_nm);
        oFist[inst_nm] = new E.Fist(grp_nm, fist_nm, view_nm, flist_nm);
      }
      return oFist[inst_nm];
    };
    E.run = function(set_appconfs, more_options) {
      var promise;
      appconfs = set_appconfs;
      appInit();
      merge(option, more_options);
      E.oLoader = new Extra[option.loader](appconfs);
      promise = E.oLoader.D_loadAsync();
      promise.then(function() {
        E.App().go(aSetting.go);
        return E.oRender = new Extra[option.render];
      });
    };
    click = function(action_token, data) {
      var f;
      f = ':click:' + action_token;
      _log2(f, data);
      if (inClick !== false) {
        if (typeof option.c1 === "function") {
          option.c1();
        }
      }
      inClick = action_token;
      m.startComputation();
      return (clickAction(action_token, data, E.App().getStepPath())).then(function(click_result) {
        var k, modelState, o, ss;
        E.App().setIssues(click_result[0]);
        E.App().setMessages(click_result[1]);
        inClick = false;
        modelState = {};
        for (k in oModel) {
          o = oModel[k];
          if ((o.saveState != null) && (ss = o.saveState())) {
            modelState[k] = ss;
          }
        }
        return m.endComputation();
      });
    };
    setModelState = function(s) {
      var inst_nm, modelState, _base, _results;
      if (s != null) {
        modelState = s;
      }
      _results = [];
      for (inst_nm in oModel) {
        _results.push(typeof (_base = oModel[inst_nm]).restoreState === "function" ? _base.restoreState(modelState[inst_nm]) : void 0);
      }
      return _results;
    };
    aSetting = {
      frames: {},
      modals: {},
      layout: 'default',
      go: 'default//'
    };
    aClicks = {};
    aFlows = {
      "default": {
        start: 'default',
        TRACKS: {
          "default": {
            start: 'default',
            STEPS: {
              "default": {}
            }
          }
        }
      }
    };
    aModels = {};
    aFists = false;
    appLoadFormsIf = function(config) {
      var form_nm, group, node, view_nm, _i, _len, _ref, _ref1, _ref2;
      if (aFists === false) {
        aFists = {};
        for (view_nm in aModels) {
          node = aModels[view_nm];
          if (!node.fists) {
            continue;
          }
          group = (_ref = node.group) != null ? _ref : aSetting.group;
          if ((_ref1 = aFists[group]) == null) {
            aFists[group] = {};
          }
          _ref2 = node.forms;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            form_nm = _ref2[_i];
            aFists[group][form_nm] = view_nm;
          }
        }
      }
    };
    appInit = function() {
      var nm, obj, _i, _len, _ref, _ref1;
      for (_i = 0, _len = appconfs.length; _i < _len; _i++) {
        nm = appconfs[_i];
        app = (_ref = E['app$' + nm]) != null ? _ref : {};
        if (app.STEPS) {
          merge(aFlows["default"].TRACKS["default"].STEPS, app.STEPS);
        }
        if (app.TRACKS) {
          merge(aFlows["default"].TRACKS, app.TRACKS);
        }
        _ref1 = {
          SETTINGS: aSetting,
          CLICKS: aClicks,
          FLOWS: aFlows,
          MODELS: aModels,
          OPTIONS: option
        };
        for (nm in _ref1) {
          obj = _ref1[nm];
          merge(obj, app[nm]);
        }
      }
      make_model_functions();
    };
    appModel = function(view_name, attribute) {
      if (!(view_name in aModels)) {
        config.a1(view_name);
      }
      if (!(attribute in aModels[view_name])) {
        option.a2(view_name, attribute);
      }
      return aModels[view_name][attribute];
    };
    appFist = function(group_nm, fist_nm) {
      appLoadFormsIf();
      return aFist[group_nm][fist_nm];
    };
    appFindNode = function(flow, t, s, cat, nm) {
      var ncat, nf, ns, nt, _ref, _ref1, _ref2, _ref3, _ref4;
      nf = aFlows[flow];
      if (nf) {
        if (t && ((nt = (_ref = nf.TRACKS) != null ? _ref[t] : void 0) != null)) {
          if (s && ((ns = (_ref1 = nt.STEPS) != null ? _ref1[s] : void 0) != null)) {
            if ((ncat = (_ref2 = ns[cat]) != null ? _ref2[nm] : void 0) != null) {
              return ncat;
            }
          }
          if ((ncat = (_ref3 = nt[cat]) != null ? _ref3[nm] : void 0) != null) {
            return ncat;
          }
        }
        if ((ncat = (_ref4 = nf[cat]) != null ? _ref4[nm] : void 0) != null) {
          return ncat;
        }
      }
      return null;
    };
    appFindAttr = function(flow, t, s, attr) {
      var nattr, nf, ns, nt, _ref, _ref1;
      nf = aFlows[flow];
      if (nf) {
        if (t && ((nt = (_ref = nf.TRACKS) != null ? _ref[t] : void 0) != null)) {
          if (s && ((ns = (_ref1 = nt.STEPS) != null ? _ref1[s] : void 0) != null)) {
            if ((nattr = ns[attr]) != null) {
              return nattr;
            }
          }
          if ((nattr = nt[attr]) != null) {
            return nattr;
          }
        }
        if ((nattr = nf[attr]) != null) {
          return nattr;
        }
      }
      return null;
    };
    appGetF = function(flow) {
      return aFlows[flow];
    };
    appGetT = function(flow, track) {
      return aFlows[flow].TRACKS[track];
    };
    appGetS = function(flow, track, step) {
      return aFlows[flow].TRACKS[track].STEPS[step];
    };
    appStartT = function(flow) {
      return appGetF(flow).start;
    };
    appStartS = function(flow, track) {
      return appGetT(flow, track).start;
    };
    appFindClick = function(path, action_token) {
      var _ref;
      return (_ref = appFindNode(path[0], path[1], path[2], 'CLICKS', action_token)) != null ? _ref : aClicks[action_token];
    };
    appGetSetting = function(setting_name, flow, track, step) {
      var _ref;
      if (!flow) {
        return aSetting[setting_name];
      }
      return (_ref = appFindAttr(flow, track, step != null ? step : false, setting_name)) != null ? _ref : aSetting[setting_name];
    };
    appGetVars = function(flow, track, step) {
      var f, k, v, vars;
      f = ':appGetVars';
      vars = merge({}, aFlows[flow].v, aFlows[flow].TRACKS[track].v, aFlows[flow].TRACKS[track].STEPS[step].v);
      _log2(f, ((function() {
        var _results;
        _results = [];
        for (k in vars) {
          if (!__hasProp.call(vars, k)) continue;
          v = vars[k];
          _results.push("" + k + ":" + v);
        }
        return _results;
      })()).join(', '));
      return vars;
    };
    make_model_functions = function() {
      var model, view, _results;
      _results = [];
      for (view in aModels) {
        model = aModels[view];
        _results.push((function(view, model) {
          return E[view] = function(table_or_ctx, act_if_action, action, data) {
            var cls, inst_nm, oM;
            inst_nm = model.inst;
            if (!(inst_nm in oModel)) {
              cls = model["class"];
              if (!(E.Model[cls] != null)) {
                option.m1(view, model);
              }
              oModel[inst_nm] = new E.Model[cls](view, model.options);
              if (inst_nm in oModel) {
                oModel[inst_nm].restoreState(oModel[inst_nm]);
              }
            }
            oM = oModel[inst_nm];
            if (table_or_ctx === undef) {
              return oM;
            }
            if (act_if_action === undef) {
              return oM.getTable(table_or_ctx);
            }
            return oM.action(table_or_ctx, act_if_action, action, data);
          };
        })(view, model));
      }
      return _results;
    };
    clickAction = function(action_token, data, original_path) {
      var d;
      d = m.deferred();
      d.resolve(_d_clickAction(action_token, data, original_path));
      return d.promise;
    };
    _d_clickAction = function(action_token, data, original_path) {
      var click_node, ctx, d, f, i, master_data, master_issue, master_message, mg, nm, nms, r, val, view_act, view_nm, _i, _len, _ref, _ref1, _ref2;
      f = ":clickAction(" + action_token + ")";
      _log2(f, data, original_path);
      master_issue = new Issue('App');
      master_message = new Issue('App');
      click_node = appFindClick(original_path, action_token);
      _log2(f, click_node);
      if (!(click_node != null)) {
        _log2('WARNING', "No app. entry for action_token (" + action_token + ") on path (" + original_path + ")");
        return [master_issue, master_message];
      }
      if (click_node.go != null) {
        E.App().goTo(click_node.go);
      }
      master_data = merge({}, data);
      nms = (function() {
        switch (type_oau(click_node.pass)) {
          case 'A':
            return click_node.pass;
          case 'S':
            return click_node.pass.split(',');
          default:
            return [];
        }
      })();
      for (_i = 0, _len = nms.length; _i < _len; _i++) {
        nm = nms[_i];
        if (!(nm in data)) {
          _log2('WARNING', "Action (" + action_token + ") request data is missing param " + nm, data, click_node, original_path);
        }
      }
      _ref = click_node.set;
      for (nm in _ref) {
        val = _ref[nm];
        master_data[nm] = val;
      }
      if (click_node["do"] != null) {
        _ref1 = click_node["do"].split('.'), view_nm = _ref1[0], view_act = _ref1[1];
        d = m.deferred();
        r = {};
        i = new E.Issue(view_nm, view_act);
        mg = new E.Issue(view_nm, view_act);
        ctx = {
          d: d,
          r: r,
          i: i,
          m: mg
        };
        E[view_nm](ctx, view_act != null ? view_act : action_token, master_data);
        _ref2 = ctx.r;
        for (nm in _ref2) {
          val = _ref2[nm];
          master_data[nm] = val;
        }
        master_issue.addObj(ctx.i);
        master_message.addObj(ctx.m);
        [master_issue, master_message];
      }
      return [master_issue, master_message];
    };
    cacheByGrp = [];
    fgGetFistGroup = function(grp_nm) {
      var _ref;
      option.fg1(grp_nm(f(!((_ref = cacheByGrp[grp_nm]) != null ? _ref : cacheByGrp[grp_nm] = E.oLoader.fist(grp_nm)))));
      return cacheByGrp[grp_nm];
    };
    fgGetFistDef = function(grp_nm, flist_nm) {
      var fgroup;
      fgroup = fgGetFistGroup(grp_nm);
      if (!fgroup.FISTS[flist_nm]) {
        option.fg2(grp_nm, flist_nm);
      }
      return fgroup.FISTS[flist_nm];
    };
    fgGetFieldDefsForGroup = function(grp_nm) {
      return fgGetFistGroup(grp_nm).FIELDS;
    };
    fgGetFistDefsForGroup = function(grp_nm) {
      return fgGetFistGroup(grp_nm).FISTS;
    };
    fgGetFieldDefsForFist = function(grp_nm, flist_nm) {
      var fgroup, fieldDef, nm, _i, _len, _ref;
      fgroup = fgGetFistGroup(grp_nm);
      fieldDef = {};
      _ref = fgGetFistDef(grp_nm, flist_nm);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nm = _ref[_i];
        if (!(nm in fgroup.FIELDS)) {
          option.fg3(grp_nm, flist_nm, nm);
        }
        fieldDef[nm] = fgroup.FIELDS[nm];
      }
      return fieldDef;
    };
    fgGetCanonicalFist = function(grp_nm, flist_nm) {
      return (flist_nm.split('_'))[0];
    };
    _ref = {
      type_oau: type_oau,
      Model: Model,
      Extra: Extra,
      option: option,
      click: click,
      merge: merge,
      appconfs: appconfs,
      appGetF: appGetF,
      appGetT: appGetT,
      appGetS: appGetS,
      appStartT: appStartT,
      appStartS: appStartS,
      appFindClick: appFindClick,
      appGetSetting: appGetSetting,
      appGetVars: appGetVars,
      oModel: oModel,
      oFist: oFist
    };
    for (nm in _ref) {
      obj = _ref[nm];
      E[nm] = obj;
    }
    return E;
  };

  Fist = (function() {

    function Fist(Epic, grp_nm, flist_nm, view_nm) {
      var oG;
      this.Epic = Epic;
      this.grp_nm = grp_nm;
      this.view_nm = view_nm;
      oG = this.Epic.getFistGroupCache();
      flist_nm = oG.getCanonicalFist(grp_nm, flist_nm);
      this.fist_nm = flist_nm;
      this.oM = E[this.view_nm]();
      this.form_state = 'empty';
      this.fistDef = oG.getFistDef(grp_nm, this.fist_nm);
      this.cache_field_choice = [];
      this.filt = FistFilt;
      this.Fb_ClearValues();
      this.upload_todo = [];
      this.upload_fl = {};
      this.focus_fl_nm = false;
    }

    Fist.prototype.getGroupNm = function() {
      return this.grp_nm;
    };

    Fist.prototype.getFistNm = function() {
      return this.fist_nm;
    };

    Fist.prototype.loadFieldDefs = function() {
      var _ref;
      return (_ref = this.fieldDef) != null ? _ref : this.fieldDef = this.Epic.getFistGroupCache().getFieldDefsForFist(this.grp_nm, this.fist_nm);
    };

    Fist.prototype.getFieldsDefs = function() {
      return this.loadFieldDefs();
    };

    Fist.prototype.loadFieldChoices = function(fl) {
      var ct, f, final_obj, json, k, rec, row, v, w_opt, w_val, wist, wist_grp, wist_nm, _i, _j, _len, _len1, _ref, _ref1;
      f = ':Fist.loadFieldChoices:' + fl;
      final_obj = {
        options: [],
        values: []
      };
      if (true) {
        this.loadFieldDefs();
        ct = this.fieldDef[fl].type.split(':');
        switch (ct[1]) {
          case 'custom':
            final_obj = this.oM.fistGetFieldChoices(this, fl);
            break;
          case 'array':
            _ref = this.fieldDef[fl].cdata;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              rec = _ref[_i];
              if (typeof rec === 'object') {
                final_obj.options.push(String(rec[1]));
                final_obj.values.push(String(rec[0]));
              } else {
                final_obj.options.push(String(rec));
                final_obj.values.push(String(rec));
              }
            }
            break;
          case 'json_like':
            json = this.fieldDef[fl].cdata.replace(/'/g, '"').replace(/"""/g, "'");
            json = JSON.parse(json);
            for (k in json) {
              v = json[k];
              final_obj.options.push(k);
              final_obj.values.push(v);
            }
            break;
          case 'wist':
            _ref1 = this.fieldDef[fl].cdata.split(':'), wist_grp = _ref1[0], wist_nm = _ref1[1], w_val = _ref1[2], w_opt = _ref1[3];
            wist = this.Epic.getViewTable("Wist/" + wist_grp + ":" + wist_nm);
            for (_j = 0, _len1 = wist.length; _j < _len1; _j++) {
              row = wist[_j];
              final_obj.options.push(row[w_opt]);
              final_obj.values.push(row[w_val]);
            }
            _log2(f, final_obj);
        }
        this.cache_field_choice[fl] = final_obj;
      }
    };

    Fist.prototype.getHtmlPostedFieldsList = function(flist_nm) {
      var fistDef;
      fistDef = this.fistDef;
      if ((flist_nm != null) && flist_nm !== this.fist_nm) {
        fistDef = this.Epic.getFistGroupCache().getFistDef(this.grp_nm, flist_nm);
      }
      return fistDef;
    };

    Fist.prototype.getFieldAttributes = function(fl_nm) {
      return (this.Epic.getFistGroupCache().getFieldDefsForGroup(this.grp_nm))[fl_nm];
    };

    Fist.prototype.getHtmlFieldValue = function(fl_nm) {
      this.loadData();
      return this.fb_HTML[fl_nm];
    };

    Fist.prototype.getHtmlFieldValues = function() {
      this.loadData();
      _log2('getHtmlFieldValues', this.fist_nm, this.fb_HTML);
      return this.fb_HTML;
    };

    Fist.prototype.getDbFieldValue = function(fl_nm) {
      this.loadData();
      return this.fb_DB[fl_nm];
    };

    Fist.prototype.getDbFieldValues = function() {
      this.loadData();
      return this.fb_DB;
    };

    Fist.prototype.getFieldIssues = function() {
      return this.fb_issues;
    };

    Fist.prototype.getFocus = function() {
      return this.focus_fl_nm;
    };

    Fist.prototype.setFocus = function(fl_nm) {
      return this.focus_fl_nm = fl_nm;
    };

    Fist.prototype.getChoices = function(fl_nm) {
      this.loadFieldChoices(fl_nm);
      return this.cache_field_choice[fl_nm];
    };

    Fist.prototype.fieldLevelValidate = function(data, flist_nm, clear_issues) {
      this.form_state = 'posted';
      return this.Fb_FistValidate(data, flist_nm != null ? flist_nm : this.fist_nm, clear_issues != null ? clear_issues : true);
    };

    Fist.prototype.loadData = function(data) {
      if (this.form_state === 'empty') {
        this.oM.fistLoadData(this);
        this.form_state = 'loaded';
      }
    };

    Fist.prototype.setFromDbValues = function(data) {
      this.Fb_SetHtmlValuesFromDb(data);
      this.form_state = 'loaded';
    };

    Fist.prototype.setFromHTMLValues = function(data) {
      this.Fb_SetHtmlValuesFromHtml(data);
      this.form_state = 'loaded';
    };

    Fist.prototype.eventNewRequest = function(changed) {
      if (changed.step) {
        this.clearValues();
        this.upload_todo = [];
        this.uploaded_fl = {};
      }
    };

    Fist.prototype.clearIssues = function(html_nm) {
      if (html_nm) {
        delete this.fb_issues[html_nm];
      } else {
        this.fb_issues = {};
      }
    };

    Fist.prototype.clearValues = function() {
      if (this.form_state !== 'empty') {
        this.Fb_ClearValues();
        this.form_state = 'empty';
      }
    };

    Fist.prototype.Fb_SetHtmlValuesFromDb = function(data) {
      var dbnms, k, _i, _len;
      dbnms = this.Fb_DbNames();
      for (_i = 0, _len = dbnms.length; _i < _len; _i++) {
        k = dbnms[_i];
        if (k in data) {
          this.fb_DB[k] = data[k];
        }
      }
      return this.Fb_Db2Html();
    };

    Fist.prototype.Fb_SetHtmlValuesFromHtml = function(data) {
      this.Fb_Html2Html(data, this.fist_nm);
      return null;
    };

    Fist.prototype.Fb_ClearValues = function() {
      this.fb_DB = {};
      this.fb_HTML = {};
      this.fb_issues = {};
      return this.Fb_Db2Html();
    };

    Fist.prototype.Fb_FistValidate = function(data, flist_nm, clear_issues) {
      var issues;
      if (clear_issues === true) {
        this.fb_issues = {};
      }
      this.Fb_Html2Html(data, flist_nm);
      issues = new Issue;
      issues.call(this.Fb_Check(flist_nm));
      if (issues.count() === 0) {
        this.Fb_Html2Db(flist_nm);
        issues.call(this.Fb_Check(flist_nm, true));
      }
      return issues;
    };

    Fist.prototype.Fb_DbNames = function(flist_nm) {
      var db_nm, nm, rec, _ref, _ref1;
      if ((flist_nm != null) && flist_nm !== this.fist_nm) {
        return (function() {
          var _i, _len, _ref, _results;
          _ref = this.getHtmlPostedFieldsList(flist_nm);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            nm = _ref[_i];
            _results.push(this.fieldDef[nm].db_nm);
          }
          return _results;
        }).call(this);
      }
      if (!(this.fb_DB_names != null)) {
        this.loadFieldDefs();
        this.dbNm2HtmlNm = {};
        _ref = this.fieldDef;
        for (nm in _ref) {
          rec = _ref[nm];
          this.dbNm2HtmlNm[rec.db_nm] = nm;
        }
        if ((_ref1 = this.fb_DB_names) == null) {
          this.fb_DB_names = (function() {
            var _results;
            _results = [];
            for (db_nm in this.dbNm2HtmlNm) {
              _results.push(db_nm);
            }
            return _results;
          }).call(this);
        }
      }
      return this.fb_DB_names;
    };

    Fist.prototype.Fb_Make = function(main_issue, field, token_data) {
      var f, _ref;
      f = 'Fist.Fb_Make:' + field;
      if (token_data === true) {
        return false;
      }
      if ((_ref = this.issue_inline) == null) {
        this.issue_inline = E.oA.getShowIssues() === 'inline';
      }
      _log2(f, field, token_data, {
        inline: this.issue_inline
      });
      if (this.issue_inline) {
        this.fb_issues[field] = Issue.Make(this.view_nm, token_data[0], token_data[1]);
        if (main_issue.count() === 0) {
          main_issue.add('FORM_ERRORS', [this.fistName]);
        }
      } else {
        main_issue.add(token_data[0], token_data[1]);
      }
      return true;
    };

    Fist.prototype.Fb_Html2Html = function(p, flist_nm) {
      var f, nm, value, _i, _len, _ref;
      f = 'Fist.Fb_Html2Html';
      this.loadFieldDefs();
      _ref = this.getHtmlPostedFieldsList(flist_nm);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nm = _ref[_i];
        value = p[nm];
        if ('H2H_prefilter' in this.filt) {
          value = this.filt.H2H_prefilter(nm, this.fieldDef[nm].h2h, value);
        }
        this.fb_HTML[nm] = this.filt.H2H_generic(nm, this.fieldDef[nm].h2h, value);
      }
    };

    Fist.prototype.Fb_Check = function(flist_nm, psuedo_only) {
      var db_nm, f, field, issue, issue_count, nm, p_nm, _i, _j, _len, _len1, _ref, _ref1;
      f = 'Fist.Fb_Check:' + flist_nm;
      issue = new Issue;
      _ref = this.Fb_DbNames(flist_nm);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        db_nm = _ref[_i];
        nm = this.dbNm2HtmlNm[db_nm];
        field = this.fieldDef[nm];
        if (psuedo_only) {
          if (field.type !== 'psuedo') {
            continue;
          }
        }
        if (field.type !== 'psuedo' || psuedo_only) {
          this.Fb_Make(issue, nm, this.Fb_Validate(nm, this.fb_HTML[nm]));
        } else {
          issue_count = 0;
          _ref1 = field.cdata;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p_nm = _ref1[_j];
            if (this.Fb_Make(issue, nm, this.Fb_Validate(nm + '_' + p_nm, this.fb_HTML[nm + '_' + p_nm]))) {
              issue_cnt += 1;
            }
          }
        }
      }
      return issue;
    };

    Fist.prototype.Fb_Validate = function(fieldName, value) {
      var f, field, _ref;
      f = 'Fist.Fb_Validate:' + fieldName;
      this.loadFieldDefs();
      field = (_ref = this.fieldDef[fieldName]) != null ? _ref : this.getFieldAttributes(fieldName);
      if ((!(value != null)) || value.length === 0) {
        if (field.req === true) {
          if (field.req_text) {
            return ['FIELD_EMPTY_TEXT', [fieldName, field.label, field.req_text]];
          } else {
            return ['FIELD_EMPTY', [fieldName, field.label]];
          }
        }
        return true;
      }
      if (field.max_len > 0 && value.length > field.max_len) {
        return ['FIELD_OVER_MAX', [fieldName, field.label, field.max_len]];
      }
      if (!this.filt['CHECK_' + field.validate](fieldName, field.validate_expr, value, this)) {
        if (field.issue_text) {
          return ['FIELD_ISSUE_TEXT', [fieldName, field.label, field.issue_text]];
        } else {
          return ['FIELD_ISSUE', [fieldName, field.label]];
        }
      }
      return true;
    };

    Fist.prototype.Fb_Html2Db = function(flist_nm) {
      var f, field, nm, p_nm, psuedo_prefix, value, _i, _len, _ref;
      f = 'Fist.Fb_Html2Db';
      this.loadFieldDefs();
      _ref = this.getHtmlPostedFieldsList(flist_nm);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nm = _ref[_i];
        field = this.fieldDef[nm];
        psuedo_prefix = "";
        if (field.type !== 'psuedo') {
          value = this.fb_HTML[nm];
        } else {
          psuedo_prefix = '_psuedo';
          value = (function() {
            var _j, _len1, _ref1, _results;
            _ref1 = field.cdata;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              p_nm = _ref1[_j];
              _results.push(this.fb_HTML[nm + '_' + p_nm]);
            }
            return _results;
          }).call(this);
        }
        this.fb_DB[field.db_nm] = this.filt['H2D_' + field.h2d + psuedo_prefix](nm, field.h2d_expr, value);
      }
    };

    Fist.prototype.Fb_Db2Html = function() {
      var db_nm, field, i, list, nm, p_nm, psuedo_fl, psuedo_prefix, subfield, value, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.Fb_DbNames();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        db_nm = _ref[_i];
        nm = this.dbNm2HtmlNm[db_nm];
        field = this.fieldDef[nm];
        psuedo_fl = (field != null ? field.type : void 0) === 'psuedo' ? true : false;
        if (!(db_nm in this.fb_DB)) {
          if (!psuedo_fl) {
            this.fb_HTML[nm] = null;
          } else {
            _ref1 = field.cdata;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              subfield = _ref1[_j];
              this.fb_HTML[nm + '_' + subfield] = null;
            }
          }
          continue;
        }
        value = this.fb_DB[db_nm];
        psuedo_prefix = "";
        if (!psuedo_fl) {
          _results.push(this.fb_HTML[nm] = this.filt['D2H_' + field.d2h](db_nm + '%' + nm, field.d2h_expr, value));
        } else {
          switch (field.cdata.length) {
            case 0:
              _results.push(option.fb1(field));
              break;
            case 1:
              _results.push(BROKEN());
              break;
            default:
              list = this.filt['D2H_' + field.d2h + '_psuedo'](db_nm + '%' + nm, field.d2h_expr, value);
              _results.push((function() {
                var _k, _len2, _ref2, _results1;
                _ref2 = field.cdata;
                _results1 = [];
                for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
                  p_nm = _ref2[i];
                  _results1.push(this.fb_HTML[nm + '_' + p_nm] = list[i]);
                }
                return _results1;
              }).call(this));
          }
        }
      }
      return _results;
    };

    return Fist;

  })();

  FistFilt = (function() {

    function FistFilt() {}

    FistFilt.H2H_generic = function(fieldName, spec, value) {
      var k, new_value, one_spec, spec_ary, _base;
      new_value = value != null ? value : '';
      spec_ary = typeof (_base = spec != null ? spec : '').split === "function" ? _base.split(':') : void 0;
      for (k in spec_ary) {
        one_spec = spec_ary[k];
        new_value = (function() {
          switch (one_spec) {
            case '':
              return new_value;
            case 'trim_spaces':
              return (String(new_value)).trim();
            case 'digits_only':
              return new_value.replace(/[^0-9]/g, '');
            case 'lower_case':
              return new_value.toLowerCase();
            case 'upper_case':
              return new_value.toUpperCase();
            default:
              return option.ff1(fieldName, spec, one_spec);
          }
        })();
      }
      return new_value;
    };

    FistFilt.CHECK_ = function(fieldName, validateExpr, value, oF) {
      return true;
    };

    FistFilt.CHECK_null = function(fieldName, validateExpr, value, oF) {
      return true;
    };

    FistFilt.CHECK_undefined = function(fieldName, validateExpr, value, oF) {
      return true;
    };

    FistFilt.CHECK_any = function(fieldName, validateExpr, value, oF) {
      return true;
    };

    FistFilt.CHECK_phone = function(fieldName, validateExpr, value, oF) {
      var check_pat, re;
      switch (validateExpr) {
        case undef:
          value = value.replace(/[^0-9]/g, '');
          check_pat = '[0-9]{10}';
          break;
        default:
          BROKE();
      }
      re = new RegExp('^' + check_pat + '$');
      if (value.match(re)) {
        return true;
      } else {
        return false;
      }
    };

    FistFilt.CHECK_zip = function(fieldName, validateExpr, value, oF) {
      switch (validateExpr) {
        case '5or9':
          if (!value.match(/^[0-9]{5}(|[0-9]{4})$/)) {
            return false;
          }
          break;
        default:
          BROKE();
      }
      return true;
    };

    FistFilt.CHECK_choice = function(fieldName, validateExpr, value, oF) {
      _log2('CHECK_choice:value/values', value, oF.getChoices(fieldName).values);
      if (__indexOf.call(oF.getChoices(fieldName).values, value) < 0) {
        return false;
      }
      if (validateExpr) {
        if (oF.getChoices(fieldName).values[0] === value) {
          return false;
        }
      }
      return true;
    };

    FistFilt.CHECK_email = function(fieldName, validateExpr, value, oF) {
      var few, most, re, some;
      most = '[A-Z0-9._+%-]';
      some = '[A-Z0-9.-]';
      few = '[A-Z]';
      re = new RegExp("^" + most + "+@" + some + "+[.]" + few + "{2,4}$", 'i');
      if (value.match(re)) {
        return true;
      } else {
        return false;
      }
    };

    FistFilt.CHECK_regexp = function(fieldName, validateExpr, value, oF) {
      var re;
      re = new RegExp("^" + validateExpr + "$");
      if (value.match(re)) {
        return true;
      } else {
        return false;
      }
    };

    FistFilt.CHECK_confirm = function(fieldName, validateExpr, value, oF) {
      var other_value;
      other_value = oF.getHtmlFieldValue(validateExpr);
      if (other_value !== value) {
        return false;
      }
      return true;
    };

    FistFilt.H2D_ = function(fieldName, filtExpr, value) {
      return value;
    };

    FistFilt.H2D_undefined = function() {
      return this.H2D_.apply(this, arguments);
    };

    FistFilt.H2D__psuedo = function(fieldName, filtExpr, value) {
      return value;
    };

    FistFilt.H2D_date_psuedo = function(fieldName, filtExpr, value) {
      var Y, d, f, m;
      f = 'FF:H2D_date_psuedo';
      _log2(f, fieldName, filtExpr, value);
      m = value[0], d = value[1], Y = value[2];
      if (!((m != null) || (d != null) || (Y != null))) {
        return '';
      }
      if (m == null) {
        m = '';
      }
      if (d == null) {
        d = '';
      }
      if (Y == null) {
        Y = '';
      }
      if (m.length === 1) {
        m = '0' + m;
      }
      if (d.length === 1) {
        d = '0' + d;
      }
      return "" + Y + "-" + m + "-" + d;
    };

    FistFilt.H2D_join_psuedo = function(fieldName, filtExpr, value) {
      return value.join(filtExpr);
    };

    FistFilt.H2D_phone = function(fieldName, filtExpr, value) {
      return value.replace(/[^0-9]/g, '');
    };

    FistFilt.H2D_zero_is_blank = function(fieldName, filtExpr, value) {
      if (value === 0 || value === '0') {
        return '';
      } else {
        return value;
      }
    };

    FistFilt.D2H_ = function(fieldName, filtExpr, value) {
      return value;
    };

    FistFilt.D2H_undefined = function() {
      return this.D2H_.apply(this, arguments);
    };

    FistFilt.D2H_null = function() {
      return this.D2H_.apply(this, arguments);
    };

    FistFilt.D2H_phone = function(fieldName, filtExpr, value) {
      value = value.replace(/[^0-9]/g, '');
      return value.replace(/(...)(...)(...)/, '($1) $2-$3');
    };

    FistFilt.D2H_date = function(fieldName, filtExpr, value) {
      return this.D2H_date_psuedo(fieldName, filtExpr, value).join('/');
    };

    FistFilt.D2H_date_psuedo = function(fieldName, filtExpr, value) {
      var Y, d, f, m, _ref;
      f = 'FF:D2H_date_psuedo';
      _log2(f, fieldName, filtExpr, value);
      _ref = ((value != null ? value : '--').split(/[^0-9-]/))[0].split('-'), Y = _ref[0], m = _ref[1], d = _ref[2];
      return [(m != null ? m : '').replace(/^0/, ''), (d != null ? d : '').replace(/^0/, ''), Y];
    };

    FistFilt.D2H_blank_is_zero = function(fieldName, filtExpr, value) {
      if (value.length) {
        return value;
      } else {
        return '0';
      }
    };

    return FistFilt;

  })();

  Issue = (function() {

    function Issue(t_view, t_action) {
      this.t_view = t_view;
      this.t_action = t_action;
      this.issue_list = [];
    }

    Issue.Make = function(view, type, value_list) {
      var issue;
      issue = new Issue(view);
      issue.add(type, value_list);
      return issue;
    };

    Issue.prototype.add = function(type, msgs) {
      var f;
      f = ':Issue.add:' + this.t_view + ':' + this.t_action;
      _log2(f, 'params:type/msgs', type, msgs);
      switch (typeof msgs) {
        case 'undefined':
          msgs = [];
          break;
        case 'string':
          msgs = [msgs];
      }
      return this.issue_list.push({
        token: type,
        more: msgs,
        t_view: this.t_view,
        t_action: this.t_action
      });
    };

    Issue.prototype.addObj = function(issue_obj) {
      var f, issue, new_issue, _i, _len, _ref, _ref1, _ref2;
      f = ':Issue.addObj:' + this.t_view + '#' + this.t_action;
      if (typeof issue_obj !== 'object' || !('issue_list' in issue_obj)) {
        return;
      }
      _ref = issue_obj.issue_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        issue = _ref[_i];
        new_issue = E.merge({}, issue);
        if ((_ref1 = new_issue.t_view) == null) {
          new_issue.t_view = this.t_view;
        }
        if ((_ref2 = new_issue.t_action) == null) {
          new_issue.t_action = this.t_action;
        }
        this.issue_list.push(new_issue);
      }
    };

    Issue.prototype.count = function() {
      return this.issue_list.length;
    };

    Issue.prototype.asTable = function(map) {
      var final, issue, _i, _len, _ref;
      final = [];
      _ref = this.issue_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        issue = _ref[_i];
        final.push({
          token: issue.token,
          title: "" + issue.t_view + "#" + issue.t_action + "#" + issue.token + "#" + (issue.more.join(',')),
          issue: this.map(map, issue.t_view, issue.t_action, issue.token, issue.more)
        });
      }
      return final;
    };

    Issue.prototype.map = function(map, t_view, t_action, token, more) {
      var map_list, spec, sub_map, _i, _j, _len, _len1, _ref;
      if (typeof map !== 'object') {
        return "" + t_view + "#" + t_action + "#" + token + "#" + (more.join(','));
      }
      map_list = [];
      if (t_view in map) {
        if (t_action in map[t_view]) {
          map_list.push(map[t_view][t_action]);
        }
        if ('default' in map[t_view]) {
          map_list.push(map[t_view]["default"]);
        }
      }
      if ('default' in map) {
        if (t_action in map["default"]) {
          map_list.push(map["default"][t_action]);
        }
        if ('default' in map["default"]) {
          map_list.push(map["default"]["default"]);
        }
      }
      for (_i = 0, _len = map_list.length; _i < _len; _i++) {
        sub_map = map_list[_i];
        _ref = sub_map || [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          spec = _ref[_j];
          if (token.match(spec[0])) {
            return this.doMap(token, spec[1], more, token);
          }
        }
      }
      return "" + t_view + "#" + t_action + "#" + token + "#" + (more.join(','));
    };

    Issue.prototype.doMap = function(token, pattern, vals) {
      var new_str;
      new_str = pattern.replace(/%([0-9])(?::([0-9]))?%/g, function(str, i1, i2, more) {
        if (i1 === '0') {
          return token;
        }
        if (i2) {
          return vals[i1 - 1] || vals[i2 - 1] || '';
        } else {
          return vals[i1 - 1] || '';
        }
      });
      return new_str;
    };

    return Issue;

  })();

  ModelJS = (function() {

    function ModelJS(view_nm, options, ss) {
      this.view_nm = view_nm;
      this.options = options;
      this._ModelJS = {
        ss: ss || false
      };
      this.restoreState(false);
    }

    ModelJS.prototype.getTable = function(tbl_nm) {
      this.loadTableIf(tbl_nm);
      return this.Table[tbl_nm];
    };

    ModelJS.prototype.loadTableIf = function(tbl_nm) {
      if (!(tbl_nm in this.Table)) {
        return this.loadTable(tbl_nm);
      }
    };

    ModelJS.prototype.restoreState = function(copy_of_state) {
      var key;
      if (this._ModelJS.ss != null) {
        for (key in this._ModelJS.ss) {
          delete this[key];
        }
      }
      if (this._ModelJS.ss != null) {
        E.merge(this, this._ModelJS.ss);
      }
      if (copy_of_state) {
        E.merge(this, copy_of_state);
      }
      return this.Table = {};
    };

    ModelJS.prototype.saveState = function() {
      var nm, ss, st;
      ss = this._ModelJS.ss;
      if (!ss) {
        return false;
      }
      st = {};
      for (nm in ss) {
        if (this[nm] !== ss[nm]) {
          st[nm] = this[nm];
        }
      }
      return E.merge({}, st);
    };

    ModelJS.prototype.invalidateTables = function(tbl_nms, not_tbl_names) {
      var f, nm, _i, _len;
      f = ':ModelJS.invalidateTables~' + this.view_nm;
      _log2(f, tbl_nms, not_tbl_names);
      if (not_tbl_names == null) {
        not_tbl_names = [];
      }
      if (tbl_nms === true) {
        tbl_nms = (function() {
          var _results;
          _results = [];
          for (nm in this.Table) {
            if (!(__indexOf.call(not_tbl_names, nm) >= 0)) {
              _results.push(nm);
            }
          }
          return _results;
        }).call(this);
      }
      for (_i = 0, _len = tbl_nms.length; _i < _len; _i++) {
        nm = tbl_nms[_i];
        delete this.Table[nm];
      }
      return E.View().invalidateTables(this.view_nm, tbl_nms);
    };

    return ModelJS;

  })();

  w = typeof window !== "undefined" ? window : {};

  w.EpicMvc = w.E = new app(w);

  _ref = {
    Issue: Issue,
    Fist: Fist,
    ModelJS: ModelJS,
    FistFilt: FistFilt
  };
  for (nm in _ref) {
    klass = _ref[nm];
    w.E[nm] = klass;
  }

  w._log2 = function() {};

  w._log2 = Function.prototype.bind.call(console.log, console);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = w.E;
  }

  if (typeof define === "function" && define.amd) {
    define(function() {
      return w.E;
    });
  }

}).call(this);

/*Package/Base/app.coffee*/// Generated by CoffeeScript 1.4.0
(function() {

  E.app$Base = {
    MANIFEST: {
      Extra: ['LoadStrategy', 'RenderStrategy', 'dataAction'],
      Model: ['App', 'View']
    },
    OPTIONS: {
      loader: 'LoadStrategy$Base',
      render: 'RenderStrategy$Base',
      data_action: 'dataAction$Base'
    },
    MODELS: {
      App: {
        "class": "App$Base",
        inst: "iBaseApp"
      },
      View: {
        "class": "View$Base",
        inst: "iBaseView"
      }
    }
  };

}).call(this);

/*Package/Base/Model/View.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var View$Base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  View$Base = (function(_super) {

    __extends(View$Base, _super);

    function View$Base(view_nm, options) {
      this.T_if = __bind(this.T_if, this);

      this.T_page = __bind(this.T_page, this);

      this.handleIt = __bind(this.handleIt, this);

      this.doDefer = __bind(this.doDefer, this);

      var frames, ix, nm;
      View$Base.__super__.constructor.call(this, view_nm, options);
      frames = E.appGetSetting('frames');
      this.frames = (function() {
        var _i, _len, _ref, _results;
        _ref = ((function() {
          var _results1;
          _results1 = [];
          for (nm in frames) {
            _results1.push(nm);
          }
          return _results1;
        })()).sort();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ix = _ref[_i];
          _results.push(frames[ix]);
        }
        return _results;
      })();
      this.frames.push('X');
      this.did_run = false;
      this.in_run = false;
      window.oE = this;
      this.defer_it_cnt = 0;
      this.start = false;
    }

    View$Base.prototype.nest_up = function(who) {
      var f;
      f = 'nest_up:' + who;
      if (this.defer_it_cnt === 0) {
        if (this.in_run) {
          BLOWUP();
        }
        this.in_run = true;
        _log2(f, 'START RUN', this.frames, this.start = new Date().getTime());
        this.defer_it = new m.Deferred();
      }
      return this.defer_it_cnt++;
    };

    View$Base.prototype.nest_dn = function(who) {
      var f;
      f = 'nest_dn:' + who;
      if (this.defer_it_cnt > 0) {
        this.defer_it_cnt--;
      }
      if (this.defer_it_cnt === 0) {
        _log2(f, 'END RUN', this.defer_content, new Date().getTime() - this.start);
        this.in_run = false;
        return this.defer_it.resolve(this.defer_content);
      }
    };

    View$Base.prototype.run = function() {
      var f, flow, layout, step, track, who, _ref, _ref1;
      f = 'run';
      who = 'R';
      _ref = E.App().getStepPath(), flow = _ref[0], track = _ref[1], step = _ref[2];
      layout = E.appGetSetting('layout', flow, track, step);
      this.page_name = (_ref1 = (E.appGetS(flow, track, step)).page) != null ? _ref1 : step;
      this.did_run = true;
      this.frames[this.frames.length - 1] = layout;
      this.frame_inx = 0;
      this.resetInfo();
      this.nest_up(who);
      this.defer_content = this.kids([['page', {}]]);
      this.nest_dn(who);
      return this.defer_it.promise;
    };

    View$Base.prototype.resetInfo = function() {
      this.info_foreach = {};
      this.info_parts = [{}];
      this.info_if_nms = {};
      return this.info_defer = [[]];
    };

    View$Base.prototype.saveInfo = function() {
      var dyn, f, nm, rec, row_num, saved_info, _ref;
      f = 'saveInfo';
      dyn = {};
      row_num = {};
      _ref = this.info_foreach;
      for (nm in _ref) {
        rec = _ref[nm];
        dyn[nm] = rec.dyn;
        row_num[nm] = rec.row._COUNT;
      }
      saved_info = E.merge({}, {
        info_foreach: {
          dyn: dyn,
          row_num: row_num
        },
        info_parts: this.info_parts
      });
      return saved_info;
    };

    View$Base.prototype.restoreInfo = function(saved_info) {
      var dyn_list, dyn_list_orig, dyn_m, dyn_t, f, info_parts, nm, oM, prev_row, rec, rh, rh_alias, row, row_num, t_set, tbl, _i, _len, _ref, _results;
      f = 'restoreInfo';
      this.resetInfo();
      _ref = saved_info.info_foreach.dyn;
      _results = [];
      for (nm in _ref) {
        rec = _ref[nm];
        dyn_m = rec[0], dyn_t = rec[1], dyn_list_orig = rec[2];
        dyn_list = [];
        oM = E[dyn_m]();
        for (_i = 0, _len = dyn_list_orig.length; _i < _len; _i++) {
          t_set = dyn_list_orig[_i];
          _log2(f, nm, 't_set', t_set);
          rh = t_set[0], rh_alias = t_set[1];
          dyn_list.push(t_set);
          if (!(rh_alias in this.info_foreach)) {
            _log2(f, nm, 'rh_alias', rh_alias);
            if (dyn_list.length === 1) {
              tbl = oM.getTable(rh);
            } else {
              tbl = prev_row[rh];
            }
            row_num = saved_info.info_foreach.row_num[rh_alias];
            row = E.merge({}, tbl[row_num]);
            this.info_foreach[rh_alias] = {
              dyn: [dyn_m, dyn_t, dyn_list],
              row: row
            };
            prev_row = row;
          } else {
            prev_row = this.info_foreach[rh_alias].row;
          }
        }
        info_parts = E.merge([], saved_info.info_parts);
        _results.push(_log2(f, 'info_parts', this.info_parts));
      }
      return _results;
    };

    View$Base.prototype.getTable = function(nm) {
      var f, field, row, _i, _len, _ref;
      f = 'Base:M/View.getTable:' + nm;
      switch (nm) {
        case 'Control':
        case 'Form':
          return this.fist_table[nm];
        case 'If':
          return [this.info_if_nms];
        case 'Part':
          return this.info_parts.slice(-1);
        case 'Field':
          row = {};
          _ref = this.fist_table.Control;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            row[field.name] = [field];
          }
          _log2(f, row);
          return [row];
        default:
          return [];
      }
    };

    View$Base.prototype.invalidateTables = function(view_nm, tbl_nms) {
      var f;
      if (!this.did_run) {
        return;
      }
      f = 'Base:M/View.invalidateTables';
      m.startComputation();
      m.endComputation();
    };

    View$Base.prototype.wrap = function(view, attrs, content, defer, has_root) {
      var inside,
        _this = this;
      inside = {
        defer: defer
      };
      attrs.config = function(el, isInit, context) {
        var f, _i, _len, _ref, _results;
        f = 'Base:M/View..config:' + view;
        _ref = inside.defer;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          defer = _ref[_i];
          _log2(f, defer);
          _results.push(_this.doDefer(defer, el));
        }
        return _results;
      };
      attrs['data-part'] = view;
      if ('dynamic' in attrs) {
        return {
          tag: attrs.dynamic,
          attrs: attrs,
          children: content
        };
      } else {
        if (!content) {
          return '';
        }
        if (has_root) {
          return content;
        } else {
          return {
            tag: 'div',
            attrs: attrs,
            children: content
          };
        }
      }
    };

    View$Base.prototype.doDefer = function(defer_obj, el) {
      var _this = this;
      if ('A' === E.type_oau(defer_obj.defer)) {
        _log2('WARNING', 'Got an array for defer', defer_obj.defer);
        return 'WAS-ARRAY';
      }
      if (defer_obj.func) {
        return defer_obj.func(el, defer_obj.attrs);
      }
      return defer_obj.defer.then(function(f_content) {
        defer_obj.func = new Function('el', 'attrs', f_content);
        _this.doDefer(defer_obj, el);
      });
    };

    View$Base.prototype.handleIt = function(content) {
      var f;
      f = 'handleIt';
      if (typeof content === 'function') {
        content = content();
      }
      return content;
    };

    View$Base.prototype.formatFromSpec = function(val, spec, custom_spec) {
      var left, right, str, _base, _ref;
      switch (spec) {
        case void 0:
          return val;
        case '':
          if (custom_spec) {
            return typeof (_base = window.EpicMvc).custom_filter === "function" ? _base.custom_filter(val, custom_spec) : void 0;
          } else {
            return val;
          }
        case 'count':
          return val != null ? val.length : void 0;
        case 'bool':
          if (val) {
            return true;
          } else {
            return false;
          }
        case 'bytes':
          return window.bytesToSize(Number(val));
        case 'uriencode':
          return encodeURIComponent(val);
        case 'esc':
          return window.EpicMvc.escape_html(val);
        case 'quo':
          return ((val.replace(/\\/g, '\\\\')).replace(/'/g, '\\\'')).replace(/"/g, '\\"');
        case '1':
          return (String(val))[0];
        case 'lc':
          return (String(val)).toLowerCase();
        case 'ucFirst':
          str = (String(str)).toLowerCase();
          return str.slice(0, 1).toUpperCase() + str.slice(1);
        default:
          if (spec[0] === '?') {
            _ref = spec.slice(1).split('?'), left = _ref[0], right = _ref[1];
            return (val ? left : right != null ? right : '').replace(new RegExp('[%]', 'g'), val);
          } else {
            return val;
          }
      }
    };

    View$Base.prototype.v3 = function(view_nm, tbl_nm, key, format_spec, custom_spec) {
      var row;
      row = (E[view_nm](tbl_nm))[0];
      return this.formatFromSpec(row[key], format_spec, custom_spec);
    };

    View$Base.prototype.v2 = function(table_ref, col_nm, format_spec, custom_spec, sub_nm) {
      var ans;
      ans = this.info_foreach[table_ref].row[col_nm];
      if (sub_nm != null) {
        ans = ans[sub_nm];
      }
      return this.formatFromSpec(ans, format_spec, custom_spec);
    };

    View$Base.prototype.weed = function(attrs) {
      var clean_attrs, f, nm, val;
      f = 'weed';
      clean_attrs = {};
      for (nm in attrs) {
        val = attrs[nm];
        if (nm[0] !== '-') {
          clean_attrs[nm] = val;
        } else {
          if (val) {
            clean_attrs[nm.slice(1)] = val;
          }
        }
      }
      _log2(f, clean_attrs);
      return clean_attrs;
    };

    View$Base.prototype.kids = function(kids) {
      var ans, f, ix, kid, out, who, _i, _len,
        _this = this;
      f = 'kids';
      who = 'K';
      out = [];
      for (ix = _i = 0, _len = kids.length; _i < _len; ix = ++_i) {
        kid = kids[ix];
        if ('A' === E.type_oau(kid)) {
          out.push(ix);
          ans = this['T_' + kid[0]](kid[1], kid[2]);
          if (ans != null ? ans.then : void 0) {
            this.nest_up(who);
            (function(ix) {
              return ans.then(function(result) {
                out[ix] = result;
                return _this.nest_dn(who);
              });
            })(ix);
          } else {
            out[ix] = ans;
          }
        } else {
          out.push(kid);
        }
      }
      return out;
    };

    View$Base.prototype.loadPartAttrs = function(attrs) {
      var attr, f, result, val;
      f = 'Base:M/View.loadPartAttrs';
      result = {};
      for (attr in attrs) {
        val = attrs[attr];
        if ('data-e-' !== attr.slice(0, 7)) {
          continue;
        }
        result[attr.slice(7)] = val;
      }
      return result;
    };

    View$Base.prototype.T_page = function(attrs) {
      var d_load, f, name, view;
      f = 'T_page';
      if (this.frame_inx < this.frames.length) {
        d_load = E.oLoader.d_layout(name = this.frames[this.frame_inx++]);
        view = (this.frame_inx < this.frames.length ? 'frame' : 'layout') + '/' + name;
      } else {
        d_load = E.oLoader.d_page(name = this.page_name);
        view = 'page/' + name;
      }
      return this.piece_handle(view, attrs != null ? attrs : {}, d_load);
    };

    View$Base.prototype.T_part = function(attrs) {
      var d_load, f, view;
      view = attrs.part;
      f = 'T_part:' + view;
      d_load = E.oLoader.d_part(view);
      return this.piece_handle(view, attrs, d_load, true);
    };

    View$Base.prototype.piece_handle = function(view, attrs, obj, is_part) {
      var can_componentize, content, defer, f, result;
      f = 'piece_handle';
      if (obj != null ? obj.then : void 0) {
        return this.D_piece(view, attrs, obj, is_part);
      }
      _log2(f, view);
      content = obj.content, can_componentize = obj.can_componentize;
      this.info_parts.push(this.loadPartAttrs(attrs));
      this.info_defer.push([]);
      content = this.handleIt(content);
      defer = this.info_defer.pop();
      if (can_componentize || attrs.dynamic || defer.length || !is_part) {
        if (defer.length && !can_componentize && !attrs.dynamic) {
          _log2("WARNING: DEFER logic in (" + view + "); wrapping DIV tag.");
        }
        result = this.wrap(view, attrs, content, defer, can_componentize);
      } else {
        result = content;
      }
      return result;
    };

    View$Base.prototype.D_piece = function(view, attrs, d_load, is_part) {
      var d_result, f, saved_info, who,
        _this = this;
      f = 'D_piece';
      who = 'P';
      this.nest_up(who + view);
      saved_info = this.saveInfo();
      d_result = d_load.then(function(obj) {
        var result;
        _log2(f, 'THEN', obj);
        if (obj != null ? obj.then : void 0) {
          BLOWUP();
        }
        _this.restoreInfo(saved_info);
        result = _this.piece_handle(view, attrs, obj, is_part);
        _this.nest_dn(who + view);
        return result;
      });
      return d_result;
    };

    View$Base.prototype.T_defer = function(attrs, content) {
      var f, f_content;
      f = 'Base:M/View.T_defer:';
      f_content = this.handleIt(content);
      this.info_defer[this.info_defer.length - 1].push({
        attrs: attrs,
        func: new Function('el', 'attrs', f_content)
      });
      return '';
    };

    View$Base.prototype.T_if_true = function(attrs, content) {
      if (this.info_if_nms[attrs.name]) {
        return this.handleIt(content());
      } else {
        return '';
      }
    };

    View$Base.prototype.T_if_false = function(attrs, content) {
      if (this.info_if_nms[attrs.name]) {
        return '';
      } else {
        return this.handleIt(content);
      }
    };

    View$Base.prototype.T_if = function(attrs, content) {
      var is_true, issue, lh, rh, tbl, val, _ref, _ref1;
      issue = false;
      is_true = false;
      if ('val' in attrs) {
        if ('eq' in attrs) {
          if (attrs.val === attrs.eq) {
            is_true = true;
          }
        } else if ('ne' in attrs) {
          if (attrs.val !== attrs.ne) {
            is_true = true;
          }
        } else if ('in_list' in attrs) {
          if (_ref = attrs.val, __indexOf.call(attrs.in_list.split(','), _ref) >= 0) {
            is_true = true;
          }
        } else {
          issue = true;
        }
      } else if ('set' in attrs) {
        is_true = attrs.set ? true : false;
      } else if ('not_set' in attrs) {
        is_true = attrs.not_set ? false : true;
      } else if ('table_is_not_empty' in attrs) {
        val = attrs.table_is_not_empty;
        _ref1 = val.split('/'), lh = _ref1[0], rh = _ref1[1];
        tbl = this._accessModelTable(val, false)[0];
        if (tbl.length) {
          is_true = true;
        }
      } else {
        issue = true;
      }
      if (issue) {
        console.log('ISSUE T_if', attrs);
      }
      if ('name' in attrs) {
        this.info_if_nms[attrs.name] = is_true;
      }
      if (is_true && content) {
        return this.handleIt(content);
      } else {
        return '';
      }
    };

    View$Base.prototype._accessModelTable = function(at_table, alias) {
      var dyn_list, dyn_m, dyn_t, lh, oM, rh, rh_alias, tbl, _ref, _ref1, _ref2;
      _ref = at_table.split('/'), lh = _ref[0], rh = _ref[1];
      if (lh in this.info_foreach) {
        tbl = this.info_foreach[lh].row[rh];
        _ref1 = this.info_foreach[lh].dyn, dyn_m = _ref1[0], dyn_t = _ref1[1], dyn_list = _ref1[2];
      } else {
        oM = E[lh]();
        tbl = oM.getTable(rh);
        _ref2 = [lh, rh, []], dyn_m = _ref2[0], dyn_t = _ref2[1], dyn_list = _ref2[2];
      }
      if (tbl.length === 0) {
        return [tbl, rh, lh, rh, oM];
      }
      rh_alias = rh;
      if (alias) {
        rh_alias = alias;
      }
      dyn_list.push([rh, rh_alias]);
      this.info_foreach[rh_alias] = {
        dyn: [dyn_m, dyn_t, dyn_list]
      };
      return [tbl, rh_alias, lh, rh, oM];
    };

    View$Base.prototype.T_foreach = function(attrs, content_f) {
      var count, f, limit, result, rh_alias, row, tbl, _i, _len, _ref;
      f = 'T_foreach';
      _log2(f, attrs);
      _ref = this._accessModelTable(attrs.table, attrs.alias), tbl = _ref[0], rh_alias = _ref[1];
      if (tbl.length === 0) {
        return '';
      }
      result = [];
      limit = 'limit' in attrs ? Number(attrs.limit) - 1 : tbl.length;
      for (count = _i = 0, _len = tbl.length; _i < _len; count = ++_i) {
        row = tbl[count];
        row = tbl[count];
        this.info_foreach[rh_alias].row = row;
        this.info_foreach[rh_alias].count = count;
        result.push(this.handleIt(content_f));
      }
      delete this.info_foreach[rh_alias];
      return result;
    };

    View$Base.prototype.T_fist = function(attrs) {
      var any_req, choices, fl, fl_nm, fm_nm, focus_nm, help, hpfl, is_first, issues, ix, map, nm, oFi, one_field_nm, orig, out, part, row, rows, s, show_req, value_fl_nm, _i, _j, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      part = (_ref = attrs.part) != null ? _ref : 'fist_default';
      row = (_ref1 = attrs.row) != null ? _ref1 : false;
      fm_nm = attrs.form;
      oFi = E.fist(fm_nm);
      one_field_nm = attrs.field != null ? attrs.field : false;
      help = (_ref2 = attrs.help) != null ? _ref2 : '';
      show_req = 'show_req' in attrs ? attrs.show_req : 'yes';
      any_req = false;
      is_first = true;
      out = [];
      hpfl = (function() {
        var _results;
        _results = [];
        for (nm in oFi.getHtmlFieldValues()) {
          _results.push(nm);
        }
        return _results;
      })();
      issues = oFi.getFieldIssues();
      focus_nm = oFi.getFocus();
      map = E['issues$' + E.appGetSetting(E.App().path(), 'group')];
      for (_i = 0, _len = hpfl.length; _i < _len; _i++) {
        fl_nm = hpfl[_i];
        if (one_field_nm !== false && one_field_nm !== fl_nm) {
          continue;
        }
        orig = oFi.getFieldAttributes(fl_nm);
        fl = E.merge({
          tip: '',
          fistnm: fm_nm,
          focus: ''
        }, orig);
        if (fl_nm === focus_nm) {
          fl.focus = 'yes';
        }
        fl.is_first = is_first === true ? 'yes' : '';
        is_first = false;
        fl.yes_val = fl.type === 'yesno' ? String((_ref3 = fl.cdata) != null ? _ref3 : '1') : 'not_used';
        fl.req = fl.req === true ? 'yes' : '';
        if (fl.req === true) {
          any_req = true;
        }
        fl.name = fl_nm;
        if ((_ref4 = fl["default"]) == null) {
          fl["default"] = '';
        }
        fl["default"] = String(fl["default"]);
        value_fl_nm = row ? fl_nm + '__' + row : fl_nm;
        fl.value = (_ref5 = oFi.getHtmlFieldValue(value_fl_nm)) != null ? _ref5 : fl["default"];
        fl.selected = fl.type === 'yesno' && fl.value === fl.yes_val ? 'yes' : '';
        fl.id = 'U' + E.nextCounter();
        fl.type = (fl.type.split(':'))[0];
        if ((_ref6 = fl.width) == null) {
          fl.width = '';
        }
        if ((_ref7 = fl.size) == null) {
          fl.size = '';
        }
        if (fl.type === 'radio' || fl.type === 'pulldown') {
          choices = oFi.getChoices(fl_nm);
          rows = [];
          for (ix = _j = 0, _ref8 = choices.options.length; 0 <= _ref8 ? _j < _ref8 : _j > _ref8; ix = 0 <= _ref8 ? ++_j : --_j) {
            s = choices.values[ix] === (String(fl.value)) ? 'yes' : '';
            rows.push({
              option: choices.options[ix],
              value: choices.values[ix],
              selected: s
            });
          }
          fl.Choice = rows;
        }
        fl.issue = issues[value_fl_nm] ? issues[value_fl_nm].asTable(map)[0].issue : '';
        out.push(fl);
      }
      this.fist_table = {
        Form: [
          {
            show_req: show_req,
            any_req: any_req,
            help: help
          }
        ],
        Control: out
      };
      return this.T_part({
        part: part
      });
    };

    return View$Base;

  })(E.ModelJS);

  E.Model.View$Base = View$Base;

}).call(this);

/*Package/Base/Model/App.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var App$Base,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App$Base = (function(_super) {

    __extends(App$Base, _super);

    function App$Base(view_nm, options) {
      var ss;
      ss = {
        f: null,
        t: null,
        s: null,
        sp: []
      };
      App$Base.__super__.constructor.call(this, view_nm, options, ss);
    }

    App$Base.prototype.goTo = function(f, t, s) {
      var was, _ref;
      was = "" + this.f + "/" + this.t + "/" + this.s;
      if (!f || !(E.appGetF(f) != null)) {
        _ref = (E.appGetOpt('go')).split('/'), f = _ref[0], t = _ref[1], s = _ref[2];
      } else if (!(t != null) || !(E.appGetT(f, t) != null)) {
        t = E.appStartT(f);
        s = E.appStartS(f, t);
      } else if (!(s != null) || !(E.appGetS(f, t, s) != null)) {
        s = E.appStartS(f, t);
      }
      this.f = f;
      this.t = t;
      this.s = s;
      if (was !== ("" + this.f + "/" + this.t + "/" + this.s)) {
        return this.invalidateTables(['V']);
      }
    };

    App$Base.prototype.go = function(path) {
      var ix, q, v, _i, _len, _ref, _ref1;
      q = path.split('/');
      _ref = [this.f, this.t, this.s];
      for (ix = _i = 0, _len = _ref.length; _i < _len; ix = ++_i) {
        v = _ref[ix];
        if (!((_ref1 = q[ix]) != null ? _ref1.length : void 0)) {
          q[ix] = v;
        } else {
          break;
        }
      }
      return this.goTo(q[0], q[1], q[2]);
    };

    App$Base.prototype.appGet = function(attr) {
      return E.appGetAttr(this.f, this.t, this.s, attr);
    };

    App$Base.prototype.getStepPath = function() {
      return [this.f, this.t, this.s];
    };

    App$Base.prototype.action = function(ctx, act, p) {
      var i, m, q, r;
      r = ctx.r, i = ctx.i, m = ctx.m;
      switch (act) {
        case 'path':
          return this.go(p.path);
        case 'push':
          return this.sp.push([this.f, this.t, this.s]);
        case 'pop':
          if (this.sp.length) {
            q = this.sp.pop();
            return this.goTo(q[0], q[1], q[2]);
          }
          break;
        case 'add_message':
          return m.add(p.type, p.msgs);
        case 'add_issue':
          return i.add(p.type, p.msgs);
        case 'clear':
          this.issues = new E.Issue(this.view_nm);
          this.messages = new E.Issue(this.view_nm);
          return this.invalidateTables(['Issue', 'Message']);
        default:
          return App$Base.__super__.action.call(this, ctx, act, p);
      }
    };

    App$Base.prototype.setIssues = function(issue_obj) {
      if ((issue_obj != null ? issue_obj.count() : void 0) !== 0) {
        this.issues.addObj(issue_obj);
      }
      return this.invalidateTables(['Issue']);
    };

    App$Base.prototype.setMessages = function(issue_obj) {
      if ((issue_obj != null ? issue_obj.count() : void 0) !== 0) {
        this.messages.addObj(issue_obj);
      }
      return this.invalidateTables(['Message']);
    };

    App$Base.prototype.getTable = function(tbl_nm) {
      var map;
      map = E['issues$' + this.appGet('group')];
      this.Table[tbl_nm] = (function() {
        switch (tbl_nm) {
          case 'Message':
            return this.messages.asTable(map);
          case 'Issue':
            return this.issues.asTable(map);
          case 'V':
            return [E.appGetVars(this.f, this.t, this.s)];
          default:
            return App$Base.__super__.getTable.call(this, tbl_nm);
        }
      }).call(this);
    };

    return App$Base;

  })(E.ModelJS);

  E.Model.App$Base = App$Base;

}).call(this);

/*Package/Base/Extra/dataAction.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  var dataAction;

  dataAction = function(type, data_action, data_params) {
    var action_specs, f, one_spec, spec_action, spec_type, _base, _i, _len, _ref, _results;
    f = 'Base:E/dataAction:on[data-action]' + type;
    if (typeof (_base = E.option).activity === "function") {
      _base.activity(type);
    }
    action_specs = data_action.split(',');
    _results = [];
    for (_i = 0, _len = action_specs.length; _i < _len; _i++) {
      one_spec = action_specs[_i];
      _ref = one_spec.split(':'), spec_type = _ref[0], spec_action = _ref[1];
      if (!spec_action) {
        spec_action = spec_type;
        spec_type = 'click';
      }
      if (spec_type === type) {
        (function(spec_action) {
          return setTimeout((function() {
            return E.click(spec_action, data_params);
          }), 5);
        })(spec_action);
      }
      break;
    }
    return _results;
  };

  E.Extra.dataAction$Base = dataAction;

  /*
  $(document).on("click change dblclick", "[data-action]", function(event_obj) {
  //console.log( 'event', event_obj, this, $(this).val());
  event_obj.preventDefault(); // Added to keep LOGIN FORM from posting, causing fresh instance to start up
  handle_data_action( event_obj.type, $(this).attr( 'data-action'), $(this).attr( 'data-params'), $(this).val());
  return false; // TODO CONSIDER MAKING SURE WE WANTED TO STOP, OR DO MORE TO ENSURE WE STOP DOING MORE THAN THIS
  });
  */


}).call(this);

/*Package/Base/Extra/LoadStrategy.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  var LoadStrategy$Base;

  LoadStrategy$Base = (function() {

    function LoadStrategy$Base(appconfs) {
      var i;
      this.reverse_packages = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = _ref = appconfs.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          _results.push(appconfs[i]);
        }
        return _results;
      })();
    }

    LoadStrategy$Base.prototype.getArtifact = function(nm, type) {
      var pkg, results, _i, _len, _ref, _ref1, _ref2, _ref3;
      results = false;
      _ref = this.reverse_packages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        results = (_ref1 = (_ref2 = E['view$' + pkg]) != null ? (_ref3 = _ref2[type]) != null ? _ref3[nm] : void 0 : void 0) != null ? _ref1 : false;
        if (results !== false) {
          break;
        }
      }
      if (results === false) {
        console.log('NO FILE FOUND! ' + nm);
      }
      return results;
    };

    LoadStrategy$Base.prototype.D_loadAsync = function() {
      var def;
      def = new m.Deferred();
      def.resolve();
      return def.promise;
    };

    LoadStrategy$Base.prototype.fist = function(grp_nm) {
      BROKEN();
      return E['fist$' + grp_nm];
    };

    LoadStrategy$Base.prototype.d_layout = function(nm) {
      return this.getArtifact(nm, 'Layout');
    };

    LoadStrategy$Base.prototype.d_page = function(nm) {
      return this.getArtifact(nm, 'Page');
    };

    LoadStrategy$Base.prototype.d_part = function(nm) {
      return this.getArtifact(nm, 'Part');
    };

    return LoadStrategy$Base;

  })();

  E.Extra.LoadStrategy$Base = LoadStrategy$Base;

}).call(this);

/*Package/Base/Extra/RenderStrategy.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var RenderStrategy$Base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RenderStrategy$Base = (function() {

    function RenderStrategy$Base() {
      this.m_redraw = __bind(this.m_redraw, this);

      this.onPopState = __bind(this.onPopState, this);

      this.handleEvent = __bind(this.handleEvent, this);

      var baseDiv,
        _this = this;
      this.very_first = true;
      this.was_popped = false;
      this.was_modal = false;
      this.unloadMsgs = {};
      this.baseUrl = window.document.location.pathname;
      this.baseId = "epic-new-page";
      this.modalId = "epic-new-modal";
      this.basePage = '<div id="' + this.baseId + '"></div><div id="' + this.modalId + '"></div>';
      baseDiv = document.createElement('div');
      baseDiv.id = this.baseId;
      document.body.appendChild(baseDiv);
      setTimeout((function() {
        return _this.onPopState(true);
      }), 0);
      window.onpopstate = this.onPopState;
      this.redraw_guard = false;
      m.redraw = this.m_redraw;
      this.init();
      true;
    }

    RenderStrategy$Base.prototype.handleEvent = function(event_obj) {
      var attrs, data_action, data_params, f, ix, nm, target, type, val, _i, _ref;
      f = 'on[data-e-action]';
      if (event_obj == null) {
        event_obj = window.event;
      }
      target = event_obj.target;
      while (target.tagName !== 'BODY' && !(data_action = target.getAttribute('data-e-action'))) {
        target = target.parentElement;
      }
      _log2(f, 'event', event_obj, target, data_action);
      if (!data_action) {
        return false;
      }
      data_params = {};
      attrs = target.attributes;
      for (ix = _i = 0, _ref = attrs.length; 0 <= _ref ? _i < _ref : _i > _ref; ix = 0 <= _ref ? ++_i : --_i) {
        if (!('data-e-' === attrs[ix].name.slice(0, 7))) {
          continue;
        }
        if ('action' === (nm = attrs[ix].name.slice(7))) {
          continue;
        }
        data_params[nm] = attrs[ix].value;
      }
      type = event_obj.type;
      val = target.value;
      _log2(f, 'event', event_obj, target, type, data_action, data_params, val);
      event_obj.preventDefault();
      data_params.val = val;
      E.Extra[E.option.data_action](event_obj.type, data_action, data_params);
      return false;
    };

    RenderStrategy$Base.prototype.init = function() {
      var event_name, _i, _len, _ref, _results;
      _ref = ['click', 'change', 'dblclick'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event_name = _ref[_i];
        _results.push(document.body['on' + event_name] = this.handleEvent);
      }
      return _results;
    };

    RenderStrategy$Base.prototype.UnloadMessage = function(ix, msg) {
      var new_msg, nm, rec;
      if (msg) {
        this.unloadMsgs[ix] = msg;
      } else {
        delete this.unloadMsgs[ix];
      }
      new_msg = (function() {
        var _ref, _results;
        _ref = this.unloadMsgs;
        _results = [];
        for (nm in _ref) {
          rec = _ref[nm];
          _results.push(rec);
        }
        return _results;
      }).call(this);
      new_msg = new_msg.length ? new_msg.join("\n") : null;
      return window.onbeforeunload = function() {
        return new_msg;
      };
    };

    RenderStrategy$Base.prototype.onPopState = function(event) {
      var f;
      f = 'E:bootstrap.onPopState: ';
      _log2(f, {
        was_popped: this.was_popped,
        very_first: this.very_first
      }, true, {
        state: event === true ? 'X' : event.state
      });
      if (event === true || !event.state) {
        if (this.was_popped || !this.very_first) {
          return;
        }
      }
      this.was_popped = true;
      if (this.very_first) {
        E.click('browser_hash', {
          hash: location.hash.substr(1)
        });
      } else {
        if (event.state) {
          E.setModelState(event.state);
        }
        BROKEN() || this.render();
      }
    };

    RenderStrategy$Base.prototype.m_redraw = function() {
      var f,
        _this = this;
      f = 'm_redraw';
      if (this.redraw_guard !== false) {
        _log2(f, 'GUARD REDRAW');
        return;
      }
      this.redraw_guard = true;
      return E.View().run().then(function(content) {
        _log2('DEFER-R', 'RESULTS: content', content);
        _this.render(content, 'TODO', 'TODO', false);
        return _this.redraw_guard = false;
      });
    };

    RenderStrategy$Base.prototype.render = function(content, history, click_index, modal) {
      var container, start;
      if (this.was_modal) {
        BROKEN();
        m.render(document.getElementById(this.modalId), m());
      }
      if (modal) {
        BROKEN();
        m.render((container = document.getElementById(this.modalId)), this.modalView(content));
      } else {
        _log2('START RENDER', start = new Date().getTime());
        m.render((container = document.getElementById(this.baseId)), m('div', {}, content));
        _log2('END RENDER', new Date().getTime() - start);
      }
      console.log('render......', this.content_watch, container);
      this.was_modal = modal;
      this.was_popped = false;
      this.very_first = false;
    };

    RenderStrategy$Base.prototype.handleRenderState = function(history, click_index) {
      var displayHash, f, model_state, new_hash, _base, _base1;
      f = 'E:bootstrap.handleRenderState:' + history + ':' + click_index;
      _log2(f, {
        vf: this.very_first,
        wp: this.was_popped
      });
      if (!history) {
        return;
      }
      displayHash = this.very_first ? '' : 'click-' + click_index;
      new_hash = E.getDomCache();
      if (new_hash === false) {
        new_hash = E.getExternalUrl();
      }
      if (new_hash !== false) {
        displayHash = new_hash;
      }
      model_state = E.getModelState();
      if (this.very_first || history === 'replace') {
        if (typeof (_base = window.history).replaceState === "function") {
          _base.replaceState(model_state, displayHash, '#' + displayHash);
        }
      } else if (!this.was_popped && history === true) {
        if (typeof (_base1 = window.history).pushState === "function") {
          _base1.pushState(model_state, displayHash, '#' + displayHash);
        }
        window.document.title = displayHash;
      }
    };

    return RenderStrategy$Base;

  })();

  E.Extra.RenderStrategy$Base = RenderStrategy$Base;

}).call(this);

E.view$Base={
Layout: {
"default":{preloaded:1,can_componentize:false,defer:0,content:function(){return oE.kids([['page',{},function(){return []}]])}}}, Page: {
"default":{preloaded:1,can_componentize:true,defer:0,content:function(){return [{tag:'b',attrs:{},children:['A Base Page']}]}}}, Part: {
}};

/*Package/BaseDevl/app.coffee*/// Generated by CoffeeScript 1.4.0
(function() {

  window.EpicMvc.app$BaseDevl = {
    MANIFEST: {
      Model: ['ModelJS', 'Devl', 'View'],
      Extra: ['ParseFile']
    },
    SETTINGS: {
      frames: {
        MMM_BaseDevl: 'bdevl'
      }
    },
    OPTIONS: {
      loader: 'LoadStrategy$BaseDevl'
    },
    MODELS: {
      Devl: {
        "class": "Devl$BaseDevl",
        inst: "iBaseDevl_Devl"
      },
      View: {
        "class": "View$BaseDevl",
        inst: "iBaseDevl_View"
      }
    },
    CLICKS: {
      dbg_toggle: {
        "do": 'Devl.toggle',
        pass: 'what'
      },
      dbg_refresh: {
        "do": 'Devl.clear_cache'
      },
      dbg_open_model: {
        "do": 'Devl.open_model',
        pass: 'name'
      },
      dbg_open_table: {
        "do": 'Devl.open_table',
        pass: 'name'
      },
      dbg_open_subtable: {
        "do": 'Devl.open_subtable',
        pass: 'name'
      },
      dbg_close_subtable: {
        "do": 'Devl.close_subtable'
      },
      dbg_table_left: {
        "do": 'Devl.table_left'
      },
      dbg_table_right: {
        "do": 'Devl.table_right'
      },
      dbg_table_col_set: {
        "do": 'Devl.table_col_set',
        pass: 'col'
      },
      dbg_table_by_row: {
        "do": 'Devl.table_row_set'
      }
    }
  };

}).call(this);

/*Package/BaseDevl/Model/View.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var View,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = (function(_super) {

    __extends(View, _super);

    function View() {
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.run = function() {
      this.errors_cache = {
        _COUNT: 0
      };
      this.in_defer = false;
      return View.__super__.run.call(this);
    };

    View.prototype.Opts = function() {
      return E.Devl('Opts')[0];
    };

    View.prototype._Error = function(type, key, e) {
      var msg, prefix, _base, _ref;
      if ((_ref = (_base = this.errors_cache)[type]) == null) {
        _base[type] = {};
      }
      if (!(key in this.errors_cache[type])) {
        this.errors_cache[type][key] = e;
        this.errors_cache._COUNT++;
        if (this.errors_cache._COUNT < 5) {
          _log2('### _Error type/key/e', type, key, e);
          msg = ((("" + key + "\n\n" + e.message).replace(/&lt;/g, '<')).replace(/&gt;/g, '>')).replace(/&amp;/g, '&');
          return prefix = type === 'varGet2' || type === 'varGet3' ? 'Variable reference' : 'Tag';
        }
      }
    };

    View.prototype.invalidateTables = function(view_nm, tbl_list) {
      E.Devl().tableChange(view_nm, tbl_list);
      return View.__super__.invalidateTables.call(this, view_nm, tbl_list);
    };

    View.prototype.xT_defer = function(oPt) {
      var out;
      this.in_defer = true;
      out = View.__super__.xT_defer.call(this, oPt);
      this.in_defer = false;
      return out;
    };

    View.prototype.xT_debug = function(oPt) {
      var out, save;
      save = this.Opts;
      this.Opts = function() {
        return {};
      };
      out = this.viewExe.doAllParts(oPt.parts);
      this.Opts = save;
      return out;
    };

    View.prototype.xgetTable = function(nm) {
      var row, _i, _len, _ref;
      if (this.Opts().form !== true) {
        return View.__super__.xgetTable.call(this, nm);
      }
      switch (nm) {
        case 'Control':
        case 'Form':
          if (this.fist_table.Debug !== true) {
            _ref = this.fist_table.Control;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              row = _ref[_i];
              row.label += "<span class=\"dbg-tag-box\" title=\"" + row.name + "(" + row.type + ")\">#</span>";
            }
            this.fist_table.Debug = true;
          }
      }
      return View.__super__.xgetTable.call(this, nm);
    };

    View.prototype.xT_fist = function(oPt) {
      var c, g, inside, v, _ref, _ref1, _ref2;
      try {
        if (!oPt.attrs.form) {
          throw Error("Missing 'form' attribute");
        }
        g = this.Epic.getGroupNm();
        c = this.Epic.getFistGroupCache().getCanonicalFist(g, oPt.attrs.form);
        v = this.Epic.oAppConf.getFistView(g, c);
        if (!v) {
          throw Error("app.conf requires MODELS: ... forms=\"...," + c + "\"");
        }
        if (!('fistLoadData' in this.Epic.getInstance(v))) {
          throw Error("Your model (" + v + ") must have a method fistLoadData");
        }
      } catch (e) {
        _log2('##### Error in form-part', (_ref = oPt.attrs.part) != null ? _ref : 'fist_default', e, e.stack);
        this._Error('form', this._TagText(oPt, true), e);
        return this._Err('tag', oPt, e);
      }
      try {
        inside = '';
        if (this.Opts().form === true) {
          return this._Div('tag', oPt, inside, View.__super__.xT_fist.call(this, oPt));
        }
        if (this.Opts().file === true) {
          return "<div class=\"dbg-part-box\" title=\"" + ((_ref1 = oPt.attrs.part) != null ? _ref1 : 'fist_default') + ".part.html (" + oPt.attrs.form + ")\">.</div>" + (View.__super__.xT_fist.call(this, oPt));
        }
        return View.__super__.xT_fist.call(this, oPt);
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        _log2('##### Error in form-part', (_ref2 = oPt.attrs.part) != null ? _ref2 : 'fist_default', e, e.stack);
        this._Error('form_part', this._TagText(oPt, true), e);
        return this._Err('tag', oPt, e);
      }
    };

    View.prototype.T_part = function(attrs) {
      try {
        if (this.Opts().file !== true || this.in_defer) {
          return View.__super__.T_part.call(this, attrs);
        }
        return [
          m('div.dbg-part-box', {
            title: "Part/" + attrs.part + ".html"
          }, '.'), View.__super__.T_part.call(this, attrs)
        ];
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        _log2('##### Error in page-part', oPt.attrs.part, e, e.stack);
        return "<pre>&lt;epic:page_part part=\"Part/" + attrs.part + "\"&gt;<br>" + e + "<br>" + e.stack + "</pre>";
      }
    };

    View.prototype.T_page = function(attrs) {
      var letter, nest, page, type;
      try {
        if (this.Opts().file !== true) {
          return View.__super__.T_page.call(this, attrs);
        }
        nest = this.frames.length - this.frame_inx;
        letter = (function() {
          switch (nest) {
            case 0:
              return 'P';
            case 1:
              return 'L';
            default:
              return 'F';
          }
        })();
        type = {
          P: 'Page',
          L: 'Layout',
          F: 'Frame'
        }[letter];
        page = (function() {
          switch (nest) {
            case 0:
              return this.page_name;
            default:
              return this.frames[this.frame_inx];
          }
        }).call(this);
        return [
          {
            tag: 'div',
            attrs: {
              className: "dbg-part-box",
              title: "" + type + "/" + page + ".html"
            },
            children: letter
          }, View.__super__.T_page.call(this, attrs)
        ];
      } catch (e) {
        _log2('##### Error in ', type, page, e, e.stack);
        this._Error('page', this._TagText({
          attrs: attrs
        }, true), e);
        return this._Err('page', {
          attrs: attrs
        }, e);
      }
    };

    View.prototype.xv3 = function(view_nm, tbl_nm, col_nm, format_spec, custom_spec, give_error) {
      var key, t_custom_spec, t_format_spec, val;
      try {
        val = View.__super__.xv3.call(this, view_nm, tbl_nm, col_nm, format_spec, custom_spec);
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        if (val === void 0) {
          throw new Error("Column/spec does not exist (" + view_nm + "/" + tbl_nm + "/" + col_nm + t_format_spec + t_custom_spec + ").");
        }
      } catch (e) {
        if (this.Epic.isSecurityError(e || give_error)) {
          throw e;
        }
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        key = '&amp;' + view_nm + '/' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
        _log2('##### Error in varGet3 key=', key, e);
        this._Error('varGet3', key, e);
        throw e;
      }
      return val;
    };

    View.prototype.xv2 = function(tbl_nm, col_nm, format_spec, custom_spec, sub_nm, give_error) {
      var key, t_custom_spec, t_format_spec, val;
      try {
        val = View.__super__.xv2.call(this, tbl_nm, col_nm, format_spec, custom_spec, sub_nm);
      } catch (e) {
        if (this.Epic.isSecurityError(e || give_error)) {
          throw e;
        }
        _log2('##### varGet2', "&" + tbl_nm + "/" + col_nm + ";", e, e.stack);
        val = "&amp;" + tbl_nm + "/" + col_nm + ";[" + e.message + "] <pre>" + e.stack + "</pre>";
      }
      if (val === void 0) {
        t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
        t_custom_spec = custom_spec ? '#' + custom_spec : '';
        key = '&amp;' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
        _log2('##### Error in varGet2 key=', key, 'undefined');
        this._Error('varGet2', key, {
          message: 'is undefined',
          stack: "\n"
        });
        val = "&amp;" + tbl_nm + "/" + col_nm + ";";
      }
      return val;
    };

    View.prototype.xT_if = function(oPt) {
      var inside;
      try {
        if (this.Opts().tag2 !== true || this.in_defer) {
          return View.__super__.xT_if.call(this, oPt);
        }
        inside = '';
        return this._Div('tag', oPt, inside, View.__super__.xT_if.call(this, oPt));
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        this._Error('if', this._TagText(oPt, true), e);
        return this._Err('tag', oPt, e);
      }
    };

    View.prototype.xT_foreach = function(oPt) {
      var at_table, cols, inside, lh, nm, oMd, rh, tbl, _ref;
      try {
        at_table = this.viewExe.handleIt(oPt.attrs.table);
        _ref = at_table.split('/'), lh = _ref[0], rh = _ref[1];
        if (lh in this.info_foreach) {
          if (!(rh in this.info_foreach[lh].row)) {
            throw new Error("Sub-table missing: (" + rh + ") in foreach table='" + lh + "/" + rh + "' (dyn:" + (this.info_foreach[lh].dyn.join(',')));
          }
          tbl = this.info_foreach[lh].row[rh];
        } else {
          oMd = this.Epic.getInstance(lh);
          tbl = oMd.getTable(rh);
        }
        if (this.Opts().tag !== true || this.in_defer) {
          return View.__super__.xT_foreach.call(this, oPt);
        }
        if (tbl != null ? tbl.length : void 0) {
          inside = 'len:' + tbl.length;
          cols = (function() {
            var _results;
            _results = [];
            for (nm in tbl[0]) {
              _results.push(nm);
            }
            return _results;
          })();
          inside += "<span title=\"" + (cols.join(', ')) + "\">Cols:" + cols.length + "<span>";
        } else {
          inside = 'empty';
        }
        return this._Div('tag', oPt, inside, View.__super__.xT_foreach.call(this, oPt));
      } catch (e) {
        if (this.Epic.isSecurityError(e)) {
          throw e;
        }
        return this._Err('tag', oPt, e);
      }
    };

    View.prototype.xT_explain = function(oPt) {
      return JSON.stringify(this.Epic.getViewTable(oPt.attrs.table));
    };

    View.prototype._TagText = function(oPt, asError) {
      var ans, attrs, col_nm, custom_spec, format_spec, item, key, klass, list, sub_nm, t_custom_spec, t_format_spec, tag, tbl_nm, text, val, view_nm, _i, _len, _ref, _ref1, _ref2;
      tag = this.viewExe.current[oPt.parts + 1];
      attrs = [];
      _ref = oPt.attrs;
      for (key in _ref) {
        val = _ref[key];
        if (typeof val === 'object') {
          list = val;
          val = '';
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            item = list[_i];
            text = false;
            ans = '';
            if (item[0] === 'varGet3') {
              _ref1 = item[1], view_nm = _ref1[0], tbl_nm = _ref1[1], col_nm = _ref1[2], format_spec = _ref1[3], custom_spec = _ref1[4];
              t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
              t_custom_spec = custom_spec ? '#' + custom_spec : '';
              text = '&' + view_nm + '/' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
              if (!asError) {
                ans = (function() {
                  try {
                    return this.varGet3(view_nm, tbl_nm, col_nm, format_spec, custom_spec, true);
                  } catch (e) {
                    return e.message;
                  }
                }).call(this);
              }
            }
            if (item[0] === 'varGet2') {
              _ref2 = item[1], tbl_nm = _ref2[0], col_nm = _ref2[1], format_spec = _ref2[2], custom_spec = _ref2[3], sub_nm = _ref2[4];
              t_format_spec = format_spec || custom_spec ? '#' + format_spec : '';
              t_custom_spec = custom_spec ? '#' + custom_spec : '';
              text = '&' + tbl_nm + '/' + col_nm + t_format_spec + t_custom_spec + ';';
              if (!asError) {
                ans = (function() {
                  try {
                    return this.varGet2(tbl_nm, col_nm, format_spec, custom_spec, sub_nm, true);
                  } catch (e) {
                    return e.message;
                  }
                }).call(this);
              }
            }
            val += text === false ? item : "<span title=\"" + ans + "\">" + text + "</span>";
          }
        }
        attrs.push("" + key + "=\"" + val + "\"");
      }
      if (klass) {
        klass = " class=\"" + klass + "\"";
      }
      return "&lt;epic:" + tag + " " + (attrs.join(' ')) + "&gt;";
    };

    View.prototype._Div = function(type, oPt, inside, after) {
      if (after == null) {
        after = '';
      }
      return "<div class=\"dbg-" + type + "-box\">" + (this._TagText(oPt)) + inside + "</div>" + after;
    };

    View.prototype._Err = function(type, oPt, e) {
      var stack, title;
      _log2('### _Err type/oPt/e', type, oPt, {
        e: e,
        m: e.message,
        s: e.stack
      });
      stack = this.Opts().stack ? "<pre>\n" + e.stack + "</pre>" : '';
      title = (e.stack.split('\n'))[1];
      return "<div class=\"dbg-" + type + "-error-box\">\n" + (this._TagText(oPt, true)) + "<br><span class=\"dbg-" + type + "-error-msg\" title=\"" + title + "\">" + e.message + "</span>\n</div>" + stack;
    };

    return View;

  })(E.Model.View$Base);

  E.Model.View$BaseDevl = View;

}).call(this);

/*Package/BaseDevl/Model/Devl.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  var Devl,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Devl = (function(_super) {

    __extends(Devl, _super);

    function Devl(view_nm, options) {
      Devl.__super__.constructor.call(this, view_nm, options);
      this.opts = {
        file: false,
        tag: false,
        tag2: false,
        form: false,
        model: false,
        stack: false
      };
      this.open_model = '';
      this.open_table = '';
      this.open_table_stack = [];
      this.table_row_cnt = 0;
      this.table_by_col = false;
      this.table_col = false;
      this.timer = false;
    }

    Devl.prototype.tableChange = function(view_nm, tbls) {
      var _this = this;
      if (view_nm === this.view_nm) {
        return;
      }
      if (this.timer !== false) {
        return;
      }
      return this.timer = setTimeout((function() {
        _this.timer = false;
        return _this.invalidateTables(['Model']);
      }), 0);
    };

    Devl.prototype.action = function(ctx, act, p) {
      var dummy, f, incr, _ref;
      f = 'dM:Devl(' + act + ')';
      switch (act) {
        case 'toggle':
          return this.opts[p.what] = !this.opts[p.what];
        case 'clear_cache':
          return E.oLoader.clearCache();
        case 'open_model':
          if (this.open_model !== p.name) {
            this.open_model = p.name;
            this.open_table = '';
            this.open_table_stack = [];
          } else {
            this.open_model = '';
          }
          return delete this.Table.Model;
        case 'close_subtable':
          if (!this.open_table_stack.length) {
            return;
          }
          _ref = this.open_table_stack.pop(), dummy = _ref[0], this.table_row_cnt = _ref[1], this.table_by_col = _ref[2], this.table_col = _ref[3];
          return delete this.Table.Model;
        case 'open_subtable':
          this.open_table_stack.push([p.name, this.table_row_cnt, this.table_by_col, this.table_col]);
          this.table_row_cnt = 0;
          this.table_by_col = false;
          this.table_col = false;
          return delete this.Table.Model;
        case 'open_table':
          if (this.open_table !== p.name) {
            this.table_row_cnt = 0;
            this.table_by_col = false;
            this.table_col = false;
            this.open_table = p.name;
            this.open_table_stack = [];
          } else {
            this.open_table = '';
          }
          return delete this.Table.Model;
        case 'table_row_set':
          this.table_by_col = false;
          if (p.row != null) {
            return this.table_row_cnt = p.row;
          }
          break;
        case 'table_col_set':
          this.table_col = p.col;
          return this.table_by_col = true;
        case 'table_left':
        case 'table_right':
          incr = act === 'table_left' ? -1 : 1;
          _log2(f, act, incr, this.table_row_cnt);
          this.table_row_cnt += incr;
          return delete this.Table.Model;
        default:
          return Devl.__super__.action.call(this, ctx, act, p);
      }
    };

    Devl.prototype.loadTable = function(tbl_nm) {
      var cols, f, inst, is_sub, len, nm, open, rcol, rec, rec_s, row, row_inx, rrow, rval, sub_tnm, table, tnm, tnm_s, tref, trow, _i, _len, _ref, _ref1;
      f = 'dM:Devl.loadTable(' + tbl_nm + ')';
      switch (tbl_nm) {
        case 'Opts':
          return this.Table[tbl_nm] = [this.opts];
        case 'Model':
          table = [];
          for (inst in E.oModel) {
            nm = E.oModel[inst].view_nm;
            row = E.merge({
              is_open: '',
              Table: []
            }, {
              inst: inst,
              name: nm
            });
            if (nm === this.open_model) {
              row.is_open = 'yes';
            }
            _ref = E.oModel[inst].Table;
            for (tnm in _ref) {
              rec = _ref[tnm];
              tnm_s = tnm;
              rec_s = rec;
              open = false;
              is_sub = false;
              if (row.is_open === 'yes' && tnm === this.open_table) {
                open = true;
                if (this.open_table_stack.length) {
                  _ref1 = this.open_table_stack;
                  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                    tref = _ref1[_i];
                    sub_tnm = tref[0], row_inx = tref[1];
                    if (!(row_inx in rec_s) || !(sub_tnm in rec_s[row_inx])) {
                      break;
                    }
                    is_sub = true;
                    rec_s = rec_s[row_inx][sub_tnm];
                    tnm_s += ',' + sub_tnm;
                  }
                }
              }
              len = rec_s.length;
              trow = {
                is_open: open,
                is_sub: is_sub,
                name: tnm_s,
                rows: len,
                Cols: [],
                row_cnt: 0,
                col: '',
                curr_col: this.table_col,
                by_col: this.table_by_col
              };
              if (open) {
                if (this.table_row_cnt < 0) {
                  this.table_row_cnt = len - 1;
                }
                if (this.table_row_cnt > len - 1) {
                  this.table_row_cnt = 0;
                }
                trow.row_cnt = this.table_row_cnt;
              }
              if (len) {
                cols = (function() {
                  var _results;
                  _results = [];
                  for (rcol in rec_s[0]) {
                    _results.push(rcol);
                  }
                  return _results;
                })();
              } else {
                cols = [];
              }
              trow.cols = len ? cols.join(', ') : 'no rows';
              if (len && open) {
                if (!this.table_by_col) {
                  trow.Cols = (function() {
                    var _ref2, _results;
                    _ref2 = rec_s[this.table_row_cnt];
                    _results = [];
                    for (rcol in _ref2) {
                      rval = _ref2[rcol];
                      _results.push({
                        type: (rval === null ? 'Null' : typeof rval),
                        col_ix: cols.indexOf(rcol),
                        col: rcol,
                        len: rval != null ? rval.length : void 0,
                        val: rval != null ? rval : '???'
                      });
                    }
                    return _results;
                  }).call(this);
                } else {
                  trow.Rows = (function() {
                    var _ref2, _ref3, _results;
                    _results = [];
                    for (rrow in rec_s) {
                      _results.push({
                        row: rrow,
                        len: (_ref2 = rec_s[rrow][this.table_col]) != null ? _ref2.length : void 0,
                        type: (rec_s[rrow][this.table_col] === null ? 'Null' : typeof rec_s[rrow][this.table_col]),
                        val: (_ref3 = rec_s[rrow][this.table_col]) != null ? _ref3 : '???'
                      });
                    }
                    return _results;
                  }).call(this);
                }
              }
              row.Table.push(trow);
            }
            row.tables = row.Table.length;
            table.push(row);
            table.sort(function(a, b) {
              if (a.inst === b.inst) {
                return 0;
              } else if (a.inst > b.inst) {
                return 1;
              } else {
                return -1;
              }
            });
          }
          _log2(f, 'final', table);
          return this.Table[tbl_nm] = table;
        default:
          return Devl.__super__.loadTable.call(this, tbl_nm);
      }
    };

    return Devl;

  })(E.ModelJS);

  E.Model.Devl$BaseDevl = Devl;

}).call(this);

/*Package/BaseDevl/Model/ModelJS.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var CoreModelJS, ModelJS,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CoreModelJS = E.ModelJS;

  ModelJS = (function(_super) {

    __extends(ModelJS, _super);

    function ModelJS() {
      return ModelJS.__super__.constructor.apply(this, arguments);
    }

    ModelJS.prototype.action = function(ctx, act, parms) {
      throw new Error("Model (" + this.view_nm + ").action() needs (" + act + ")");
    };

    ModelJS.prototype.loadTable = function(tbl_nm) {
      if (tbl_nm in this.Table) {
        return;
      }
      throw new Error("Model (" + this.view_nm + ").loadTable() needs (" + tbl_nm + ")");
    };

    ModelJS.prototype.fistLoadData = function(oFist) {
      throw new Error("Model (" + this.view_nm + ").fistLoadData() needs (" + (oFist.getFistNm()) + ")");
    };

    ModelJS.prototype.fistGetFieldChoices = function(oFist, field) {
      throw new Error("Model (" + this.view_nm + ").fistGetFieldChoices() needs (" + (oFist.getFistNm()) + ":" + field + ")");
    };

    return ModelJS;

  })(CoreModelJS);

  E.ModelJS = ModelJS;

}).call(this);

/*Package/BaseDevl/Extra/ParseFile.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var E, FindAttrVal, FindAttrs, ParseFile, camelCase, doError, findStyleVal, findStyles, findVars, mkNm, mkObj, nm_map, sq, _log2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  E = {};

  _log2 = function() {};

  camelCase = function(input) {
    return input.toLowerCase().replace(/-(.)/g, function(match, group1) {
      return group1.toUpperCase();
    });
  };

  mkNm = function(nm) {
    if (nm.match(/^[a-zA-Z_]$/)) {
      return nm;
    } else {
      return sq(nm);
    }
  };

  mkObj = function(obj) {
    var nm, val;
    return '{' + ((function() {
      var _results;
      _results = [];
      for (nm in obj) {
        val = obj[nm];
        _results.push((mkNm(nm)) + ':' + val);
      }
      return _results;
    })()).join() + '}';
  };

  sq = function(text) {
    return "'" + (text.replace(/'/gm, '\\\'')).replace(/\n/g, '\\n') + "'";
  };

  findStyleVal = function(i, a) {
    var nm, p, parts, s, start, str, top;
    s = 'findStyleVal:';
    top = i;
    start = i;
    while (i < a.length) {
      if ((p = a[i++].trim()) !== '') {
        break;
      }
    }
    if (p === '') {
      return [false];
    }
    if (!(i < a.length)) {
      return [s + 'name', start, i];
    }
    nm = camelCase(p);
    start = i;
    while (i < a.length) {
      if ((p = a[i++].trim()) !== '') {
        break;
      }
    }
    if (!(i < a.length && p === ':')) {
      return [s + 'colon', start, i, nm];
    }
    start = i;
    parts = [];
    while (i < a.length) {
      if ((p = a[i++]) === ';') {
        break;
      }
      parts.push(p);
    }
    if (!(p === ';' || i >= a.length)) {
      return [s + 'semi-colon', start, i, nm];
    }
    str = (parts.join('')).trim();
    return [true, top, i, nm, str];
  };

  findStyles = function(file_info, parts) {
    var good, i, nm, start, str, styles, _ref;
    styles = {};
    i = 0;
    while (i < parts.length) {
      _ref = findStyleVal(i, parts), good = _ref[0], start = _ref[1], i = _ref[2], nm = _ref[3], str = _ref[4];
      if (good === false) {
        break;
      }
      if (good !== true) {
        _log2('STYLE-ERROR - parse:', {
          file_info: file_info,
          parts: parts,
          good: good,
          start: start,
          i: i,
          nm: nm,
          str: str
        });
        continue;
      }
      styles[nm] = (findVars(str)).join('+');
    }
    return styles;
  };

  nm_map = {
    'class': 'className',
    'for': 'htmlFor',
    defaultvalue: 'defaultValue',
    defaultchecked: 'defaultChecked',
    colspan: 'colSpan',
    cellpadding: 'cellPadding',
    cellspacing: 'cellSpacing',
    maxlength: 'maxLength',
    tabindex: 'tabIndex'
  };

  FindAttrVal = function(i, a) {
    var nm, p, parts, quo, start, top, _ref;
    top = start = i;
    while (i < a.length) {
      if ((p = a[i++].trim()) !== '') {
        break;
      }
    }
    if (!(i < a.length)) {
      return [false];
    }
    if (p === '') {
      return ['attr-name', start, i];
    }
    p.toLowerCase();
    nm = (_ref = nm_map[p]) != null ? _ref : p;
    start = i;
    while (i < a.length) {
      if ((p = a[i++].trim()) !== '') {
        break;
      }
    }
    if (p !== '=') {
      if (nm === 'selected' || nm === 'autofocus') {
        return [true, start, i - 1, nm, '=', '"', ['false']];
      }
      return ['equals', start, i, nm];
    }
    start = i;
    while (i < a.length) {
      if ((p = a[i++].trim()) !== '') {
        break;
      }
    }
    if (!(p === '"' || p === "'")) {
      return ['open-quote', start, i, nm, '='];
    }
    quo = p;
    start = i;
    parts = [];
    while (i < a.length) {
      if ((p = a[i++]) === quo) {
        break;
      }
      parts.push(p);
    }
    if (p !== quo) {
      return ['close-quote', start, i, nm, '=', quo];
    }
    return [true, top, i, nm, '=', quo, parts];
  };

  FindAttrs = function(file_info, str) {
    var attr_obj, attr_split, attrs_need_cleaning, data_nm, debug, empty, eq, f, good, i, nm, parts, quo, start, style_obj, _i, _len, _ref, _ref1, _ref2, _ref3;
    f = ':parse.FindAttrs:';
    str = ' ' + str;
    str = str.replace(/\se-/gm, ' data-e-');
    attr_split = str.trim().split(/([\s="':;])/);
    empty = attr_split[attr_split.length - 1] === '/' ? '/' : '';
    attrs_need_cleaning = false;
    if (empty === '/') {
      attr_split.pop();
    }
    attr_obj = {};
    i = 0;
    debug = false;
    while (i < attr_split.length) {
      _ref = FindAttrVal(i, attr_split), good = _ref[0], start = _ref[1], i = _ref[2], nm = _ref[3], eq = _ref[4], quo = _ref[5], parts = _ref[6];
      if (good === false) {
        break;
      }
      if (good !== true) {
        _log2('ERROR - parse:', {
          file_info: file_info,
          good: good,
          start: start,
          i: i,
          nm: nm,
          eq: eq,
          quo: quo,
          parts: parts,
          str: str
        });
        continue;
      }
      if (nm === 'data-e-click' || nm === 'data-e-change' || nm === 'data-e-dblclick') {
        debug = true;
        if ((_ref1 = attr_obj['data-e-action']) == null) {
          attr_obj['data-e-action'] = [];
        }
        attr_obj['data-e-action'].push((nm.slice(7)) + ':' + parts.join(''));
        continue;
      }
      if (nm === 'data-e-action') {
        debug = true;
        if ((_ref2 = attr_obj['data-e-action']) == null) {
          attr_obj['data-e-action'] = [];
        }
        attr_obj[nm].push(parts.join(''));
        continue;
      }
      if (nm === 'style') {
        style_obj = findStyles(file_info, parts);
        attr_obj[nm] = mkObj(style_obj);
        continue;
      }
      if (nm[0] === '?') {
        attrs_need_cleaning = true;
      }
      attr_obj[nm] = (findVars(parts.join(''))).join('+');
    }
    _ref3 = ['data-e-action'];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      data_nm = _ref3[_i];
      if (attr_obj[data_nm]) {
        attr_obj[data_nm] = (findVars(attr_obj[data_nm].join())).join('+');
      }
    }
    if (debug) {
      _log2(f, 'bottom', str, attr_obj);
    }
    return [mkObj(attr_obj), empty, attrs_need_cleaning];
  };

  findVars = function(text) {
    var ans, args, custom_hash_part, hash_part, i, last, parts, results, _ref;
    parts = text.split(/&([a-zA-Z0-9_]+\/[^;]{1,60});?/gm);
    results = [];
    if (parts.length === 1) {
      return [sq(parts[0])];
    }
    i = 0;
    while (i < parts.length - 1) {
      if (parts[i].length) {
        results.push(sq(parts[i]));
      }
      args = parts[i + 1].split('/');
      last = args.length - 1;
      if (last !== 1 && last !== 2) {
        _log2('ERROR VarGet:', parts[i + 1]);
        continue;
      }
      _ref = args[last].split('#'), args[last] = _ref[0], hash_part = _ref[1], custom_hash_part = _ref[2];
      ans = last === 1 ? "oE.v2(" + (sq(args[0])) + "," + (sq(args[1])) : "oE.v3(" + (sq(args[0])) + "," + (sq(args[1])) + "," + (sq(args[2]));
      if (hash_part) {
        ans += "," + (sq(hash_part));
      } else {
        if (custom_hash_part) {
          ans += ",''," + (sq(custom_hash_part));
        }
      }
      ans += ')';
      results.push(ans);
      i += 2;
    }
    if (parts[parts.length - 1]) {
      results.push(sq(parts[parts.length - 1]));
    }
    return results;
  };

  doError = function(file_stats, text) {
    console.log('ERROR', file_stats, text);
    throw Error(text);
  };

  ParseFile = function(file_stats, file_contents) {
    var T_EPIC, T_M1, T_M2, T_STYLE, T_TEXT, after, after_comment, after_script, attr_clean, attrs, base_nm, children, content, counter, doChildren, dom_close, dom_entity_map, dom_nms, empty, etags, f, flavor, i, nextCounter, oi, parts, prev_children, stats, t, tag_names_for_debugger, tag_wait, text, whole_tag, _ref, _ref1;
    f = ':BaseDevl.E/ParseFile.ParseFile~' + file_stats;
    counter = 0;
    nextCounter = function() {
      return ++counter;
    };
    etags = ['page', 'part', 'if', 'foreach', 'defer'];
    T_EPIC = 0;
    T_M1 = 1;
    T_M2 = 2;
    T_STYLE = 3;
    T_TEXT = 4;
    stats = {
      text: 0,
      dom: 0,
      epic: 0,
      defer: 0
    };
    dom_nms = ['style', 'div', 'a', 'span', 'ol', 'ul', 'li', 'p', 'b', 'i', 'dl', 'dd', 'dt', 'form', 'fieldset', 'label', 'legend', 'button', 'input', 'textarea', 'select', 'option', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'h1', 'h2', 'h3', 'h4', 'h5', 'img', 'br', 'hr', 'header', 'footer', 'section'];
    dom_close = ['img', 'br', 'input', 'hr'];
    dom_entity_map = {
      nbsp: '\u00A0',
      reg: '\u00AE',
      copy: '\u00A9',
      times: '\u22A0',
      lt: '\u003C',
      gt: '\u003E',
      amp: '\u0026',
      quot: '\u0022'
    };
    after_comment = file_contents.replace(/-->/gm, '\x02').replace(/<!--[^\x02]*\x02/gm, function(m) {
      return m.replace(/[^\n]+/gm, '');
    });
    after_script = after_comment.replace(/<\/script>/gm, '\x02').replace(/<script[^\x02]*\x02/gm, '');
    after = after_script;
    parts = after.split(/<(\/?)([:a-z_0-9-]+)([^>]*)>/);
    i = 0;
    tag_wait = [];
    children = [];
    while (i < parts.length - 1) {
      if (tag_wait.length && tag_wait[tag_wait.length - 1][1] === 'defer') {
        children.push([T_TEXT, (findVars(parts[i])).join('+')]);
      } else {
        text = parts[i].replace(/^\s+|\s+$/gm, ' ');
        if (text.length && text !== ' ' && text !== '  ') {
          text = text.replace(/&([a-z]+);/gm, function(m, p1) {
            if (p1 in dom_entity_map) {
              return dom_entity_map[p1];
            } else {
              return '&' + p1 + 'BROKEN;';
            }
          });
          if (tag_wait.length) {
            children.push([T_TEXT, (findVars(text)).join('+')]);
          } else {
            children.push([T_M1, 'span', {}, (findVars(text)).join('+')]);
          }
          if (!tag_wait.length) {
            stats.text++;
          }
        }
      }
      if (parts[i + 1] === '/') {
        if (!tag_wait.length) {
          doError(file_stats, "Close tag found when none expected close=" + parts[i + 2]);
        }
        _ref = tag_wait.pop(), oi = _ref[0], base_nm = _ref[1], attrs = _ref[2], prev_children = _ref[3], flavor = _ref[4];
        if (base_nm === 'defer') {
          stats.defer++;
        }
        if (parts[i + 2] !== parts[oi + 2]) {
          tag_names_for_debugger = {
            open: parts[oi + 2],
            close: parts[i + 2]
          };
          doError(file_stats, "Mismatched tags open=" + parts[oi + 2] + ", close=" + parts[i + 2]);
        }
        if (children.length === 0) {
          whole_tag = [flavor, base_nm, attrs, []];
        } else if (flavor === T_EPIC) {
          whole_tag = [flavor, base_nm, attrs, children];
          if (!tag_wait.length) {
            stats.epic++;
          }
        } else if (base_nm === 'style') {
          flavor = T_STYLE;
          whole_tag = [flavor, base_nm, attrs, children];
        } else {
          whole_tag = [flavor, base_nm, attrs, children];
          if (!tag_wait.length) {
            stats.dom++;
          }
        }
        children = prev_children;
        children.push(whole_tag);
      } else {
        empty = '';
        attrs = '{}';
        attr_clean = false;
        flavor = 'e-' === parts[i + 2].slice(0, 2) ? T_EPIC : T_M1;
        if (parts[i + 3].length > 0) {
          _ref1 = FindAttrs(file_stats, parts[i + 3]), attrs = _ref1[0], empty = _ref1[1], attr_clean = _ref1[2];
        }
        if (flavor === T_EPIC) {
          base_nm = parts[i + 2].slice(2);
          if (base_nm === 'page' || base_nm === 'part') {
            empty = '/';
          }
          if (__indexOf.call(etags, base_nm) < 0) {
            doError(file_stats, "UNKNONW EPIC TAG (" + base_nm + ") : Expected one of " + (etags.join()));
          }
        } else {
          base_nm = parts[i + 2];
          if (base_nm === 'img' || base_nm === 'br' || base_nm === 'input' || base_nm === 'hr') {
            empty = '/';
          }
          if (__indexOf.call(dom_nms, base_nm) < 0) {
            doError(file_stats, 'Unknown tag name ' + base_nm + ' in ' + file_stats);
          }
          if (attr_clean) {
            flavor = T_M2;
          }
        }
        if (empty === '/') {
          if (base_nm === 'defer') {
            stats.defer++;
          }
          whole_tag = [flavor, base_nm, attrs, []];
          children.push(whole_tag);
          if (!tag_wait.length) {
            if (flavor === T_EPIC) {
              stats.epic++;
            } else {
              stats.dom++;
            }
          }
        } else {
          tag_wait.push([i, base_nm, attrs, children, flavor]);
          children = [];
        }
      }
      i += 4;
    }
    if (tag_wait.length) {
      doError(file_stats, "Missing closing tags" + (((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tag_wait.length; _i < _len; _i++) {
          t = tag_wait[_i][0];
          _results.push(parts[t + 2]);
        }
        return _results;
      })()).join(', ')));
    }
    text = parts[i].replace(/^\s+|\s+$/g, ' ');
    if (text.length && text !== ' ' && text !== '  ') {
      text = text.replace(/&([a-z]+);/gm, function(m, p1) {
        if (p1 in dom_entity_map) {
          return dom_entity_map[p1];
        } else {
          return '&' + p1 + 'BROKEN;';
        }
      });
      children.push([T_M1, 'span', {}, (findVars(text)).join('+')]);
      stats.text++;
    }
    doChildren = function(child_array, fwrap) {
      var attr, has_epic, ix, kids, out, stuff, tag, _i, _len, _ref2;
      if ('A' !== E.type_oau(child_array)) {
        GLOBWUP();
      }
      out = [];
      has_epic = false;
      for (ix = _i = 0, _len = child_array.length; _i < _len; ix = ++_i) {
        _ref2 = child_array[ix], flavor = _ref2[0], tag = _ref2[1], attr = _ref2[2], kids = _ref2[3];
        switch (flavor) {
          case T_EPIC:
            has_epic = true;
            out.push("['" + tag + "'," + attr + "," + (doChildren(kids, true)) + "]");
            break;
          case T_M1:
            out.push("{tag:'" + tag + "',attrs:" + attr + ",children:" + (doChildren(kids)) + "}");
            break;
          case T_M2:
            out.push("{tag:'" + tag + "',attrs:oE.weed(" + attr + "),children:" + (doChildren(kids)) + "}");
            break;
          case T_STYLE:
            if (kids.length !== 1) {
              GLOWUP();
            }
            if (kids[0][0] !== T_TEXT) {
              BLOWUP();
            }
            out.push("{tag:'" + tag + "',attrs:" + attr + ",children:m.trust(" + kids[0][1] + ")}");
            break;
          case T_TEXT:
            out.push(tag);
            break;
          default:
            BLOWUP_FLAVOR_NOT_KNOWN();
        }
      }
      stuff = '[' + out.join() + ']';
      if (has_epic) {
        stuff = 'oE.kids(' + stuff + ')';
      }
      if (fwrap) {
        stuff = 'function(){return ' + stuff + '}';
      }
      return stuff;
    };
    content = 'return ' + doChildren(children);
    _log2(f, 'final', content);
    return {
      content: content,
      defer: stats.defer,
      can_componentize: children.length === 1 && stats.epic === 0
    };
  };

  if (typeof window !== "undefined" && window !== null) {
    _log2 = window._log2;
    E = window.E;
    E.Extra.ParseFile = ParseFile;
  } else {
    module.exports = function(w) {
      _log2 = w._log2;
      E = w.E;
      return E.Extra.ParseFile = ParseFile;
    };
  }

}).call(this);

/*Package/BaseDevl/Extra/LoadStrategy.coffee*/// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var LoadStrategy;

  LoadStrategy = (function() {

    function LoadStrategy(appconfs) {
      var dir, dir_map, i, pkg, pkgs, _i, _j, _len, _len1, _ref, _ref1;
      this.appconfs = appconfs;
      this.clearCache();
      this.cache_local_flag = true;
      this.reverse_packages = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = _ref = this.appconfs.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          _results.push(this.appconfs[i]);
        }
        return _results;
      }).call(this);
      dir_map = {};
      _ref = E.option.load_dirs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], dir = _ref1.dir, pkgs = _ref1.pkgs;
        for (_j = 0, _len1 = pkgs.length; _j < _len1; _j++) {
          pkg = pkgs[_j];
          dir_map[pkg] = dir;
        }
      }
      this.dir_map = dir_map;
    }

    LoadStrategy.prototype.clearCache = function() {
      this.cache = {};
      return this.refresh_stamp = (new Date).valueOf();
    };

    LoadStrategy.prototype.D_loadAsync = function() {
      var def, f, file, file_list, head, pkg, promise, script_attrs, type, url, _fn, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3,
        _this = this;
      f = 'Base:E/LoadStragegy.loadAsync';
      head = document.getElementsByTagName('head')[0];
      script_attrs = {
        type: 'text/javascript'
      };
      def = new m.Deferred();
      promise = def.promise;
      _ref = this.appconfs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        if (!(pkg in this.dir_map)) {
          continue;
        }
        _ref3 = (_ref1 = (_ref2 = E['app$' + pkg]) != null ? _ref2.MANIFEST : void 0) != null ? _ref1 : {};
        for (type in _ref3) {
          file_list = _ref3[type];
          _fn = function(file, type, pkg, url) {
            return promise = promise.then(function() {
              return (m.request({
                background: true,
                method: 'GET',
                url: url,
                data: {
                  _: _this.refresh_stamp
                },
                config: function(xhr, options) {
                  xhr.setRequestHeader("Content-Type", "text/plain; charset=utf-8");
                  return xhr;
                },
                deserialize: function(x) {
                  return x;
                }
              })).then(function(data) {
                _log2(f, 'Got a script', url, data.slice(0, 10));
                return (Function(data))();
              }).then(null, function(error) {
                _log2('AJAX ERROR LOADING SCRIPT', url, error);
                return false;
              });
            });
          };
          for (_j = 0, _len1 = file_list.length; _j < _len1; _j++) {
            file = file_list[_j];
            url = this.dir_map[pkg] + pkg + '/' + type + '/' + file + '.js';
            _fn(file, type, pkg, url);
          }
        }
      }
      def.resolve(null);
      return promise;
    };

    LoadStrategy.prototype.inline = function(type, nm) {
      var el, f, id;
      f = 'inline';
      el = document.getElementById(id = 'view-' + type + '-' + nm);
      _log2(f, 'inline el=', id, el);
      if (el) {
        return el.innerHTML;
      }
      return null;
    };

    LoadStrategy.prototype.preLoaded = function(pkg, type, nm) {
      var f, r, _ref, _ref1;
      f = 'preLoaded';
      _log2(f, 'looking for ', pkg, type, nm);
      r = (_ref = E['view$' + pkg]) != null ? (_ref1 = _ref[type]) != null ? _ref1[nm] : void 0 : void 0;
      _log2(f, 'found', ((r != null ? r.preloaded : void 0) ? 'PRELOADED' : 'broken'), r);
      return r;
    };

    LoadStrategy.prototype.compile = function(name, uncompiled) {
      var parsed;
      parsed = E.Extra.ParseFile(name, uncompiled);
      parsed.content = new Function(parsed.content);
      if (this.cache_local_flag) {
        this.cache[name] = parsed;
      }
      return parsed;
    };

    LoadStrategy.prototype.d_get = function(type, nm) {
      var def, f, full_nm, pkg, promise, uncompiled, _fn, _i, _len, _ref,
        _this = this;
      f = 'd_get';
      full_nm = type + '/' + nm + '.html';
      if (this.cache[full_nm] != null) {
        return this.cache[full_nm];
      }
      if (uncompiled = this.inline(type, nm)) {
        return this.compile(full_nm, uncompiled);
      }
      def = new m.Deferred();
      def.resolve(false);
      promise = def.promise;
      _ref = this.reverse_packages;
      _fn = function(pkg) {
        return promise = promise.then(function(result) {
          var compiled;
          _log2(f, 'THEN-' + pkg, full_nm, 'S' === E.type_oau(result) ? result.slice(0, 40) : result);
          if (result !== false) {
            return result;
          }
          if (compiled = _this.preLoaded(pkg, type, nm)) {
            return compiled;
          }
          if (!(pkg in _this.dir_map)) {
            return false;
          }
          return _this.D_getFile(pkg, full_nm);
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pkg = _ref[_i];
        _fn(pkg);
      }
      promise = promise.then(function(result) {
        var parsed;
        if (result !== false) {
          if (result != null ? result.preloaded : void 0) {
            return result;
          }
          parsed = _this.compile(full_nm, result);
        } else {
          _log2('ERROR', 'NO FILE FOUND! ' + type + ' - ' + nm);
          parsed = false;
        }
        return parsed;
      });
      promise.then(null, function(error) {
        throw error;
      });
      return promise;
    };

    LoadStrategy.prototype.D_getFile = function(pkg, nm) {
      var path;
      path = this.dir_map[pkg] + pkg + '/';
      return (m.request({
        background: true,
        method: 'GET',
        url: path + nm,
        data: {
          _: (new Date).valueOf()
        },
        config: function(xhr, options) {
          xhr.setRequestHeader("Content-Type", "text/plain; charset=utf-8");
          return xhr;
        },
        deserialize: function(x) {
          return x;
        }
      })).then(null, function(error) {
        return false;
      });
    };

    LoadStrategy.prototype.d_layout = function(nm) {
      return this.d_get('Layout', nm);
    };

    LoadStrategy.prototype.d_page = function(nm) {
      return this.d_get('Page', nm);
    };

    LoadStrategy.prototype.d_part = function(nm) {
      return this.d_get('Part', nm);
    };

    LoadStrategy.prototype.fist = function(grp_nm) {
      return BROKEN();
    };

    return LoadStrategy;

  })();

  E.Extra.LoadStrategy$BaseDevl = LoadStrategy;

}).call(this);

E.view$BaseDevl={
Layout: {
"BaseDevl":{preloaded:1,can_componentize:false,defer:0,content:function(){return oE.kids([{tag:'h5',attrs:{},children:['I\'m an \'outer\' template']},['page',{},function(){return []}]])}},
"bdevl":{preloaded:1,can_componentize:false,defer:0,content:function(){return oE.kids([{tag:'style',attrs:{},children:m.trust(' .dbg-part { border: solid 8px #888; }\n.dbg-tag-error-box { border: solid 2px #C44; font-weight: bold;}\n.dbg-tag-error-msg { color: red; }\n.dbg-tag-box { border: solid 2px #44C; }\n.dbg-part-box { font-size: .5em;\n -webkit-box-shadow: 10px 10px 5px #888;\n padding: 5px 5px 5px 15px;\n width: 10px;\n height: 10px;\n z-index: 99999;\n}\n.red { color: red; }\n.btn-group { background-color: #CCC; border-radius: 6px; }\n.dbg-toolbar .btn { padding: 6px 2px; }\n.dbg-toolbar:hover {\n top: -7px;\n}\n.dbg-toolbar {\n overflow-y: hidden;\n top: -46px;\n transition-property: top;\n transition-duration: .5s; ')},{tag:'div',attrs:{'className':'dbg-toolbar','style':{'position':'fixed','zIndex':'9999','backgroundColor':'#484848','fontSize':'10px','padding':'10px 10px 0 10px','right':'0'}},children:[{tag:'div',attrs:{'className':'btn-toolbar'},children:[{tag:'div',attrs:{'className':'btn-group'},children:[{tag:'a',attrs:{'data-e-action':'click:dbg_refresh','data-e-what':'file','className':'btn btn-mini'},children:[{tag:'span',attrs:{'className':'glyphicon glyphicon-repeat'},children:[]}]},{tag:'a',attrs:{'data-e-action':'click:dbg_toggle','data-e-what':'file','className':'btn btn-mini'},children:[{tag:'span',attrs:{'className':'glyphicon glyphicon-file '+oE.v3('Devl','Opts','file','.red')},children:[]}]},{tag:'a',attrs:{'data-e-action':'click:dbg_toggle','data-e-what':'tag','className':'btn btn-mini'},children:[{tag:'span',attrs:{'className':'glyphicon glyphicon-chevron-left '+oE.v3('Devl','Opts','tag','.red')},children:[]}]},{tag:'a',attrs:{'data-e-action':'click:dbg_toggle','data-e-what':'tag2','className':'btn btn-mini'},children:[{tag:'span',attrs:{'className':'glyphicon glyphicon-chevron-right '+oE.v3('Devl','Opts','tag2','.red')},children:[]}]},{tag:'a',attrs:{'data-e-action':'click:dbg_toggle','data-e-what':'form','className':'btn btn-mini'},children:[{tag:'span',attrs:{'className':'glyphicon glyphicon-edit '+oE.v3('Devl','Opts','form','.red')},children:[]}]},{tag:'a',attrs:{'data-e-action':'click:dbg_toggle','data-e-what':'model','className':'btn btn-mini'},children:[{tag:'span',attrs:{'className':'glyphicon glyphicon-list-alt '+oE.v3('Devl','Opts','model','.red')},children:[]}]}]}]},{tag:'div',attrs:{'style':{'textAlign':'center','color':'#FFF','letterSpacing':'5px','fontSize':'10px','height':'18px','paddingLeft':'4px','marginTop':'-3px'}},children:['EPIC']}]},['if',{'set':oE.v3('Devl','Opts','model')},function(){return [{tag:'table',attrs:{'width':'100%'},children:[{tag:'tr',attrs:{},children:[{tag:'td',attrs:{'width':'20%','style':{'backgroundColor':'#90C0FF','verticalAlign':'top','paddingTop':'75px','paddingBottom':'20px'}},children:oE.kids([['part',{'part':'dbg_model','dynamic':'div'},function(){return []}]])},{tag:'td',attrs:{'width':'100%','style':{'verticalAlign':'top','position':'relative'}},children:oE.kids([['page',{},function(){return []}]])}]}]}]}],['if',{'not_set':oE.v3('Devl','Opts','model')},function(){return oE.kids([['page',{},function(){return []}]])}]])}}}, Page: {
}, Part: {
"dbg_model":{preloaded:1,can_componentize:false,defer:0,content:function(){return [{tag:'style',attrs:{},children:m.trust(' ul.dbg-model.nav, ul.dbg-model.nav ul { margin-bottom: 0; border: 0; }\nul.dbg-model.nav li a, ul.dbg-model.nav ul li a { padding: 0; border: 0; }\nul.dbg-model.nav ul li a { padding-left: 15px; } ')},{tag:'ul',attrs:{'className':'dbg-model nav nav-tabs nav-stacked'},children:oE.kids([['foreach',{'table':'Devl/Model'},function(){return [{tag:'li',attrs:{},children:oE.kids([{tag:'a',attrs:{'data-e-action':'click:dbg_open_model','data-e-name':oE.v2('Model','name')},children:[' ['+oE.v2('Model','tables')+'] '+oE.v2('Model','name')+' ('+oE.v2('Model','inst')+') ']},['if',{'set':oE.v2('Model','is_open')},function(){return [{tag:'ul',attrs:{'className':'nav nav-tabs nav-stacked'},children:oE.kids([['foreach',{'table':'Model/Table'},function(){return [{tag:'li',attrs:{},children:oE.kids([{tag:'a',attrs:{'data-e-action':'click:dbg_open_table','data-e-name':oE.v2('Table','name')},children:[{tag:'span',attrs:{'title':oE.v2('Table','cols')},children:['['+oE.v2('Table','rows')+'] '+oE.v2('Table','name')]}]},['if',{'set':oE.v2('Table','is_open')},function(){return [{tag:'table',attrs:{'border':'1','style':{'fontSize':'8pt','lineHeight':'1'}},children:[{tag:'tbody',attrs:{},children:oE.kids([{tag:'tr',attrs:{},children:[{tag:'th',attrs:{},children:oE.kids([['if',{'set':oE.v2('Table','by_col')},function(){return [{tag:'a',attrs:{'data-e-action':'click:dbg_table_by_row'},children:[' Row ']}]}],['if',{'not_set':oE.v2('Table','by_col')},function(){return oE.kids([' Column ',['if',{'set':oE.v2('Table','is_sub')},function(){return [{tag:'a',attrs:{'data-e-action':'click:dbg_close_subtable','style':{'padding':'0'}},children:['^']}]}]])}]])},{tag:'th',attrs:{},children:['T']},{tag:'th',attrs:{},children:oE.kids([['if',{'val':oE.v2('Table','rows'),'eq':'1'},function(){return [' Value ']}],['if',{'val':oE.v2('Table','rows'),'ne':'1'},function(){return oE.kids([['if',{'set':oE.v2('Table','by_col')},function(){return ['   '+oE.v2('Table','curr_col')+'   ']}],['if',{'not_set':oE.v2('Table','by_col')},function(){return [{tag:'a',attrs:{'data-e-action':'click:dbg_table_left'},children:['<']},'   Value (row '+oE.v2('Table','row_cnt')+')   ',{tag:'a',attrs:{'data-e-action':'click:dbg_table_right'},children:['>']}]}]])}]])}]},['if',{'not_set':oE.v2('Table','by_col')},function(){return oE.kids([['foreach',{'table':'Table/Cols'},function(){return [{tag:'tr',attrs:{},children:oE.kids([{tag:'th',attrs:{},children:oE.kids([['if',{'val':oE.v2('Table','rows'),'eq':'1'},function(){return [' '+oE.v2('Cols','col')+' ']}],['if',{'val':oE.v2('Table','rows'),'ne':'1'},function(){return [{tag:'a',attrs:{'data-e-action':'click:dbg_table_col_set','data-e-col':oE.v2('Cols','col')},children:[oE.v2('Cols','col')]}]}]])},['if',{'set':oE.v2('Cols','val')},function(){return [{tag:'td',attrs:{'style':{'color':'green'}},children:[oE.v2('Cols','type','1')]}]}],['if',{'not_set':oE.v2('Cols','val')},function(){return [{tag:'td',attrs:{'style':{'color':'red'}},children:[oE.v2('Cols','type','1')]}]}],{tag:'td',attrs:{'title':oE.v2('Cols','type')},children:oE.kids([['if',{'val':oE.v2('Cols','type'),'eq':'object'},function(){return oE.kids([['if',{'not_set':oE.v2('Cols','len')},function(){return [' Table [ empty ]']}],['if',{'set':oE.v2('Cols','len')},function(){return oE.kids([{tag:'a',attrs:{'data-e-action':'click:dbg_open_subtable','data-e-name':oE.v2('Cols','col'),'style':{'padding':'0'}},children:['Table']},' ['+oE.v2('Cols','len')+' row',['if',{'val':oE.v2('Cols','len'),'ne':'1'},function(){return ['s']}],'] '])}]])}],['if',{'val':oE.v2('Cols','type'),'ne':'object'},function(){return [' '+oE.v2('Cols','val')+' ']}]])}])}]}]])}],['if',{'set':oE.v2('Table','by_col')},function(){return oE.kids([['foreach',{'table':'Table/Rows'},function(){return [{tag:'tr',attrs:{},children:oE.kids([{tag:'th',attrs:{},children:[oE.v2('Rows','row')]},['if',{'set':oE.v2('Rows','val')},function(){return [{tag:'td',attrs:{'style':{'color':'green'}},children:[oE.v2('Rows','type','1')]}]}],['if',{'not_set':oE.v2('Rows','val')},function(){return [{tag:'td',attrs:{'style':{'color':'red'}},children:[oE.v2('Rows','type','1')]}]}],{tag:'td',attrs:{'title':oE.v2('Rows','type')},children:oE.kids([['if',{'val':oE.v2('Rows','type'),'eq':'object'},function(){return oE.kids(['Table [ ',['if',{'set':oE.v2('Rows','len')},function(){return oE.kids([oE.v2('Rows','len')+' row',['if',{'val':oE.v2('Rows','len'),'ne':'1'},function(){return ['s']}]])}],['if',{'not_set':oE.v2('Rows','len')},function(){return ['empty']}],' ]'])}],['if',{'val':oE.v2('Rows','type'),'ne':'object'},function(){return [' '+oE.v2('Rows','val')+' ']}]])}])}]}]])}]])}]}]}]])}]}]])}]}]])}]}]])}]}}}};

