// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var Pageflow,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Pageflow = (function(_super) {

    __extends(Pageflow, _super);

    function Pageflow(epic, view_nm) {
      var ss;
      ss = {
        f: null,
        t: null,
        s: null,
        sp: []
      };
      Pageflow.__super__.constructor.call(this, epic, view_nm, ss);
      this.eventNewRequest();
    }

    Pageflow.prototype.eventNewRequest = function() {
      this.issues = new window.EpicMvc.Issue(this.Epic, this.view_nm);
      this.messages = new window.EpicMvc.Issue(this.Epic, this.view_nm);
      return this.Table = {};
    };

    Pageflow.prototype.goTo = function(f, t, s) {
      var oC;
      oC = this.Epic.appConf();
      if (!(f != null) || !(oC.getF(f) != null)) {
        f = oC.loginF();
        t = oC.startT(f);
        s = oC.startS(f, t);
      } else if (!(t != null) || !(oC.getT(f, t) != null)) {
        t = oC.startT(f);
        s = oC.startS(f, t);
      } else if (!(s != null) || !(oC.getS(f, t, s) != null)) {
        s = oC.startS(f, t);
      }
      this.f = f;
      this.t = t;
      return this.s = s;
    };

    Pageflow.prototype.getF = function() {
      return this.f;
    };

    Pageflow.prototype.getTrackPath = function() {
      return [this.f, this.t];
    };

    Pageflow.prototype.getStepPath = function() {
      return [this.f, this.t, this.s];
    };

    Pageflow.prototype.action = function(a, p) {
      var i, ix, m, q, r, v, _i, _len, _ref, _ref1;
      r = {};
      i = new window.EpicMvc.Issue(this.Epic, this.view_nm, a);
      m = new window.EpicMvc.Issue(this.Epic, this.view_nm, a);
      switch (a) {
        case 'flow':
          this.goTo(p.flow);
          break;
        case 'track':
          this.goTo(this.f, p.track);
          break;
        case 'step':
          this.goTo(this.f, this.t, p.step);
          break;
        case 'refresh':
          null;
          break;
        case 'save_path':
          this.sp.push([this.f, this.t, this.s]);
          break;
        case 'path':
          q = p.path.split('/');
          _ref = [this.f, this.t, this.s];
          for (ix = _i = 0, _len = _ref.length; _i < _len; ix = ++_i) {
            v = _ref[ix];
            if (!((_ref1 = q[ix]) != null ? _ref1.length : void 0)) {
              q[ix] = v;
            } else {
              break;
            }
          }
          this.goTo(q[0], q[1], q[2]);
          break;
        case 'restore_path':
          if (this.sp.length) {
            q = this.sp.pop();
            this.goTo(q[0], q[1], q[2]);
          }
          break;
        case 'add_message':
          m.add(p.type, p.msgs);
          break;
        case 'add_issue':
          i.add(p.type, p.msgs);
          break;
        default:
          Pageflow.__super__.action.call(this, a, p);
      }
      return [r, i, m];
    };

    Pageflow.prototype.setIssues = function(issue_obj) {
      if ((issue_obj != null ? issue_obj.count() : void 0) !== 0) {
        this.issues.addObj(issue_obj);
      }
      return this.invalidateTables(['Issue']);
    };

    Pageflow.prototype.setMessages = function(issue_obj) {
      if ((issue_obj != null ? issue_obj.count() : void 0) !== 0) {
        return this.messages.addObj(issue_obj);
      }
    };

    Pageflow.prototype.loadTable = function(tbl_nm) {
      var map;
      map = window.EpicMvc['issues$' + this.Epic.appConf().getGroupNm()];
      this.Table[tbl_nm] = (function() {
        switch (tbl_nm) {
          case 'Message':
            return this.messages.asTable(map);
          case 'Issue':
            return this.issues.asTable(map);
          case 'V':
            return [this.Epic.appConf().getVars(this.f, this.t, this.s)];
          default:
            return Pageflow.__super__.loadTable.call(this, tbl_nm);
        }
      }).call(this);
    };

    return Pageflow;

  })(window.EpicMvc.ModelJS);

  window.EpicMvc.Model.Pageflow$Base = Pageflow;

}).call(this);
