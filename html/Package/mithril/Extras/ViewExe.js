// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var ViewExe,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.m2 = function(tag, attrs, content) {
    var clean_attrs, f, nm, val;
    f = 'mithril::m2';
    clean_attrs = {};
    for (nm in attrs) {
      val = attrs[nm];
      if (nm[0] !== '-') {
        clean_attrs[nm] = val;
      } else {
        if (val) {
          clean_attrs[nm.slice(1)] = val;
        }
      }
    }
    _log2(f, clean_attrs);
    return m(tag, clean_attrs, content);
  };

  ViewExe = (function() {

    function ViewExe(Epic, view_nm) {
      var frames, ix, nm;
      this.Epic = Epic;
      this.view_nm = view_nm;
      this.T_page = __bind(this.T_page, this);

      this.handleIt = __bind(this.handleIt, this);

      frames = this.Epic.oAppConf.getFrames();
      this.frames = (function() {
        var _i, _len, _ref, _results;
        _ref = ((function() {
          var _results1;
          _results1 = [];
          for (nm in frames) {
            _results1.push(nm);
          }
          return _results1;
        })()).sort();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ix = _ref[_i];
          _results.push(frames[ix]);
        }
        return _results;
      })();
      this.frames.push(function() {
        return 'NOT-SET';
      });
      this.invalidateTablesTimer = false;
      this.did_init = false;
    }

    ViewExe.prototype.init = function(template, page_name) {
      this.template = template;
      this.page_name = page_name;
      this.did_init = true;
      this.frames[this.frames.length - 1] = template;
      this.frame_inx = 0;
      this.info_foreach = {};
      this.info_parts = [{}];
      this.info_if_nms = {};
      return this.info_defer = [[]];
    };

    ViewExe.prototype.run = function() {
      var result, start;
      _log2('START RUN', start = new Date().getTime());
      result = this.T_page();
      _log2('END RUN', new Date().getTime() - start);
      return result;
    };

    ViewExe.prototype.next_frame = function() {
      return this.frames[this.frame_inx++];
    };

    ViewExe.prototype.getTable = function(nm) {
      var f, field, row, _i, _len, _ref;
      f = 'mithril:viewexe.getTable:' + nm;
      switch (nm) {
        case 'Control':
        case 'Form':
          return this.fist_table[nm];
        case 'If':
          return [this.info_if_nms];
        case 'Part':
          return this.info_parts.slice(-1);
        case 'Field':
          row = {};
          _ref = this.fist_table.Control;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            row[field.name] = [field];
          }
          this.Epic.log2(f, row);
          return [row];
        default:
          return [];
      }
    };

    ViewExe.prototype.invalidateTables = function(view_nm, tbl_nms) {
      var f;
      if (!this.did_init) {
        return;
      }
      f = ':mithril:ViewExe.invalidateTables';
      _log2(f, view_nm, tbl_nms);
      m.startComputation();
      m.endComputation();
    };

    ViewExe.prototype.wrap = function(view, attrs, content, defer, has_root) {
      var inside;
      inside = {
        defer: defer
      };
      attrs.config = function(el, isInit, context) {
        var f, _i, _len, _ref, _results;
        f = ':methril:ViewExe:wrap.config:' + view;
        _ref = inside.defer;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          defer = _ref[_i];
          _log2(f, defer);
          _results.push(defer.func(el, defer.attrs));
        }
        return _results;
      };
      attr['data-part'] = view;
      if ('dynamic' in attrs) {
        return m(attrs.dynamic, attrs, content);
      } else {
        if (!content) {
          return m();
        }
        if (has_root) {
          return content;
        } else {
          return m('div', attrs, content);
        }
      }
    };

    ViewExe.prototype.handleIt = function(content) {
      var entry, f, result;
      f = ':mithril:ViewExe.handleIt';
      if (typeof content === 'function') {
        content = content();
      }
      if (!content) {
        return '';
      }
      if (!$.isArray(content)) {
        return content;
      }
      result = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = content.length; _i < _len; _i++) {
          entry = content[_i];
          if (entry) {
            _results.push(entry);
          }
        }
        return _results;
      })();
      switch (result.length) {
        case 0:
          return '';
        case 1:
          return result[0];
        default:
          return result;
      }
    };

    ViewExe.prototype.formatFromSpec = function(val, spec, custom_spec) {
      var left, right, str, _base, _ref;
      switch (spec) {
        case '':
          if (custom_spec) {
            return typeof (_base = window.EpicMvc).custom_filter === "function" ? _base.custom_filter(val, custom_spec) : void 0;
          } else {
            return val;
          }
        case 'count':
          return val != null ? val.length : void 0;
        case 'bool':
          if (val) {
            return true;
          } else {
            return false;
          }
        case 'bytes':
          return window.bytesToSize(Number(val));
        case 'uriencode':
          return encodeURIComponent(val);
        case 'esc':
          return window.EpicMvc.escape_html(val);
        case 'quo':
          return ((val.replace(/\\/g, '\\\\')).replace(/'/g, '\\\'')).replace(/"/g, '\\"');
        case '1':
          return (String(val))[0];
        case 'lc':
          return (String(val)).toLowerCase();
        case 'ucFirst':
          str = (String(str)).toLowerCase();
          return str.slice(0, 1).toUpperCase() + str.slice(1);
        default:
          if ((spec != null ? spec.length : void 0) > 3 && spec[0] === '?') {
            _ref = spec.slice(1).split('?'), left = _ref[0], right = _ref[1];
            return (val ? left : right).replace(new RegExp('[%]', 'g'), val);
          } else if (spec != null ? spec.length : void 0) {
            if (val) {
              return spec.replace(new RegExp('[%]', 'g'), val);
            } else {
              return '';
            }
          } else {
            return val;
          }
      }
    };

    ViewExe.prototype.v3 = function(view_nm, tbl_nm, key, format_spec, custom_spec) {
      var row;
      row = (this.Epic.getViewTable(view_nm + '/' + tbl_nm))[0];
      return this.formatFromSpec(row[key], format_spec, custom_spec);
    };

    ViewExe.prototype.v2 = function(table_ref, col_nm, format_spec, custom_spec, sub_nm) {
      var ans;
      ans = this.info_foreach[table_ref].row[col_nm];
      if (sub_nm != null) {
        ans = ans[sub_nm];
      }
      return this.formatFromSpec(ans, format_spec, custom_spec);
    };

    ViewExe.prototype.loadPartAttrs = function(attrs) {
      var attr, f, result, val;
      f = ':tag.loadPartAttrs';
      result = {};
      for (attr in attrs) {
        val = attrs[attr];
        if ('p_' !== attr.slice(0, 2)) {
          continue;
        }
        result[attr.slice(2)] = val;
      }
      return result;
    };

    ViewExe.prototype.T_page = function(attrs) {
      var can_componentize, content, defer, f, name, result, view, _ref, _ref1;
      f = ':mithril:ViewExe.T_page';
      name = this.page_name;
      if (this.frame_inx < this.frames.length) {
        _ref = this.Epic.loader.template(name = this.next_frame()), content = _ref.content, can_componentize = _ref.can_componentize;
        view = 'tmpl/' + name;
      } else {
        _ref1 = this.Epic.loader.page(this.page_name), content = _ref1.content, can_componentize = _ref1.can_componentize;
        view = 'page/' + name;
      }
      if (attrs == null) {
        attrs = {};
      }
      _log2(f, 'before wrap', view, attrs);
      this.info_defer.push([]);
      content = this.handleIt(content);
      defer = this.info_defer.pop();
      result = this.wrap(view, attrs, content, defer, can_componentize);
      _log2(f, 'after wrap', view, attrs, result);
      if (result === void 0) {
        console.log('BIG ISSUE IN TMPL/PAGE: ' + name, 'func is', content_func);
        throw new Error('Big Issue in Tmpl/Page ' + name);
      }
      return result;
    };

    ViewExe.prototype.T_part = function(attrs) {
      var can_componentize, content, defer, f, result, view, _ref;
      f = 'mithril:viewexe.T_part:';
      view = attrs.part;
      _ref = this.Epic.loader.part(view), content = _ref.content, can_componentize = _ref.can_componentize, defer = _ref.defer;
      this.info_parts.push(this.loadPartAttrs(attrs));
      if (can_componentize || attrs.dynamic || defer) {
        if (defer && !can_componentize && !attrs.dynamic) {
          console.log("WARNING: DEFER logic has forced this part (" + view + ") to be a component, and will add a DIV tag.");
        }
        this.info_defer.push([]);
        result = this.handleIt(content);
        defer = this.info_defer.pop();
        result = this.wrap(view, attrs, result, defer, can_componentize);
      } else {
        result = this.handleIt(content);
      }
      this.info_parts.pop();
      if (result === void 0) {
        console.log('BIG ISSUE IN PART: ' + name, 'func is', content);
        throw new Error('Big Issue in PART ' + name);
      }
      return result;
    };

    ViewExe.prototype.T_defer = function(attrs, content) {
      var f, f_content;
      f = 'mithril:viewexe.T_defer:';
      f_content = this.handleIt(content);
      this.info_defer[this.info_defer.length - 1].push({
        attrs: attrs,
        func: new Function('el', 'attrs', f_content)
      });
      return '';
    };

    ViewExe.prototype.T_if_true = function(attrs, content) {
      if (this.info_if_nms[attrs.name]) {
        return this.handleIt(content());
      } else {
        return '';
      }
    };

    ViewExe.prototype.T_if_false = function(attrs, content) {
      if (this.info_if_nms[attrs.name]) {
        return '';
      } else {
        return this.handleIt(content);
      }
    };

    ViewExe.prototype.T_if = function(attrs, content) {
      var is_true, issue, lh, rh, tbl, val, _ref, _ref1;
      issue = false;
      is_true = false;
      if ('val' in attrs) {
        if ('eq' in attrs) {
          if (attrs.val === attrs.eq) {
            is_true = true;
          }
        } else if ('ne' in attrs) {
          if (attrs.val !== attrs.ne) {
            is_true = true;
          }
        } else if ('in_list' in attrs) {
          if (_ref = attrs.val, __indexOf.call(attrs.in_list.split(','), _ref) >= 0) {
            is_true = true;
          }
        } else {
          issue = true;
        }
      } else if ('set' in attrs) {
        is_true = attrs.set ? true : false;
      } else if ('not_set' in attrs) {
        is_true = attrs.not_set ? false : true;
      } else if ('table_is_not_empty' in attrs) {
        val = attrs.table_is_not_empty;
        _ref1 = val.split('/'), lh = _ref1[0], rh = _ref1[1];
        tbl = this._accessModelTable(val, false)[0];
        if (tbl.length) {
          is_true = true;
        }
      } else {
        issue = true;
      }
      if (issue) {
        console.log('ISSUE T_if', attrs);
      }
      if ('name' in attrs) {
        this.info_if_nms[attrs.name] = is_true;
      }
      if (is_true && content) {
        return this.handleIt(content);
      } else {
        return '';
      }
    };

    ViewExe.prototype._accessModelTable = function(at_table, alias) {
      var dyn_list, dyn_m, dyn_t, lh, oM, rh, rh_alias, tbl, _ref, _ref1, _ref2;
      _ref = at_table.split('/'), lh = _ref[0], rh = _ref[1];
      if (lh in this.info_foreach) {
        tbl = this.info_foreach[lh].row[rh];
        _ref1 = this.info_foreach[lh].dyn, dyn_m = _ref1[0], dyn_t = _ref1[1], dyn_list = _ref1[2];
      } else {
        oM = this.Epic.getInstance(lh);
        tbl = oM.getTable(rh);
        _ref2 = [lh, rh, []], dyn_m = _ref2[0], dyn_t = _ref2[1], dyn_list = _ref2[2];
      }
      if (tbl.length === 0) {
        return [tbl, rh, lh, rh, oM];
      }
      rh_alias = rh;
      if (alias) {
        rh_alias = alias;
      }
      dyn_list.push([rh, rh_alias]);
      this.info_foreach[rh_alias] = {
        dyn: [dyn_m, dyn_t, dyn_list]
      };
      return [tbl, rh_alias, lh, rh, oM];
    };

    ViewExe.prototype.T_foreach = function(attrs, content_f) {
      var count, f, limit, result, rh_alias, row, tbl, _i, _len, _ref;
      f = 'mithril:viewexe.T_foreach';
      _ref = this._accessModelTable(attrs.table, attrs.alias), tbl = _ref[0], rh_alias = _ref[1];
      if (tbl.length === 0) {
        return '';
      }
      result = [];
      limit = 'limit' in attrs(Number(attrs.limit) - 1) ? void 0 : tbl.length;
      for (count = _i = 0, _len = tbl.length; _i < _len; count = ++_i) {
        row = tbl[count];
        if (count > limit) {
          break;
        }
        this.info_foreach[rh_alias].row = row;
        this.info_foreach[rh_alias].count = count;
        result.push(this.handleIt(content_f));
      }
      delete this.info_foreach[rh_alias];
      switch (result.length) {
        case 0:
          return '';
        case 1:
          return result[0];
        default:
          return result;
      }
    };

    ViewExe.prototype.T_fist = function(attrs) {
      var any_req, choices, fl, fl_nm, fm_nm, focus_nm, help, hpfl, is_first, issues, ix, map, nm, oFi, one_field_nm, orig, out, part, row, rows, s, show_req, value_fl_nm, _i, _j, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      part = (_ref = attrs.part) != null ? _ref : 'fist_default';
      row = (_ref1 = attrs.row) != null ? _ref1 : false;
      fm_nm = attrs.form;
      oFi = this.Epic.getFistInstance(fm_nm);
      one_field_nm = attrs.field != null ? attrs.field : false;
      help = (_ref2 = attrs.help) != null ? _ref2 : '';
      show_req = 'show_req' in attrs ? attrs.show_req : 'yes';
      any_req = false;
      is_first = true;
      out = [];
      hpfl = (function() {
        var _results;
        _results = [];
        for (nm in oFi.getHtmlFieldValues()) {
          _results.push(nm);
        }
        return _results;
      })();
      issues = oFi.getFieldIssues();
      focus_nm = oFi.getFocus();
      map = window.EpicMvc['issues$' + this.Epic.appConf().getGroupNm()];
      for (_i = 0, _len = hpfl.length; _i < _len; _i++) {
        fl_nm = hpfl[_i];
        if (one_field_nm !== false && one_field_nm !== fl_nm) {
          continue;
        }
        orig = oFi.getFieldAttributes(fl_nm);
        fl = $.extend({
          tip: '',
          fistnm: fm_nm,
          focus: ''
        }, orig);
        if (fl_nm === focus_nm) {
          fl.focus = 'yes';
        }
        fl.is_first = is_first === true ? 'yes' : '';
        is_first = false;
        fl.yes_val = fl.type === 'yesno' ? String((_ref3 = fl.cdata) != null ? _ref3 : '1') : 'not_used';
        fl.req = fl.req === true ? 'yes' : '';
        if (fl.req === true) {
          any_req = true;
        }
        fl.name = fl_nm;
        if ((_ref4 = fl["default"]) == null) {
          fl["default"] = '';
        }
        fl["default"] = String(fl["default"]);
        value_fl_nm = row ? fl_nm + '__' + row : fl_nm;
        fl.value = (_ref5 = oFi.getHtmlFieldValue(value_fl_nm)) != null ? _ref5 : fl["default"];
        fl.selected = fl.type === 'yesno' && fl.value === fl.yes_val ? 'yes' : '';
        fl.id = 'U' + this.Epic.nextCounter();
        fl.type = (fl.type.split(':'))[0];
        if ((_ref6 = fl.width) == null) {
          fl.width = '';
        }
        if ((_ref7 = fl.size) == null) {
          fl.size = '';
        }
        if (fl.type === 'radio' || fl.type === 'pulldown') {
          choices = oFi.getChoices(fl_nm);
          rows = [];
          for (ix = _j = 0, _ref8 = choices.options.length; 0 <= _ref8 ? _j < _ref8 : _j > _ref8; ix = 0 <= _ref8 ? ++_j : --_j) {
            s = choices.values[ix] === (String(fl.value)) ? 'yes' : '';
            rows.push({
              option: choices.options[ix],
              value: choices.values[ix],
              selected: s
            });
          }
          fl.Choice = rows;
        }
        fl.issue = issues[value_fl_nm] ? issues[value_fl_nm].asTable(map)[0].issue : '';
        out.push(fl);
      }
      this.fist_table = {
        Form: [
          {
            show_req: show_req,
            any_req: any_req,
            help: help
          }
        ],
        Control: out
      };
      return this.T_part({
        part: part
      });
    };

    ViewExe.prototype.T_mithril = function(attrs) {
      var _base, _ref;
      if ((_ref = (_base = EpicMvc.Extras).components) == null) {
        _base.components = {};
      }
      return EpicMvc.Extras.components[attrs.func](attrs);
    };

    ViewExe.prototype.T_show_me = function(attrs, content) {
      var ans, f;
      f = ':tag(viewexe).T_showme';
      _log2('======== attrs   ======', f, attrs);
      _log2('======== content ======', f, content);
      ans = this.handleIt(content);
      _log2('======== handleIt =====', f, ans);
      return ans;
    };

    return ViewExe;

  })();

  window.EpicMvc.Extras.ViewExe$Base = ViewExe;

}).call(this);
