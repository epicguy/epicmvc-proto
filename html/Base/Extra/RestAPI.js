// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var RestAPI;

  RestAPI = (function() {

    function RestAPI(opts) {
      var nm, port, prefix, val, version;
      this.opts = {
        port: '',
        prefix: '',
        version: ''
      };
      for (nm in opts) {
        val = opts[nm];
        this.opts[nm] = val;
      }
      port = String(this.opts.port);
      if (port.length) {
        port = ':' + port;
      }
      if (this.opts.prefix.length) {
        prefix = '/' + this.opts.prefix;
      }
      if (this.opts.version.length) {
        version = '/' + this.opts.version;
      }
      this.route_prefix = "//" + this.opts.host + (port != null ? port : '') + (prefix != null ? prefix : '') + (version != null ? version : '') + "/";
      this.SetToken(false);
    }

    RestAPI.prototype.GetPrefix = function() {
      return this.route_prefix;
    };

    RestAPI.prototype.GetToken = function() {
      return this.token;
    };

    RestAPI.prototype.SetToken = function(token) {
      this.token = token;
    };

    RestAPI.prototype.D_Request = function(method, route, data, header_obj) {
      var status;
      status = {
        code: false,
        text: false,
        ok: false
      };
      return (m.request({
        background: true,
        method: method,
        url: this.route_prefix + route,
        data: data,
        config: function(xhr) {
          var nm, val, _ref;
          _ref = header_obj != null ? header_obj : {};
          for (nm in _ref) {
            val = _ref[nm];
            xhr.setRequestHeader(nm, val);
          }
        },
        unwrapSuccess: function(response) {
          return {
            status: status,
            data: response
          };
        },
        unwrapError: function(response) {
          return {
            status: status,
            data: response
          };
        },
        extract: function(xhr, options) {
          status.code = xhr.status;
          status.text = xhr.statusText;
          if (xhr.status === 200) {
            status.ok = true;
          }
          if (!xhr.responseText.length && xhr.readyState === 4) {
            status.text = 'NetworkError';
            return '{"error":"NETWORK_ERROR"}';
          }
          return xhr.responseText;
        }
      })).then(null, function(e_with_status_n_data) {
        return e_with_status_n_data;
      });
    };

    RestAPI.prototype.D_Get = function(route, data) {
      return this.D_RequestAuth('GET', route, data);
    };

    RestAPI.prototype.D_Post = function(route, data) {
      return this.D_RequestAuth('POST', route, data);
    };

    RestAPI.prototype.D_Del = function(route, data) {
      return this.D_RequestAuth('DEL', route, data);
    };

    RestAPI.prototype.D_Put = function(route, data) {
      return this.D_RequestAuth('PUT', route, data);
    };

    RestAPI.prototype.D_RequestAuth = function(method, route, data, header_obj) {
      var d, token,
        _this = this;
      token = this.GetToken();
      if (token === false) {
        setTimeout(function() {
          return E.action('Request.no_token');
        }, 0);
        d = new m.Deferred();
        d.resolve({
          status: {
            code: 401,
            text: 'NO_TOKEN',
            ok: false
          },
          data: {
            error: 'TOKEN'
          }
        });
        return d.promise;
      }
      if (header_obj == null) {
        header_obj = {};
      }
      header_obj.Authorization = "" + token.token_type + " " + token.access_token;
      return (this.D_Request(method, route, data, header_obj)).then(function(status_n_data) {
        if (status.code === 401) {
          setTimeout(function() {
            return E.action('Request.bad_token');
          }, 0);
          return {
            status: {
              code: 401,
              text: 'BAD_TOKEN',
              ok: false
            },
            data: {
              error: 'TOKEN'
            }
          };
        }
        return status_n_data;
      });
    };

    return RestAPI;

  })();

  E.Extra.RestAPI$Base = RestAPI;

}).call(this);
