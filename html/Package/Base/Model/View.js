// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var View$Base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.m1 = function(tag, attrs, content) {
    var deferreds, ix, offsets, stuff, _i, _len;
    if (tag === 'table') {
      _log2('m1', tag, attrs, content);
    }
    if ('A' !== E.type_oau(content)) {
      if (content != null ? content.then : void 0) {
        BLOWUP();
      }
      return m(tag, attrs, content);
    }
    offsets = [];
    deferreds = [];
    for (ix = _i = 0, _len = content.length; _i < _len; ix = ++_i) {
      stuff = content[ix];
      if (stuff.then) {
        deferreds.push(stuff);
        offsets.push(ix);
      }
    }
    if (offsets.length === 0) {
      return m(tag, attrs, content);
    }
    return (m.sync(deferreds)).then(function(answers) {
      var ans;
      for (ans in answers) {
        ix = answers[ans];
        content[offsets[ix]] = ans;
      }
      return m(tag, attrs, content);
    });
  };

  window.m2 = function(tag, attrs, content) {
    var clean_attrs, f, nm, val;
    f = 'Base:M/View.m2';
    clean_attrs = {};
    for (nm in attrs) {
      val = attrs[nm];
      if (nm[0] !== '-') {
        clean_attrs[nm] = val;
      } else {
        if (val) {
          clean_attrs[nm.slice(1)] = val;
        }
      }
    }
    _log2(f, clean_attrs);
    return m1(tag, clean_attrs, content);
  };

  View$Base = (function(_super) {

    __extends(View$Base, _super);

    function View$Base(view_nm, options) {
      this.T_if = __bind(this.T_if, this);

      this.T_page = __bind(this.T_page, this);

      this.handleIt = __bind(this.handleIt, this);

      this.doDefer = __bind(this.doDefer, this);

      var frames, ix, nm;
      View$Base.__super__.constructor.call(this, view_nm, options);
      frames = E.appGetSetting('frames');
      this.frames = (function() {
        var _i, _len, _ref, _results;
        _ref = ((function() {
          var _results1;
          _results1 = [];
          for (nm in frames) {
            _results1.push(nm);
          }
          return _results1;
        })()).sort();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ix = _ref[_i];
          _results.push(frames[ix]);
        }
        return _results;
      })();
      this.frames.push('NOT-SET');
      this.invalidateTablesTimer = false;
      this.did_run = false;
      this.in_run = false;
      window.oE = this;
    }

    View$Base.prototype.run = function() {
      var flow, layout, step, track, _ref, _ref1,
        _this = this;
      if (this.in_run) {
        BLOWUP();
      }
      this.in_run = true;
      _ref = E.App().getStepPath(), flow = _ref[0], track = _ref[1], step = _ref[2];
      layout = E.appGetSetting('layout', flow, track, step);
      this.page_name = (_ref1 = (E.appGetS(flow, track, step)).page) != null ? _ref1 : step;
      this.did_run = true;
      this.frames[this.frames.length - 1] = layout;
      this.frame_inx = 0;
      this.info_foreach = {};
      this.info_parts = [{}];
      this.info_if_nms = {};
      this.info_defer = [[]];
      return this.T_page().then(function(result) {
        _this.in_run = false;
        return result;
      });
    };

    View$Base.prototype.next_frame = function() {
      return this.frames[this.frame_inx++];
    };

    View$Base.prototype.getTable = function(nm) {
      var f, field, row, _i, _len, _ref;
      f = 'Base:M/View.getTable:' + nm;
      switch (nm) {
        case 'Control':
        case 'Form':
          return this.fist_table[nm];
        case 'If':
          return [this.info_if_nms];
        case 'Part':
          return this.info_parts.slice(-1);
        case 'Field':
          row = {};
          _ref = this.fist_table.Control;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            row[field.name] = [field];
          }
          _log2(f, row);
          return [row];
        default:
          return [];
      }
    };

    View$Base.prototype.invalidateTables = function(view_nm, tbl_nms) {
      var f;
      if (!this.did_run) {
        return;
      }
      f = 'Base:M/View.invalidateTables';
      _log2(f, view_nm, tbl_nms);
      m.startComputation();
      m.endComputation();
    };

    View$Base.prototype.wrap = function(view, attrs, content, defer, has_root) {
      var inside,
        _this = this;
      inside = {
        defer: defer
      };
      attrs.config = function(el, isInit, context) {
        var f, _i, _len, _ref, _results;
        f = 'Base:M/View..config:' + view;
        _ref = inside.defer;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          defer = _ref[_i];
          _log2(f, defer);
          _results.push(_this.doDefer(defer, el));
        }
        return _results;
      };
      attrs['data-part'] = view;
      if ('dynamic' in attrs) {
        return m1(attrs.dynamic, attrs, content);
      } else {
        if (!content) {
          return m();
        }
        if (has_root) {
          return content;
        } else {
          return m1('div', attrs, content);
        }
      }
    };

    View$Base.prototype.doDefer = function(defer_obj, el) {
      var _this = this;
      if (defer_obj.func) {
        return defer_obj.func(el, defer_obj.attrs);
      }
      return defer_obj.defer.then(function(f_content) {
        defer_obj.func = new Function('el', 'attrs', f_content);
        _this.doDefer(defer_obj, el);
      });
    };

    View$Base.prototype.syncAny = function(content) {
      var deferreds, ix, offsets, stuff, _i, _len;
      if ('A' !== E.type_oau(content)) {
        return content;
      }
      offsets = [];
      deferreds = [];
      for (ix = _i = 0, _len = content.length; _i < _len; ix = ++_i) {
        stuff = content[ix];
        if (stuff.then) {
          deferreds.push(stuff);
          offsets.push(ix);
        }
      }
      if (offsets.length === 0) {
        return content;
      }
      return (m.sync(deferreds)).then(function(answers) {
        var ans;
        for (ans in answers) {
          ix = answers[ans];
          content[offsets[ix]] = ans;
        }
        return content;
      });
    };

    View$Base.prototype.handleIt = function(content) {
      var deferred, f;
      f = 'handleIt';
      deferred = new m.Deferred();
      deferred.resolve(this._d_handleIt(content));
      return deferred.promise;
    };

    View$Base.prototype._d_handleIt = function(old_content) {
      var ans, content, entry, f, result;
      f = 'Base:M/View._d_handleIt';
      if (typeof old_content === 'function') {
        if (old_content.then) {
          return old_content;
        }
        content = old_content();
      } else if ((E.type_oau(old_content)) === 'A') {
        content = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = old_content.length; _i < _len; _i++) {
            ans = old_content[_i];
            _results.push(this.handleIt(ans));
          }
          return _results;
        }).call(this);
        return m.sync(content);
      } else {
        content = old_content;
      }
      if (!content) {
        return '';
      }
      if ((E.type_oau(content)) !== 'A') {
        return content;
      }
      result = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = content.length; _i < _len; _i++) {
          entry = content[_i];
          if (entry) {
            _results.push(entry);
          }
        }
        return _results;
      })();
      switch (result.length) {
        case 0:
          return '';
        case 1:
          return result[0];
        default:
          return result;
      }
      return content;
    };

    View$Base.prototype.formatFromSpec = function(val, spec, custom_spec) {
      var left, right, str, _base, _ref;
      switch (spec) {
        case '':
          if (custom_spec) {
            return typeof (_base = window.EpicMvc).custom_filter === "function" ? _base.custom_filter(val, custom_spec) : void 0;
          } else {
            return val;
          }
        case 'count':
          return val != null ? val.length : void 0;
        case 'bool':
          if (val) {
            return true;
          } else {
            return false;
          }
        case 'bytes':
          return window.bytesToSize(Number(val));
        case 'uriencode':
          return encodeURIComponent(val);
        case 'esc':
          return window.EpicMvc.escape_html(val);
        case 'quo':
          return ((val.replace(/\\/g, '\\\\')).replace(/'/g, '\\\'')).replace(/"/g, '\\"');
        case '1':
          return (String(val))[0];
        case 'lc':
          return (String(val)).toLowerCase();
        case 'ucFirst':
          str = (String(str)).toLowerCase();
          return str.slice(0, 1).toUpperCase() + str.slice(1);
        default:
          if ((spec != null ? spec.length : void 0) > 3 && spec[0] === '?') {
            _ref = spec.slice(1).split('?'), left = _ref[0], right = _ref[1];
            return (val ? left : right).replace(new RegExp('[%]', 'g'), val);
          } else if (spec != null ? spec.length : void 0) {
            if (val) {
              return spec.replace(new RegExp('[%]', 'g'), val);
            } else {
              return '';
            }
          } else {
            return val;
          }
      }
    };

    View$Base.prototype.v3 = function(view_nm, tbl_nm, key, format_spec, custom_spec) {
      var row;
      row = (E[view_nm](tbl_nm))[0];
      return this.formatFromSpec(row[key], format_spec, custom_spec);
    };

    View$Base.prototype.v2 = function(table_ref, col_nm, format_spec, custom_spec, sub_nm) {
      var ans;
      ans = this.info_foreach[table_ref].row[col_nm];
      if (sub_nm != null) {
        ans = ans[sub_nm];
      }
      return this.formatFromSpec(ans, format_spec, custom_spec);
    };

    View$Base.prototype.loadPartAttrs = function(attrs) {
      var attr, f, result, val;
      f = 'Base:M/View.loadPartAttrs';
      result = {};
      for (attr in attrs) {
        val = attrs[attr];
        if ('p_' !== attr.slice(0, 2)) {
          continue;
        }
        result[attr.slice(2)] = val;
      }
      return result;
    };

    View$Base.prototype.T_page = function(cv, ci, attrs) {
      var can_componentize, d_load, f, name, view;
      f = 'T_page';
      _log2(f, cv, ci, attrs);
      can_componentize = false;
      if (this.frame_inx < this.frames.length) {
        d_load = E.oLoader.layout(name = this.next_frame());
        view = 'frame/' + name;
      } else {
        d_load = E.oLoader.page(name = this.page_name);
        view = 'page/' + name;
      }
      return this.piece(view, attrs != null ? attrs : {}, d_load);
    };

    View$Base.prototype.T_part = function(cv, ci, attrs) {
      var d_load, f, view;
      view = attrs.part;
      f = 'T_part:' + view;
      d_load = E.oLoader.part(view);
      return this.piece(view, attrs, d_load, true);
    };

    View$Base.prototype.piece = function(view, attrs, d_load, is_part) {
      var can_componentize, d_result,
        _this = this;
      d_result = new m.Deferred();
      can_componentize = false;
      d_load.then(function(obj) {
        var content;
        content = obj.content, can_componentize = obj.can_componentize;
        _this.info_parts.push(_this.loadPartAttrs(attrs));
        _this.info_defer.push([]);
        return _this.handleIt(content);
      }).then(function(content) {
        var defer, result;
        defer = _this.info_defer.pop();
        if (can_componentize || attrs.dynamic || defer || !is_part) {
          if (defer && !can_componentize && !attrs.dynamic) {
            _log2("WARNING: DEFER logic in (" + view + "); wrapping DIV tag.");
          }
          result = _this.wrap(view, attrs, content, defer, can_componentize);
        } else {
          result = content;
        }
        d_result.resolve(result);
        return result;
      });
      return d_result.promise;
    };

    View$Base.prototype.T_defer = function(cv, ci, attrs, content) {
      var f;
      f = 'Base:M/View.T_defer:';
      this.info_defer[this.info_defer.length - 1].push({
        attrs: attrs,
        defer: this.handleIt(content)
      });
      return '';
    };

    View$Base.prototype.xT_if_true = function(attrs, content) {
      if (this.info_if_nms[attrs.name]) {
        return this.handleIt(content());
      } else {
        return '';
      }
    };

    View$Base.prototype.xT_if_false = function(attrs, content) {
      if (this.info_if_nms[attrs.name]) {
        return '';
      } else {
        return this.handleIt(content);
      }
    };

    View$Base.prototype.T_if = function(cv, ci, attrs, content) {
      var is_true, issue, lh, rh, tbl, val, _ref, _ref1;
      issue = false;
      is_true = false;
      if ('val' in attrs) {
        if ('eq' in attrs) {
          if (attrs.val === attrs.eq) {
            is_true = true;
          }
        } else if ('ne' in attrs) {
          if (attrs.val !== attrs.ne) {
            is_true = true;
          }
        } else if ('in_list' in attrs) {
          if (_ref = attrs.val, __indexOf.call(attrs.in_list.split(','), _ref) >= 0) {
            is_true = true;
          }
        } else {
          issue = true;
        }
      } else if ('set' in attrs) {
        is_true = attrs.set ? true : false;
      } else if ('not_set' in attrs) {
        is_true = attrs.not_set ? false : true;
      } else if ('table_is_not_empty' in attrs) {
        val = attrs.table_is_not_empty;
        _ref1 = val.split('/'), lh = _ref1[0], rh = _ref1[1];
        tbl = this._accessModelTable(val, false)[0];
        if (tbl.length) {
          is_true = true;
        }
      } else {
        issue = true;
      }
      if (issue) {
        console.log('ISSUE T_if', attrs);
      }
      if ('name' in attrs) {
        this.info_if_nms[attrs.name] = is_true;
      }
      if (is_true && content) {
        return this.handleIt(content);
      } else {
        return '';
      }
    };

    View$Base.prototype._accessModelTable = function(at_table, alias) {
      var dyn_list, dyn_m, dyn_t, lh, oM, rh, rh_alias, tbl, _ref, _ref1, _ref2;
      _ref = at_table.split('/'), lh = _ref[0], rh = _ref[1];
      if (lh in this.info_foreach) {
        tbl = this.info_foreach[lh].row[rh];
        _ref1 = this.info_foreach[lh].dyn, dyn_m = _ref1[0], dyn_t = _ref1[1], dyn_list = _ref1[2];
      } else {
        oM = E[lh]();
        tbl = oM.getTable(rh);
        _ref2 = [lh, rh, []], dyn_m = _ref2[0], dyn_t = _ref2[1], dyn_list = _ref2[2];
      }
      if (tbl.length === 0) {
        return [tbl, rh, lh, rh, oM];
      }
      rh_alias = rh;
      if (alias) {
        rh_alias = alias;
      }
      dyn_list.push([rh, rh_alias]);
      this.info_foreach[rh_alias] = {
        dyn: [dyn_m, dyn_t, dyn_list]
      };
      return [tbl, rh_alias, lh, rh, oM];
    };

    View$Base.prototype.T_foreach = function(cv, ci, attrs, content_f) {
      var f, limit, result, rh_alias, tbl, _doRowCb, _doWhile, _ref,
        _this = this;
      f = 'Base:M/View.T_foreach';
      _ref = this._accessModelTable(attrs.table, attrs.alias), tbl = _ref[0], rh_alias = _ref[1];
      if (tbl.length === 0) {
        return '';
      }
      result = [];
      limit = 'limit' in attrs ? Number(attrs.limit) - 1 : tbl.length;
      _doWhile = function(count, cb) {
        var offset, _until_false;
        offset = 0;
        _until_false = function(result) {
          if (result === false || offset >= count) {
            return result;
          }
          return (cb(offset++)).then(_until_false);
        };
        return _until_false(true);
      };
      _doRowCb = function(count) {
        var row;
        row = tbl[count];
        _this.info_foreach[rh_alias].row = row;
        _this.info_foreach[rh_alias].count = count;
        return (_this.handleIt(content_f)).then(function(content) {
          result.push(content);
          return true;
        });
      };
      return (_doWhile(limit, _doRowCb)).then(function(any) {
        delete _this.info_foreach[rh_alias];
        switch (result.length) {
          case 0:
            return '';
          case 1:
            return result[0];
          default:
            return _this.syncAny(result);
        }
      });
    };

    View$Base.prototype.xT_fist = function(attrs) {
      var any_req, choices, fl, fl_nm, fm_nm, focus_nm, help, hpfl, is_first, issues, ix, map, nm, oFi, one_field_nm, orig, out, part, row, rows, s, show_req, value_fl_nm, _i, _j, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      part = (_ref = attrs.part) != null ? _ref : 'fist_default';
      row = (_ref1 = attrs.row) != null ? _ref1 : false;
      fm_nm = attrs.form;
      oFi = E.fist(fm_nm);
      one_field_nm = attrs.field != null ? attrs.field : false;
      help = (_ref2 = attrs.help) != null ? _ref2 : '';
      show_req = 'show_req' in attrs ? attrs.show_req : 'yes';
      any_req = false;
      is_first = true;
      out = [];
      hpfl = (function() {
        var _results;
        _results = [];
        for (nm in oFi.getHtmlFieldValues()) {
          _results.push(nm);
        }
        return _results;
      })();
      issues = oFi.getFieldIssues();
      focus_nm = oFi.getFocus();
      map = E['issues$' + E.appGetSetting(E.App().path(), 'group')];
      for (_i = 0, _len = hpfl.length; _i < _len; _i++) {
        fl_nm = hpfl[_i];
        if (one_field_nm !== false && one_field_nm !== fl_nm) {
          continue;
        }
        orig = oFi.getFieldAttributes(fl_nm);
        fl = E.merge({
          tip: '',
          fistnm: fm_nm,
          focus: ''
        }, orig);
        if (fl_nm === focus_nm) {
          fl.focus = 'yes';
        }
        fl.is_first = is_first === true ? 'yes' : '';
        is_first = false;
        fl.yes_val = fl.type === 'yesno' ? String((_ref3 = fl.cdata) != null ? _ref3 : '1') : 'not_used';
        fl.req = fl.req === true ? 'yes' : '';
        if (fl.req === true) {
          any_req = true;
        }
        fl.name = fl_nm;
        if ((_ref4 = fl["default"]) == null) {
          fl["default"] = '';
        }
        fl["default"] = String(fl["default"]);
        value_fl_nm = row ? fl_nm + '__' + row : fl_nm;
        fl.value = (_ref5 = oFi.getHtmlFieldValue(value_fl_nm)) != null ? _ref5 : fl["default"];
        fl.selected = fl.type === 'yesno' && fl.value === fl.yes_val ? 'yes' : '';
        fl.id = 'U' + E.nextCounter();
        fl.type = (fl.type.split(':'))[0];
        if ((_ref6 = fl.width) == null) {
          fl.width = '';
        }
        if ((_ref7 = fl.size) == null) {
          fl.size = '';
        }
        if (fl.type === 'radio' || fl.type === 'pulldown') {
          choices = oFi.getChoices(fl_nm);
          rows = [];
          for (ix = _j = 0, _ref8 = choices.options.length; 0 <= _ref8 ? _j < _ref8 : _j > _ref8; ix = 0 <= _ref8 ? ++_j : --_j) {
            s = choices.values[ix] === (String(fl.value)) ? 'yes' : '';
            rows.push({
              option: choices.options[ix],
              value: choices.values[ix],
              selected: s
            });
          }
          fl.Choice = rows;
        }
        fl.issue = issues[value_fl_nm] ? issues[value_fl_nm].asTable(map)[0].issue : '';
        out.push(fl);
      }
      this.fist_table = {
        Form: [
          {
            show_req: show_req,
            any_req: any_req,
            help: help
          }
        ],
        Control: out
      };
      return this.T_part({
        part: part
      });
    };

    View$Base.prototype.xT_mithril = function(attrs) {
      var _base, _ref;
      if ((_ref = (_base = E.Extra).components) == null) {
        _base.components = {};
      }
      return E.Extra.components[attrs.func](attrs);
    };

    View$Base.prototype.xT_show_me = function(attrs, content) {
      var ans, f;
      f = 'Base:M/View.T_showme';
      _log2('======== attrs   ======', f, attrs);
      _log2('======== content ======', f, content);
      ans = this.handleIt(content);
      _log2('======== handleIt =====', f, ans);
      return ans;
    };

    return View$Base;

  })(E.ModelJS);

  E.Model.View$Base = View$Base;

}).call(this);
