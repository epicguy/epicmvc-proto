// Generated by CoffeeScript 1.4.0
(function() {
  var Push,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Push = (function() {

    function Push(io, host, port, push_url) {
      this._onUpdate = __bind(this._onUpdate, this);

      var f, opts, uri,
        _this = this;
      f = 'Push:';
      this.handlers = {};
      uri = 'http://' + host + ':' + port + '/' + push_url;
      opts = {
        reconnectionDelay: 1000,
        reconnectionDelayMax: 10000,
        reconnectionAttempts: 10
      };
      this.socket = io.connect(uri, opts);
      this.manager = this.socket.io;
      _log2(f, 'manager:', this.manager);
      this.socket.on('connected', this._onConnected);
      this.socket.on('update', this._onUpdate);
      this.socket.on('connect', function() {
        f = 'Push:socket:connect:';
        return _log2(f, 'got connected');
      });
      this.socket.on('disconnect', function(reason) {
        f = 'Push:socket:disconnect:';
        return _log2(f, reason);
      });
      this.socket.on('reconnect_attempt', function(nextAttemptNum) {
        f = 'Push:socket:reconnect_attempt:';
        return _log2(f, 'about to try for the:', nextAttemptNum, 'time');
      });
      this.socket.on('reconnecting', function(attemptNum) {
        f = 'Push:socket:reconnecting:';
        return _log2(f, 'attempting reconnect for the:', attemptNum, 'time');
      });
      this.socket.on('reconnect_error', function(error) {
        f = 'Push:socket:reconnect_error:';
        return _log2(f, error.type, ":", error.message);
      });
      this.socket.on('reconnect', function(attemptNum) {
        f = 'Push:socket:reconnect:';
        return _log2(f, 'success after attempt:', attemptNum);
      });
      this.socket.on('reconnect_failed', function() {
        f = 'Push:socket:reconnect_failed:';
        return _log2(f, 'giving up trying to reconnect');
      });
      this.socket.on('error', function(error) {
        f = 'Push:socket:error:';
        return _log2(f, {
          error: error
        });
      });
    }

    Push.prototype.sync = function(push_handle, syncFunc) {
      var f;
      f = 'Push:sync:';
      _log2(f, push_handle);
      this.handlers[push_handle] = syncFunc;
      return this.socket.emit('listen', push_handle);
    };

    Push.prototype._onConnected = function() {
      var f;
      f = 'Push:_onConnected:';
      return _log2(f, 'connected to server');
    };

    Push.prototype._onUpdate = function(data) {
      var f;
      f = 'Push:_onUpdate:';
      return this.handlers[data.push_handle](data.sync);
    };

    return Push;

  })();

  window.EpicMvc.Extras.Push = Push;

}).call(this);
